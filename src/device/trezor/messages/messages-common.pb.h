// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages-common.proto

#ifndef PROTOBUF_messages_2dcommon_2eproto__INCLUDED
#define PROTOBUF_messages_2dcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_messages_2dcommon_2eproto();
void protobuf_AssignDesc_messages_2dcommon_2eproto();
void protobuf_ShutdownFile_messages_2dcommon_2eproto();

class Success;
class Failure;
class ButtonRequest;
class ButtonAck;
class PinMatrixRequest;
class PinMatrixAck;
class PassphraseRequest;
class PassphraseAck;
class PassphraseStateRequest;
class PassphraseStateAck;
class HDNodeType;

enum Failure_FailureType {
  Failure_FailureType_Failure_UnexpectedMessage = 1,
  Failure_FailureType_Failure_ButtonExpected = 2,
  Failure_FailureType_Failure_DataError = 3,
  Failure_FailureType_Failure_ActionCancelled = 4,
  Failure_FailureType_Failure_PinExpected = 5,
  Failure_FailureType_Failure_PinCancelled = 6,
  Failure_FailureType_Failure_PinInvalid = 7,
  Failure_FailureType_Failure_InvalidSignature = 8,
  Failure_FailureType_Failure_ProcessError = 9,
  Failure_FailureType_Failure_NotEnoughFunds = 10,
  Failure_FailureType_Failure_NotInitialized = 11,
  Failure_FailureType_Failure_PinMismatch = 12,
  Failure_FailureType_Failure_FirmwareError = 99
};
bool Failure_FailureType_IsValid(int value);
const Failure_FailureType Failure_FailureType_FailureType_MIN = Failure_FailureType_Failure_UnexpectedMessage;
const Failure_FailureType Failure_FailureType_FailureType_MAX = Failure_FailureType_Failure_FirmwareError;
const int Failure_FailureType_FailureType_ARRAYSIZE = Failure_FailureType_FailureType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Failure_FailureType_descriptor();
inline const ::std::string& Failure_FailureType_Name(Failure_FailureType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Failure_FailureType_descriptor(), value);
}
inline bool Failure_FailureType_Parse(
    const ::std::string& name, Failure_FailureType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Failure_FailureType>(
    Failure_FailureType_descriptor(), name, value);
}
enum ButtonRequest_ButtonRequestType {
  ButtonRequest_ButtonRequestType_ButtonRequest_Other = 1,
  ButtonRequest_ButtonRequestType_ButtonRequest_FeeOverThreshold = 2,
  ButtonRequest_ButtonRequestType_ButtonRequest_ConfirmOutput = 3,
  ButtonRequest_ButtonRequestType_ButtonRequest_ResetDevice = 4,
  ButtonRequest_ButtonRequestType_ButtonRequest_ConfirmWord = 5,
  ButtonRequest_ButtonRequestType_ButtonRequest_WipeDevice = 6,
  ButtonRequest_ButtonRequestType_ButtonRequest_ProtectCall = 7,
  ButtonRequest_ButtonRequestType_ButtonRequest_SignTx = 8,
  ButtonRequest_ButtonRequestType_ButtonRequest_FirmwareCheck = 9,
  ButtonRequest_ButtonRequestType_ButtonRequest_Address = 10,
  ButtonRequest_ButtonRequestType_ButtonRequest_PublicKey = 11,
  ButtonRequest_ButtonRequestType_ButtonRequest_MnemonicWordCount = 12,
  ButtonRequest_ButtonRequestType_ButtonRequest_MnemonicInput = 13,
  ButtonRequest_ButtonRequestType_ButtonRequest_PassphraseType = 14
};
bool ButtonRequest_ButtonRequestType_IsValid(int value);
const ButtonRequest_ButtonRequestType ButtonRequest_ButtonRequestType_ButtonRequestType_MIN = ButtonRequest_ButtonRequestType_ButtonRequest_Other;
const ButtonRequest_ButtonRequestType ButtonRequest_ButtonRequestType_ButtonRequestType_MAX = ButtonRequest_ButtonRequestType_ButtonRequest_PassphraseType;
const int ButtonRequest_ButtonRequestType_ButtonRequestType_ARRAYSIZE = ButtonRequest_ButtonRequestType_ButtonRequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ButtonRequest_ButtonRequestType_descriptor();
inline const ::std::string& ButtonRequest_ButtonRequestType_Name(ButtonRequest_ButtonRequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ButtonRequest_ButtonRequestType_descriptor(), value);
}
inline bool ButtonRequest_ButtonRequestType_Parse(
    const ::std::string& name, ButtonRequest_ButtonRequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ButtonRequest_ButtonRequestType>(
    ButtonRequest_ButtonRequestType_descriptor(), name, value);
}
enum PinMatrixRequest_PinMatrixRequestType {
  PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_Current = 1,
  PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_NewFirst = 2,
  PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_NewSecond = 3
};
bool PinMatrixRequest_PinMatrixRequestType_IsValid(int value);
const PinMatrixRequest_PinMatrixRequestType PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_MIN = PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_Current;
const PinMatrixRequest_PinMatrixRequestType PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_MAX = PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_NewSecond;
const int PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_ARRAYSIZE = PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PinMatrixRequest_PinMatrixRequestType_descriptor();
inline const ::std::string& PinMatrixRequest_PinMatrixRequestType_Name(PinMatrixRequest_PinMatrixRequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PinMatrixRequest_PinMatrixRequestType_descriptor(), value);
}
inline bool PinMatrixRequest_PinMatrixRequestType_Parse(
    const ::std::string& name, PinMatrixRequest_PinMatrixRequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PinMatrixRequest_PinMatrixRequestType>(
    PinMatrixRequest_PinMatrixRequestType_descriptor(), name, value);
}
// ===================================================================

class Success : public ::google::protobuf::Message {
 public:
  Success();
  virtual ~Success();

  Success(const Success& from);

  inline Success& operator=(const Success& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Success& default_instance();

  void Swap(Success* other);

  // implements Message ----------------------------------------------

  Success* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Success& from);
  void MergeFrom(const Success& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:Success)
 private:
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* message_;
  friend void  protobuf_AddDesc_messages_2dcommon_2eproto();
  friend void protobuf_AssignDesc_messages_2dcommon_2eproto();
  friend void protobuf_ShutdownFile_messages_2dcommon_2eproto();

  void InitAsDefaultInstance();
  static Success* default_instance_;
};
// -------------------------------------------------------------------

class Failure : public ::google::protobuf::Message {
 public:
  Failure();
  virtual ~Failure();

  Failure(const Failure& from);

  inline Failure& operator=(const Failure& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Failure& default_instance();

  void Swap(Failure* other);

  // implements Message ----------------------------------------------

  Failure* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Failure& from);
  void MergeFrom(const Failure& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Failure_FailureType FailureType;
  static const FailureType Failure_UnexpectedMessage = Failure_FailureType_Failure_UnexpectedMessage;
  static const FailureType Failure_ButtonExpected = Failure_FailureType_Failure_ButtonExpected;
  static const FailureType Failure_DataError = Failure_FailureType_Failure_DataError;
  static const FailureType Failure_ActionCancelled = Failure_FailureType_Failure_ActionCancelled;
  static const FailureType Failure_PinExpected = Failure_FailureType_Failure_PinExpected;
  static const FailureType Failure_PinCancelled = Failure_FailureType_Failure_PinCancelled;
  static const FailureType Failure_PinInvalid = Failure_FailureType_Failure_PinInvalid;
  static const FailureType Failure_InvalidSignature = Failure_FailureType_Failure_InvalidSignature;
  static const FailureType Failure_ProcessError = Failure_FailureType_Failure_ProcessError;
  static const FailureType Failure_NotEnoughFunds = Failure_FailureType_Failure_NotEnoughFunds;
  static const FailureType Failure_NotInitialized = Failure_FailureType_Failure_NotInitialized;
  static const FailureType Failure_PinMismatch = Failure_FailureType_Failure_PinMismatch;
  static const FailureType Failure_FirmwareError = Failure_FailureType_Failure_FirmwareError;
  static inline bool FailureType_IsValid(int value) {
    return Failure_FailureType_IsValid(value);
  }
  static const FailureType FailureType_MIN =
    Failure_FailureType_FailureType_MIN;
  static const FailureType FailureType_MAX =
    Failure_FailureType_FailureType_MAX;
  static const int FailureType_ARRAYSIZE =
    Failure_FailureType_FailureType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FailureType_descriptor() {
    return Failure_FailureType_descriptor();
  }
  static inline const ::std::string& FailureType_Name(FailureType value) {
    return Failure_FailureType_Name(value);
  }
  static inline bool FailureType_Parse(const ::std::string& name,
      FailureType* value) {
    return Failure_FailureType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Failure.FailureType code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::Failure_FailureType code() const;
  inline void set_code(::Failure_FailureType value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:Failure)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* message_;
  int code_;
  friend void  protobuf_AddDesc_messages_2dcommon_2eproto();
  friend void protobuf_AssignDesc_messages_2dcommon_2eproto();
  friend void protobuf_ShutdownFile_messages_2dcommon_2eproto();

  void InitAsDefaultInstance();
  static Failure* default_instance_;
};
// -------------------------------------------------------------------

class ButtonRequest : public ::google::protobuf::Message {
 public:
  ButtonRequest();
  virtual ~ButtonRequest();

  ButtonRequest(const ButtonRequest& from);

  inline ButtonRequest& operator=(const ButtonRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ButtonRequest& default_instance();

  void Swap(ButtonRequest* other);

  // implements Message ----------------------------------------------

  ButtonRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ButtonRequest& from);
  void MergeFrom(const ButtonRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ButtonRequest_ButtonRequestType ButtonRequestType;
  static const ButtonRequestType ButtonRequest_Other = ButtonRequest_ButtonRequestType_ButtonRequest_Other;
  static const ButtonRequestType ButtonRequest_FeeOverThreshold = ButtonRequest_ButtonRequestType_ButtonRequest_FeeOverThreshold;
  static const ButtonRequestType ButtonRequest_ConfirmOutput = ButtonRequest_ButtonRequestType_ButtonRequest_ConfirmOutput;
  static const ButtonRequestType ButtonRequest_ResetDevice = ButtonRequest_ButtonRequestType_ButtonRequest_ResetDevice;
  static const ButtonRequestType ButtonRequest_ConfirmWord = ButtonRequest_ButtonRequestType_ButtonRequest_ConfirmWord;
  static const ButtonRequestType ButtonRequest_WipeDevice = ButtonRequest_ButtonRequestType_ButtonRequest_WipeDevice;
  static const ButtonRequestType ButtonRequest_ProtectCall = ButtonRequest_ButtonRequestType_ButtonRequest_ProtectCall;
  static const ButtonRequestType ButtonRequest_SignTx = ButtonRequest_ButtonRequestType_ButtonRequest_SignTx;
  static const ButtonRequestType ButtonRequest_FirmwareCheck = ButtonRequest_ButtonRequestType_ButtonRequest_FirmwareCheck;
  static const ButtonRequestType ButtonRequest_Address = ButtonRequest_ButtonRequestType_ButtonRequest_Address;
  static const ButtonRequestType ButtonRequest_PublicKey = ButtonRequest_ButtonRequestType_ButtonRequest_PublicKey;
  static const ButtonRequestType ButtonRequest_MnemonicWordCount = ButtonRequest_ButtonRequestType_ButtonRequest_MnemonicWordCount;
  static const ButtonRequestType ButtonRequest_MnemonicInput = ButtonRequest_ButtonRequestType_ButtonRequest_MnemonicInput;
  static const ButtonRequestType ButtonRequest_PassphraseType = ButtonRequest_ButtonRequestType_ButtonRequest_PassphraseType;
  static inline bool ButtonRequestType_IsValid(int value) {
    return ButtonRequest_ButtonRequestType_IsValid(value);
  }
  static const ButtonRequestType ButtonRequestType_MIN =
    ButtonRequest_ButtonRequestType_ButtonRequestType_MIN;
  static const ButtonRequestType ButtonRequestType_MAX =
    ButtonRequest_ButtonRequestType_ButtonRequestType_MAX;
  static const int ButtonRequestType_ARRAYSIZE =
    ButtonRequest_ButtonRequestType_ButtonRequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ButtonRequestType_descriptor() {
    return ButtonRequest_ButtonRequestType_descriptor();
  }
  static inline const ::std::string& ButtonRequestType_Name(ButtonRequestType value) {
    return ButtonRequest_ButtonRequestType_Name(value);
  }
  static inline bool ButtonRequestType_Parse(const ::std::string& name,
      ButtonRequestType* value) {
    return ButtonRequest_ButtonRequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .ButtonRequest.ButtonRequestType code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::ButtonRequest_ButtonRequestType code() const;
  inline void set_code(::ButtonRequest_ButtonRequestType value);

  // optional string data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:ButtonRequest)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* data_;
  int code_;
  friend void  protobuf_AddDesc_messages_2dcommon_2eproto();
  friend void protobuf_AssignDesc_messages_2dcommon_2eproto();
  friend void protobuf_ShutdownFile_messages_2dcommon_2eproto();

  void InitAsDefaultInstance();
  static ButtonRequest* default_instance_;
};
// -------------------------------------------------------------------

class ButtonAck : public ::google::protobuf::Message {
 public:
  ButtonAck();
  virtual ~ButtonAck();

  ButtonAck(const ButtonAck& from);

  inline ButtonAck& operator=(const ButtonAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ButtonAck& default_instance();

  void Swap(ButtonAck* other);

  // implements Message ----------------------------------------------

  ButtonAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ButtonAck& from);
  void MergeFrom(const ButtonAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ButtonAck)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_messages_2dcommon_2eproto();
  friend void protobuf_AssignDesc_messages_2dcommon_2eproto();
  friend void protobuf_ShutdownFile_messages_2dcommon_2eproto();

  void InitAsDefaultInstance();
  static ButtonAck* default_instance_;
};
// -------------------------------------------------------------------

class PinMatrixRequest : public ::google::protobuf::Message {
 public:
  PinMatrixRequest();
  virtual ~PinMatrixRequest();

  PinMatrixRequest(const PinMatrixRequest& from);

  inline PinMatrixRequest& operator=(const PinMatrixRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PinMatrixRequest& default_instance();

  void Swap(PinMatrixRequest* other);

  // implements Message ----------------------------------------------

  PinMatrixRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PinMatrixRequest& from);
  void MergeFrom(const PinMatrixRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PinMatrixRequest_PinMatrixRequestType PinMatrixRequestType;
  static const PinMatrixRequestType PinMatrixRequestType_Current = PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_Current;
  static const PinMatrixRequestType PinMatrixRequestType_NewFirst = PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_NewFirst;
  static const PinMatrixRequestType PinMatrixRequestType_NewSecond = PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_NewSecond;
  static inline bool PinMatrixRequestType_IsValid(int value) {
    return PinMatrixRequest_PinMatrixRequestType_IsValid(value);
  }
  static const PinMatrixRequestType PinMatrixRequestType_MIN =
    PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_MIN;
  static const PinMatrixRequestType PinMatrixRequestType_MAX =
    PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_MAX;
  static const int PinMatrixRequestType_ARRAYSIZE =
    PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PinMatrixRequestType_descriptor() {
    return PinMatrixRequest_PinMatrixRequestType_descriptor();
  }
  static inline const ::std::string& PinMatrixRequestType_Name(PinMatrixRequestType value) {
    return PinMatrixRequest_PinMatrixRequestType_Name(value);
  }
  static inline bool PinMatrixRequestType_Parse(const ::std::string& name,
      PinMatrixRequestType* value) {
    return PinMatrixRequest_PinMatrixRequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PinMatrixRequest.PinMatrixRequestType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PinMatrixRequest_PinMatrixRequestType type() const;
  inline void set_type(::PinMatrixRequest_PinMatrixRequestType value);

  // @@protoc_insertion_point(class_scope:PinMatrixRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  friend void  protobuf_AddDesc_messages_2dcommon_2eproto();
  friend void protobuf_AssignDesc_messages_2dcommon_2eproto();
  friend void protobuf_ShutdownFile_messages_2dcommon_2eproto();

  void InitAsDefaultInstance();
  static PinMatrixRequest* default_instance_;
};
// -------------------------------------------------------------------

class PinMatrixAck : public ::google::protobuf::Message {
 public:
  PinMatrixAck();
  virtual ~PinMatrixAck();

  PinMatrixAck(const PinMatrixAck& from);

  inline PinMatrixAck& operator=(const PinMatrixAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PinMatrixAck& default_instance();

  void Swap(PinMatrixAck* other);

  // implements Message ----------------------------------------------

  PinMatrixAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PinMatrixAck& from);
  void MergeFrom(const PinMatrixAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string pin = 1;
  inline bool has_pin() const;
  inline void clear_pin();
  static const int kPinFieldNumber = 1;
  inline const ::std::string& pin() const;
  inline void set_pin(const ::std::string& value);
  inline void set_pin(const char* value);
  inline void set_pin(const char* value, size_t size);
  inline ::std::string* mutable_pin();
  inline ::std::string* release_pin();
  inline void set_allocated_pin(::std::string* pin);

  // @@protoc_insertion_point(class_scope:PinMatrixAck)
 private:
  inline void set_has_pin();
  inline void clear_has_pin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* pin_;
  friend void  protobuf_AddDesc_messages_2dcommon_2eproto();
  friend void protobuf_AssignDesc_messages_2dcommon_2eproto();
  friend void protobuf_ShutdownFile_messages_2dcommon_2eproto();

  void InitAsDefaultInstance();
  static PinMatrixAck* default_instance_;
};
// -------------------------------------------------------------------

class PassphraseRequest : public ::google::protobuf::Message {
 public:
  PassphraseRequest();
  virtual ~PassphraseRequest();

  PassphraseRequest(const PassphraseRequest& from);

  inline PassphraseRequest& operator=(const PassphraseRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PassphraseRequest& default_instance();

  void Swap(PassphraseRequest* other);

  // implements Message ----------------------------------------------

  PassphraseRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PassphraseRequest& from);
  void MergeFrom(const PassphraseRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool on_device = 1;
  inline bool has_on_device() const;
  inline void clear_on_device();
  static const int kOnDeviceFieldNumber = 1;
  inline bool on_device() const;
  inline void set_on_device(bool value);

  // @@protoc_insertion_point(class_scope:PassphraseRequest)
 private:
  inline void set_has_on_device();
  inline void clear_has_on_device();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool on_device_;
  friend void  protobuf_AddDesc_messages_2dcommon_2eproto();
  friend void protobuf_AssignDesc_messages_2dcommon_2eproto();
  friend void protobuf_ShutdownFile_messages_2dcommon_2eproto();

  void InitAsDefaultInstance();
  static PassphraseRequest* default_instance_;
};
// -------------------------------------------------------------------

class PassphraseAck : public ::google::protobuf::Message {
 public:
  PassphraseAck();
  virtual ~PassphraseAck();

  PassphraseAck(const PassphraseAck& from);

  inline PassphraseAck& operator=(const PassphraseAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PassphraseAck& default_instance();

  void Swap(PassphraseAck* other);

  // implements Message ----------------------------------------------

  PassphraseAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PassphraseAck& from);
  void MergeFrom(const PassphraseAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string passphrase = 1;
  inline bool has_passphrase() const;
  inline void clear_passphrase();
  static const int kPassphraseFieldNumber = 1;
  inline const ::std::string& passphrase() const;
  inline void set_passphrase(const ::std::string& value);
  inline void set_passphrase(const char* value);
  inline void set_passphrase(const char* value, size_t size);
  inline ::std::string* mutable_passphrase();
  inline ::std::string* release_passphrase();
  inline void set_allocated_passphrase(::std::string* passphrase);

  // optional bytes state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline const ::std::string& state() const;
  inline void set_state(const ::std::string& value);
  inline void set_state(const char* value);
  inline void set_state(const void* value, size_t size);
  inline ::std::string* mutable_state();
  inline ::std::string* release_state();
  inline void set_allocated_state(::std::string* state);

  // @@protoc_insertion_point(class_scope:PassphraseAck)
 private:
  inline void set_has_passphrase();
  inline void clear_has_passphrase();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* passphrase_;
  ::std::string* state_;
  friend void  protobuf_AddDesc_messages_2dcommon_2eproto();
  friend void protobuf_AssignDesc_messages_2dcommon_2eproto();
  friend void protobuf_ShutdownFile_messages_2dcommon_2eproto();

  void InitAsDefaultInstance();
  static PassphraseAck* default_instance_;
};
// -------------------------------------------------------------------

class PassphraseStateRequest : public ::google::protobuf::Message {
 public:
  PassphraseStateRequest();
  virtual ~PassphraseStateRequest();

  PassphraseStateRequest(const PassphraseStateRequest& from);

  inline PassphraseStateRequest& operator=(const PassphraseStateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PassphraseStateRequest& default_instance();

  void Swap(PassphraseStateRequest* other);

  // implements Message ----------------------------------------------

  PassphraseStateRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PassphraseStateRequest& from);
  void MergeFrom(const PassphraseStateRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline const ::std::string& state() const;
  inline void set_state(const ::std::string& value);
  inline void set_state(const char* value);
  inline void set_state(const void* value, size_t size);
  inline ::std::string* mutable_state();
  inline ::std::string* release_state();
  inline void set_allocated_state(::std::string* state);

  // @@protoc_insertion_point(class_scope:PassphraseStateRequest)
 private:
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* state_;
  friend void  protobuf_AddDesc_messages_2dcommon_2eproto();
  friend void protobuf_AssignDesc_messages_2dcommon_2eproto();
  friend void protobuf_ShutdownFile_messages_2dcommon_2eproto();

  void InitAsDefaultInstance();
  static PassphraseStateRequest* default_instance_;
};
// -------------------------------------------------------------------

class PassphraseStateAck : public ::google::protobuf::Message {
 public:
  PassphraseStateAck();
  virtual ~PassphraseStateAck();

  PassphraseStateAck(const PassphraseStateAck& from);

  inline PassphraseStateAck& operator=(const PassphraseStateAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PassphraseStateAck& default_instance();

  void Swap(PassphraseStateAck* other);

  // implements Message ----------------------------------------------

  PassphraseStateAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PassphraseStateAck& from);
  void MergeFrom(const PassphraseStateAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PassphraseStateAck)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_messages_2dcommon_2eproto();
  friend void protobuf_AssignDesc_messages_2dcommon_2eproto();
  friend void protobuf_ShutdownFile_messages_2dcommon_2eproto();

  void InitAsDefaultInstance();
  static PassphraseStateAck* default_instance_;
};
// -------------------------------------------------------------------

class HDNodeType : public ::google::protobuf::Message {
 public:
  HDNodeType();
  virtual ~HDNodeType();

  HDNodeType(const HDNodeType& from);

  inline HDNodeType& operator=(const HDNodeType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HDNodeType& default_instance();

  void Swap(HDNodeType* other);

  // implements Message ----------------------------------------------

  HDNodeType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HDNodeType& from);
  void MergeFrom(const HDNodeType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 depth = 1;
  inline bool has_depth() const;
  inline void clear_depth();
  static const int kDepthFieldNumber = 1;
  inline ::google::protobuf::uint32 depth() const;
  inline void set_depth(::google::protobuf::uint32 value);

  // required uint32 fingerprint = 2;
  inline bool has_fingerprint() const;
  inline void clear_fingerprint();
  static const int kFingerprintFieldNumber = 2;
  inline ::google::protobuf::uint32 fingerprint() const;
  inline void set_fingerprint(::google::protobuf::uint32 value);

  // required uint32 child_num = 3;
  inline bool has_child_num() const;
  inline void clear_child_num();
  static const int kChildNumFieldNumber = 3;
  inline ::google::protobuf::uint32 child_num() const;
  inline void set_child_num(::google::protobuf::uint32 value);

  // required bytes chain_code = 4;
  inline bool has_chain_code() const;
  inline void clear_chain_code();
  static const int kChainCodeFieldNumber = 4;
  inline const ::std::string& chain_code() const;
  inline void set_chain_code(const ::std::string& value);
  inline void set_chain_code(const char* value);
  inline void set_chain_code(const void* value, size_t size);
  inline ::std::string* mutable_chain_code();
  inline ::std::string* release_chain_code();
  inline void set_allocated_chain_code(::std::string* chain_code);

  // optional bytes private_key = 5;
  inline bool has_private_key() const;
  inline void clear_private_key();
  static const int kPrivateKeyFieldNumber = 5;
  inline const ::std::string& private_key() const;
  inline void set_private_key(const ::std::string& value);
  inline void set_private_key(const char* value);
  inline void set_private_key(const void* value, size_t size);
  inline ::std::string* mutable_private_key();
  inline ::std::string* release_private_key();
  inline void set_allocated_private_key(::std::string* private_key);

  // optional bytes public_key = 6;
  inline bool has_public_key() const;
  inline void clear_public_key();
  static const int kPublicKeyFieldNumber = 6;
  inline const ::std::string& public_key() const;
  inline void set_public_key(const ::std::string& value);
  inline void set_public_key(const char* value);
  inline void set_public_key(const void* value, size_t size);
  inline ::std::string* mutable_public_key();
  inline ::std::string* release_public_key();
  inline void set_allocated_public_key(::std::string* public_key);

  // @@protoc_insertion_point(class_scope:HDNodeType)
 private:
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_fingerprint();
  inline void clear_has_fingerprint();
  inline void set_has_child_num();
  inline void clear_has_child_num();
  inline void set_has_chain_code();
  inline void clear_has_chain_code();
  inline void set_has_private_key();
  inline void clear_has_private_key();
  inline void set_has_public_key();
  inline void clear_has_public_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 depth_;
  ::google::protobuf::uint32 fingerprint_;
  ::std::string* chain_code_;
  ::std::string* private_key_;
  ::std::string* public_key_;
  ::google::protobuf::uint32 child_num_;
  friend void  protobuf_AddDesc_messages_2dcommon_2eproto();
  friend void protobuf_AssignDesc_messages_2dcommon_2eproto();
  friend void protobuf_ShutdownFile_messages_2dcommon_2eproto();

  void InitAsDefaultInstance();
  static HDNodeType* default_instance_;
};
// ===================================================================


// ===================================================================

// Success

// optional string message = 1;
inline bool Success::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Success::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Success::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Success::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& Success::message() const {
  // @@protoc_insertion_point(field_get:Success.message)
  return *message_;
}
inline void Success::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:Success.message)
}
inline void Success::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:Success.message)
}
inline void Success::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Success.message)
}
inline ::std::string* Success::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Success.message)
  return message_;
}
inline ::std::string* Success::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Success::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Success.message)
}

// -------------------------------------------------------------------

// Failure

// optional .Failure.FailureType code = 1;
inline bool Failure::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Failure::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Failure::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Failure::clear_code() {
  code_ = 1;
  clear_has_code();
}
inline ::Failure_FailureType Failure::code() const {
  // @@protoc_insertion_point(field_get:Failure.code)
  return static_cast< ::Failure_FailureType >(code_);
}
inline void Failure::set_code(::Failure_FailureType value) {
  assert(::Failure_FailureType_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:Failure.code)
}

// optional string message = 2;
inline bool Failure::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Failure::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Failure::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Failure::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& Failure::message() const {
  // @@protoc_insertion_point(field_get:Failure.message)
  return *message_;
}
inline void Failure::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:Failure.message)
}
inline void Failure::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:Failure.message)
}
inline void Failure::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Failure.message)
}
inline ::std::string* Failure::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Failure.message)
  return message_;
}
inline ::std::string* Failure::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Failure::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Failure.message)
}

// -------------------------------------------------------------------

// ButtonRequest

// optional .ButtonRequest.ButtonRequestType code = 1;
inline bool ButtonRequest::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ButtonRequest::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ButtonRequest::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ButtonRequest::clear_code() {
  code_ = 1;
  clear_has_code();
}
inline ::ButtonRequest_ButtonRequestType ButtonRequest::code() const {
  // @@protoc_insertion_point(field_get:ButtonRequest.code)
  return static_cast< ::ButtonRequest_ButtonRequestType >(code_);
}
inline void ButtonRequest::set_code(::ButtonRequest_ButtonRequestType value) {
  assert(::ButtonRequest_ButtonRequestType_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:ButtonRequest.code)
}

// optional string data = 2;
inline bool ButtonRequest::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ButtonRequest::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ButtonRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ButtonRequest::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& ButtonRequest::data() const {
  // @@protoc_insertion_point(field_get:ButtonRequest.data)
  return *data_;
}
inline void ButtonRequest::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:ButtonRequest.data)
}
inline void ButtonRequest::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:ButtonRequest.data)
}
inline void ButtonRequest::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ButtonRequest.data)
}
inline ::std::string* ButtonRequest::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ButtonRequest.data)
  return data_;
}
inline ::std::string* ButtonRequest::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ButtonRequest::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ButtonRequest.data)
}

// -------------------------------------------------------------------

// ButtonAck

// -------------------------------------------------------------------

// PinMatrixRequest

// optional .PinMatrixRequest.PinMatrixRequestType type = 1;
inline bool PinMatrixRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PinMatrixRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PinMatrixRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PinMatrixRequest::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::PinMatrixRequest_PinMatrixRequestType PinMatrixRequest::type() const {
  // @@protoc_insertion_point(field_get:PinMatrixRequest.type)
  return static_cast< ::PinMatrixRequest_PinMatrixRequestType >(type_);
}
inline void PinMatrixRequest::set_type(::PinMatrixRequest_PinMatrixRequestType value) {
  assert(::PinMatrixRequest_PinMatrixRequestType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:PinMatrixRequest.type)
}

// -------------------------------------------------------------------

// PinMatrixAck

// required string pin = 1;
inline bool PinMatrixAck::has_pin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PinMatrixAck::set_has_pin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PinMatrixAck::clear_has_pin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PinMatrixAck::clear_pin() {
  if (pin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pin_->clear();
  }
  clear_has_pin();
}
inline const ::std::string& PinMatrixAck::pin() const {
  // @@protoc_insertion_point(field_get:PinMatrixAck.pin)
  return *pin_;
}
inline void PinMatrixAck::set_pin(const ::std::string& value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
  // @@protoc_insertion_point(field_set:PinMatrixAck.pin)
}
inline void PinMatrixAck::set_pin(const char* value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
  // @@protoc_insertion_point(field_set_char:PinMatrixAck.pin)
}
inline void PinMatrixAck::set_pin(const char* value, size_t size) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pin_ = new ::std::string;
  }
  pin_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PinMatrixAck.pin)
}
inline ::std::string* PinMatrixAck::mutable_pin() {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pin_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PinMatrixAck.pin)
  return pin_;
}
inline ::std::string* PinMatrixAck::release_pin() {
  clear_has_pin();
  if (pin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pin_;
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PinMatrixAck::set_allocated_pin(::std::string* pin) {
  if (pin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pin_;
  }
  if (pin) {
    set_has_pin();
    pin_ = pin;
  } else {
    clear_has_pin();
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PinMatrixAck.pin)
}

// -------------------------------------------------------------------

// PassphraseRequest

// optional bool on_device = 1;
inline bool PassphraseRequest::has_on_device() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PassphraseRequest::set_has_on_device() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PassphraseRequest::clear_has_on_device() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PassphraseRequest::clear_on_device() {
  on_device_ = false;
  clear_has_on_device();
}
inline bool PassphraseRequest::on_device() const {
  // @@protoc_insertion_point(field_get:PassphraseRequest.on_device)
  return on_device_;
}
inline void PassphraseRequest::set_on_device(bool value) {
  set_has_on_device();
  on_device_ = value;
  // @@protoc_insertion_point(field_set:PassphraseRequest.on_device)
}

// -------------------------------------------------------------------

// PassphraseAck

// optional string passphrase = 1;
inline bool PassphraseAck::has_passphrase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PassphraseAck::set_has_passphrase() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PassphraseAck::clear_has_passphrase() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PassphraseAck::clear_passphrase() {
  if (passphrase_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passphrase_->clear();
  }
  clear_has_passphrase();
}
inline const ::std::string& PassphraseAck::passphrase() const {
  // @@protoc_insertion_point(field_get:PassphraseAck.passphrase)
  return *passphrase_;
}
inline void PassphraseAck::set_passphrase(const ::std::string& value) {
  set_has_passphrase();
  if (passphrase_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passphrase_ = new ::std::string;
  }
  passphrase_->assign(value);
  // @@protoc_insertion_point(field_set:PassphraseAck.passphrase)
}
inline void PassphraseAck::set_passphrase(const char* value) {
  set_has_passphrase();
  if (passphrase_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passphrase_ = new ::std::string;
  }
  passphrase_->assign(value);
  // @@protoc_insertion_point(field_set_char:PassphraseAck.passphrase)
}
inline void PassphraseAck::set_passphrase(const char* value, size_t size) {
  set_has_passphrase();
  if (passphrase_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passphrase_ = new ::std::string;
  }
  passphrase_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PassphraseAck.passphrase)
}
inline ::std::string* PassphraseAck::mutable_passphrase() {
  set_has_passphrase();
  if (passphrase_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passphrase_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PassphraseAck.passphrase)
  return passphrase_;
}
inline ::std::string* PassphraseAck::release_passphrase() {
  clear_has_passphrase();
  if (passphrase_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passphrase_;
    passphrase_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PassphraseAck::set_allocated_passphrase(::std::string* passphrase) {
  if (passphrase_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passphrase_;
  }
  if (passphrase) {
    set_has_passphrase();
    passphrase_ = passphrase;
  } else {
    clear_has_passphrase();
    passphrase_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PassphraseAck.passphrase)
}

// optional bytes state = 2;
inline bool PassphraseAck::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PassphraseAck::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PassphraseAck::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PassphraseAck::clear_state() {
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_->clear();
  }
  clear_has_state();
}
inline const ::std::string& PassphraseAck::state() const {
  // @@protoc_insertion_point(field_get:PassphraseAck.state)
  return *state_;
}
inline void PassphraseAck::set_state(const ::std::string& value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(value);
  // @@protoc_insertion_point(field_set:PassphraseAck.state)
}
inline void PassphraseAck::set_state(const char* value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(value);
  // @@protoc_insertion_point(field_set_char:PassphraseAck.state)
}
inline void PassphraseAck::set_state(const void* value, size_t size) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PassphraseAck.state)
}
inline ::std::string* PassphraseAck::mutable_state() {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PassphraseAck.state)
  return state_;
}
inline ::std::string* PassphraseAck::release_state() {
  clear_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = state_;
    state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PassphraseAck::set_allocated_state(::std::string* state) {
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete state_;
  }
  if (state) {
    set_has_state();
    state_ = state;
  } else {
    clear_has_state();
    state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PassphraseAck.state)
}

// -------------------------------------------------------------------

// PassphraseStateRequest

// optional bytes state = 1;
inline bool PassphraseStateRequest::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PassphraseStateRequest::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PassphraseStateRequest::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PassphraseStateRequest::clear_state() {
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_->clear();
  }
  clear_has_state();
}
inline const ::std::string& PassphraseStateRequest::state() const {
  // @@protoc_insertion_point(field_get:PassphraseStateRequest.state)
  return *state_;
}
inline void PassphraseStateRequest::set_state(const ::std::string& value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(value);
  // @@protoc_insertion_point(field_set:PassphraseStateRequest.state)
}
inline void PassphraseStateRequest::set_state(const char* value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(value);
  // @@protoc_insertion_point(field_set_char:PassphraseStateRequest.state)
}
inline void PassphraseStateRequest::set_state(const void* value, size_t size) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PassphraseStateRequest.state)
}
inline ::std::string* PassphraseStateRequest::mutable_state() {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PassphraseStateRequest.state)
  return state_;
}
inline ::std::string* PassphraseStateRequest::release_state() {
  clear_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = state_;
    state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PassphraseStateRequest::set_allocated_state(::std::string* state) {
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete state_;
  }
  if (state) {
    set_has_state();
    state_ = state;
  } else {
    clear_has_state();
    state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PassphraseStateRequest.state)
}

// -------------------------------------------------------------------

// PassphraseStateAck

// -------------------------------------------------------------------

// HDNodeType

// required uint32 depth = 1;
inline bool HDNodeType::has_depth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HDNodeType::set_has_depth() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HDNodeType::clear_has_depth() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HDNodeType::clear_depth() {
  depth_ = 0u;
  clear_has_depth();
}
inline ::google::protobuf::uint32 HDNodeType::depth() const {
  // @@protoc_insertion_point(field_get:HDNodeType.depth)
  return depth_;
}
inline void HDNodeType::set_depth(::google::protobuf::uint32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:HDNodeType.depth)
}

// required uint32 fingerprint = 2;
inline bool HDNodeType::has_fingerprint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HDNodeType::set_has_fingerprint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HDNodeType::clear_has_fingerprint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HDNodeType::clear_fingerprint() {
  fingerprint_ = 0u;
  clear_has_fingerprint();
}
inline ::google::protobuf::uint32 HDNodeType::fingerprint() const {
  // @@protoc_insertion_point(field_get:HDNodeType.fingerprint)
  return fingerprint_;
}
inline void HDNodeType::set_fingerprint(::google::protobuf::uint32 value) {
  set_has_fingerprint();
  fingerprint_ = value;
  // @@protoc_insertion_point(field_set:HDNodeType.fingerprint)
}

// required uint32 child_num = 3;
inline bool HDNodeType::has_child_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HDNodeType::set_has_child_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HDNodeType::clear_has_child_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HDNodeType::clear_child_num() {
  child_num_ = 0u;
  clear_has_child_num();
}
inline ::google::protobuf::uint32 HDNodeType::child_num() const {
  // @@protoc_insertion_point(field_get:HDNodeType.child_num)
  return child_num_;
}
inline void HDNodeType::set_child_num(::google::protobuf::uint32 value) {
  set_has_child_num();
  child_num_ = value;
  // @@protoc_insertion_point(field_set:HDNodeType.child_num)
}

// required bytes chain_code = 4;
inline bool HDNodeType::has_chain_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HDNodeType::set_has_chain_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HDNodeType::clear_has_chain_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HDNodeType::clear_chain_code() {
  if (chain_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chain_code_->clear();
  }
  clear_has_chain_code();
}
inline const ::std::string& HDNodeType::chain_code() const {
  // @@protoc_insertion_point(field_get:HDNodeType.chain_code)
  return *chain_code_;
}
inline void HDNodeType::set_chain_code(const ::std::string& value) {
  set_has_chain_code();
  if (chain_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chain_code_ = new ::std::string;
  }
  chain_code_->assign(value);
  // @@protoc_insertion_point(field_set:HDNodeType.chain_code)
}
inline void HDNodeType::set_chain_code(const char* value) {
  set_has_chain_code();
  if (chain_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chain_code_ = new ::std::string;
  }
  chain_code_->assign(value);
  // @@protoc_insertion_point(field_set_char:HDNodeType.chain_code)
}
inline void HDNodeType::set_chain_code(const void* value, size_t size) {
  set_has_chain_code();
  if (chain_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chain_code_ = new ::std::string;
  }
  chain_code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:HDNodeType.chain_code)
}
inline ::std::string* HDNodeType::mutable_chain_code() {
  set_has_chain_code();
  if (chain_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    chain_code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:HDNodeType.chain_code)
  return chain_code_;
}
inline ::std::string* HDNodeType::release_chain_code() {
  clear_has_chain_code();
  if (chain_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = chain_code_;
    chain_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HDNodeType::set_allocated_chain_code(::std::string* chain_code) {
  if (chain_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete chain_code_;
  }
  if (chain_code) {
    set_has_chain_code();
    chain_code_ = chain_code;
  } else {
    clear_has_chain_code();
    chain_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:HDNodeType.chain_code)
}

// optional bytes private_key = 5;
inline bool HDNodeType::has_private_key() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HDNodeType::set_has_private_key() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HDNodeType::clear_has_private_key() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HDNodeType::clear_private_key() {
  if (private_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_key_->clear();
  }
  clear_has_private_key();
}
inline const ::std::string& HDNodeType::private_key() const {
  // @@protoc_insertion_point(field_get:HDNodeType.private_key)
  return *private_key_;
}
inline void HDNodeType::set_private_key(const ::std::string& value) {
  set_has_private_key();
  if (private_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_key_ = new ::std::string;
  }
  private_key_->assign(value);
  // @@protoc_insertion_point(field_set:HDNodeType.private_key)
}
inline void HDNodeType::set_private_key(const char* value) {
  set_has_private_key();
  if (private_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_key_ = new ::std::string;
  }
  private_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:HDNodeType.private_key)
}
inline void HDNodeType::set_private_key(const void* value, size_t size) {
  set_has_private_key();
  if (private_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_key_ = new ::std::string;
  }
  private_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:HDNodeType.private_key)
}
inline ::std::string* HDNodeType::mutable_private_key() {
  set_has_private_key();
  if (private_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    private_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:HDNodeType.private_key)
  return private_key_;
}
inline ::std::string* HDNodeType::release_private_key() {
  clear_has_private_key();
  if (private_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = private_key_;
    private_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HDNodeType::set_allocated_private_key(::std::string* private_key) {
  if (private_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete private_key_;
  }
  if (private_key) {
    set_has_private_key();
    private_key_ = private_key;
  } else {
    clear_has_private_key();
    private_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:HDNodeType.private_key)
}

// optional bytes public_key = 6;
inline bool HDNodeType::has_public_key() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HDNodeType::set_has_public_key() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HDNodeType::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HDNodeType::clear_public_key() {
  if (public_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_key_->clear();
  }
  clear_has_public_key();
}
inline const ::std::string& HDNodeType::public_key() const {
  // @@protoc_insertion_point(field_get:HDNodeType.public_key)
  return *public_key_;
}
inline void HDNodeType::set_public_key(const ::std::string& value) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(value);
  // @@protoc_insertion_point(field_set:HDNodeType.public_key)
}
inline void HDNodeType::set_public_key(const char* value) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:HDNodeType.public_key)
}
inline void HDNodeType::set_public_key(const void* value, size_t size) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:HDNodeType.public_key)
}
inline ::std::string* HDNodeType::mutable_public_key() {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:HDNodeType.public_key)
  return public_key_;
}
inline ::std::string* HDNodeType::release_public_key() {
  clear_has_public_key();
  if (public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = public_key_;
    public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HDNodeType::set_allocated_public_key(::std::string* public_key) {
  if (public_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete public_key_;
  }
  if (public_key) {
    set_has_public_key();
    public_key_ = public_key;
  } else {
    clear_has_public_key();
    public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:HDNodeType.public_key)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Failure_FailureType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Failure_FailureType>() {
  return ::Failure_FailureType_descriptor();
}
template <> struct is_proto_enum< ::ButtonRequest_ButtonRequestType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ButtonRequest_ButtonRequestType>() {
  return ::ButtonRequest_ButtonRequestType_descriptor();
}
template <> struct is_proto_enum< ::PinMatrixRequest_PinMatrixRequestType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PinMatrixRequest_PinMatrixRequestType>() {
  return ::PinMatrixRequest_PinMatrixRequestType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_2dcommon_2eproto__INCLUDED
