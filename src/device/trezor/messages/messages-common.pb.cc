// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages-common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages-common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Success_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Success_reflection_ = NULL;
const ::google::protobuf::Descriptor* Failure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Failure_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Failure_FailureType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ButtonRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ButtonRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ButtonRequest_ButtonRequestType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ButtonAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ButtonAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PinMatrixRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PinMatrixRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PinMatrixRequest_PinMatrixRequestType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PinMatrixAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PinMatrixAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassphraseRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassphraseRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassphraseAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassphraseAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassphraseStateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassphraseStateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassphraseStateAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassphraseStateAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* HDNodeType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HDNodeType_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_2dcommon_2eproto() {
  protobuf_AddDesc_messages_2dcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages-common.proto");
  GOOGLE_CHECK(file != NULL);
  Success_descriptor_ = file->message_type(0);
  static const int Success_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Success, message_),
  };
  Success_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Success_descriptor_,
      Success::default_instance_,
      Success_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Success, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Success, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Success));
  Failure_descriptor_ = file->message_type(1);
  static const int Failure_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Failure, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Failure, message_),
  };
  Failure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Failure_descriptor_,
      Failure::default_instance_,
      Failure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Failure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Failure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Failure));
  Failure_FailureType_descriptor_ = Failure_descriptor_->enum_type(0);
  ButtonRequest_descriptor_ = file->message_type(2);
  static const int ButtonRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonRequest, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonRequest, data_),
  };
  ButtonRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ButtonRequest_descriptor_,
      ButtonRequest::default_instance_,
      ButtonRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ButtonRequest));
  ButtonRequest_ButtonRequestType_descriptor_ = ButtonRequest_descriptor_->enum_type(0);
  ButtonAck_descriptor_ = file->message_type(3);
  static const int ButtonAck_offsets_[1] = {
  };
  ButtonAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ButtonAck_descriptor_,
      ButtonAck::default_instance_,
      ButtonAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ButtonAck));
  PinMatrixRequest_descriptor_ = file->message_type(4);
  static const int PinMatrixRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PinMatrixRequest, type_),
  };
  PinMatrixRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PinMatrixRequest_descriptor_,
      PinMatrixRequest::default_instance_,
      PinMatrixRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PinMatrixRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PinMatrixRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PinMatrixRequest));
  PinMatrixRequest_PinMatrixRequestType_descriptor_ = PinMatrixRequest_descriptor_->enum_type(0);
  PinMatrixAck_descriptor_ = file->message_type(5);
  static const int PinMatrixAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PinMatrixAck, pin_),
  };
  PinMatrixAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PinMatrixAck_descriptor_,
      PinMatrixAck::default_instance_,
      PinMatrixAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PinMatrixAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PinMatrixAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PinMatrixAck));
  PassphraseRequest_descriptor_ = file->message_type(6);
  static const int PassphraseRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassphraseRequest, on_device_),
  };
  PassphraseRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassphraseRequest_descriptor_,
      PassphraseRequest::default_instance_,
      PassphraseRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassphraseRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassphraseRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassphraseRequest));
  PassphraseAck_descriptor_ = file->message_type(7);
  static const int PassphraseAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassphraseAck, passphrase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassphraseAck, state_),
  };
  PassphraseAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassphraseAck_descriptor_,
      PassphraseAck::default_instance_,
      PassphraseAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassphraseAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassphraseAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassphraseAck));
  PassphraseStateRequest_descriptor_ = file->message_type(8);
  static const int PassphraseStateRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassphraseStateRequest, state_),
  };
  PassphraseStateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassphraseStateRequest_descriptor_,
      PassphraseStateRequest::default_instance_,
      PassphraseStateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassphraseStateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassphraseStateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassphraseStateRequest));
  PassphraseStateAck_descriptor_ = file->message_type(9);
  static const int PassphraseStateAck_offsets_[1] = {
  };
  PassphraseStateAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassphraseStateAck_descriptor_,
      PassphraseStateAck::default_instance_,
      PassphraseStateAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassphraseStateAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassphraseStateAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassphraseStateAck));
  HDNodeType_descriptor_ = file->message_type(10);
  static const int HDNodeType_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDNodeType, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDNodeType, fingerprint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDNodeType, child_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDNodeType, chain_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDNodeType, private_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDNodeType, public_key_),
  };
  HDNodeType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HDNodeType_descriptor_,
      HDNodeType::default_instance_,
      HDNodeType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDNodeType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDNodeType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HDNodeType));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_2dcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Success_descriptor_, &Success::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Failure_descriptor_, &Failure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ButtonRequest_descriptor_, &ButtonRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ButtonAck_descriptor_, &ButtonAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PinMatrixRequest_descriptor_, &PinMatrixRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PinMatrixAck_descriptor_, &PinMatrixAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassphraseRequest_descriptor_, &PassphraseRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassphraseAck_descriptor_, &PassphraseAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassphraseStateRequest_descriptor_, &PassphraseStateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassphraseStateAck_descriptor_, &PassphraseStateAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HDNodeType_descriptor_, &HDNodeType::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_2dcommon_2eproto() {
  delete Success::default_instance_;
  delete Success_reflection_;
  delete Failure::default_instance_;
  delete Failure_reflection_;
  delete ButtonRequest::default_instance_;
  delete ButtonRequest_reflection_;
  delete ButtonAck::default_instance_;
  delete ButtonAck_reflection_;
  delete PinMatrixRequest::default_instance_;
  delete PinMatrixRequest_reflection_;
  delete PinMatrixAck::default_instance_;
  delete PinMatrixAck_reflection_;
  delete PassphraseRequest::default_instance_;
  delete PassphraseRequest_reflection_;
  delete PassphraseAck::default_instance_;
  delete PassphraseAck_reflection_;
  delete PassphraseStateRequest::default_instance_;
  delete PassphraseStateRequest_reflection_;
  delete PassphraseStateAck::default_instance_;
  delete PassphraseStateAck_reflection_;
  delete HDNodeType::default_instance_;
  delete HDNodeType_reflection_;
}

void protobuf_AddDesc_messages_2dcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025messages-common.proto\"\032\n\007Success\022\017\n\007me"
    "ssage\030\001 \001(\t\"\254\003\n\007Failure\022\"\n\004code\030\001 \001(\0162\024."
    "Failure.FailureType\022\017\n\007message\030\002 \001(\t\"\353\002\n"
    "\013FailureType\022\035\n\031Failure_UnexpectedMessag"
    "e\020\001\022\032\n\026Failure_ButtonExpected\020\002\022\025\n\021Failu"
    "re_DataError\020\003\022\033\n\027Failure_ActionCancelle"
    "d\020\004\022\027\n\023Failure_PinExpected\020\005\022\030\n\024Failure_"
    "PinCancelled\020\006\022\026\n\022Failure_PinInvalid\020\007\022\034"
    "\n\030Failure_InvalidSignature\020\010\022\030\n\024Failure_"
    "ProcessError\020\t\022\032\n\026Failure_NotEnoughFunds"
    "\020\n\022\032\n\026Failure_NotInitialized\020\013\022\027\n\023Failur"
    "e_PinMismatch\020\014\022\031\n\025Failure_FirmwareError"
    "\020c\"\227\004\n\rButtonRequest\022.\n\004code\030\001 \001(\0162 .But"
    "tonRequest.ButtonRequestType\022\014\n\004data\030\002 \001"
    "(\t\"\307\003\n\021ButtonRequestType\022\027\n\023ButtonReques"
    "t_Other\020\001\022\"\n\036ButtonRequest_FeeOverThresh"
    "old\020\002\022\037\n\033ButtonRequest_ConfirmOutput\020\003\022\035"
    "\n\031ButtonRequest_ResetDevice\020\004\022\035\n\031ButtonR"
    "equest_ConfirmWord\020\005\022\034\n\030ButtonRequest_Wi"
    "peDevice\020\006\022\035\n\031ButtonRequest_ProtectCall\020"
    "\007\022\030\n\024ButtonRequest_SignTx\020\010\022\037\n\033ButtonReq"
    "uest_FirmwareCheck\020\t\022\031\n\025ButtonRequest_Ad"
    "dress\020\n\022\033\n\027ButtonRequest_PublicKey\020\013\022#\n\037"
    "ButtonRequest_MnemonicWordCount\020\014\022\037\n\033But"
    "tonRequest_MnemonicInput\020\r\022 \n\034ButtonRequ"
    "est_PassphraseType\020\016\"\013\n\tButtonAck\"\311\001\n\020Pi"
    "nMatrixRequest\0224\n\004type\030\001 \001(\0162&.PinMatrix"
    "Request.PinMatrixRequestType\"\177\n\024PinMatri"
    "xRequestType\022 \n\034PinMatrixRequestType_Cur"
    "rent\020\001\022!\n\035PinMatrixRequestType_NewFirst\020"
    "\002\022\"\n\036PinMatrixRequestType_NewSecond\020\003\"\033\n"
    "\014PinMatrixAck\022\013\n\003pin\030\001 \002(\t\"&\n\021Passphrase"
    "Request\022\021\n\ton_device\030\001 \001(\010\"2\n\rPassphrase"
    "Ack\022\022\n\npassphrase\030\001 \001(\t\022\r\n\005state\030\002 \001(\014\"\'"
    "\n\026PassphraseStateRequest\022\r\n\005state\030\001 \001(\014\""
    "\024\n\022PassphraseStateAck\"\200\001\n\nHDNodeType\022\r\n\005"
    "depth\030\001 \002(\r\022\023\n\013fingerprint\030\002 \002(\r\022\021\n\tchil"
    "d_num\030\003 \002(\r\022\022\n\nchain_code\030\004 \002(\014\022\023\n\013priva"
    "te_key\030\005 \001(\014\022\022\n\npublic_key\030\006 \001(\014", 1552);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages-common.proto", &protobuf_RegisterTypes);
  Success::default_instance_ = new Success();
  Failure::default_instance_ = new Failure();
  ButtonRequest::default_instance_ = new ButtonRequest();
  ButtonAck::default_instance_ = new ButtonAck();
  PinMatrixRequest::default_instance_ = new PinMatrixRequest();
  PinMatrixAck::default_instance_ = new PinMatrixAck();
  PassphraseRequest::default_instance_ = new PassphraseRequest();
  PassphraseAck::default_instance_ = new PassphraseAck();
  PassphraseStateRequest::default_instance_ = new PassphraseStateRequest();
  PassphraseStateAck::default_instance_ = new PassphraseStateAck();
  HDNodeType::default_instance_ = new HDNodeType();
  Success::default_instance_->InitAsDefaultInstance();
  Failure::default_instance_->InitAsDefaultInstance();
  ButtonRequest::default_instance_->InitAsDefaultInstance();
  ButtonAck::default_instance_->InitAsDefaultInstance();
  PinMatrixRequest::default_instance_->InitAsDefaultInstance();
  PinMatrixAck::default_instance_->InitAsDefaultInstance();
  PassphraseRequest::default_instance_->InitAsDefaultInstance();
  PassphraseAck::default_instance_->InitAsDefaultInstance();
  PassphraseStateRequest::default_instance_->InitAsDefaultInstance();
  PassphraseStateAck::default_instance_->InitAsDefaultInstance();
  HDNodeType::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_2dcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_2dcommon_2eproto {
  StaticDescriptorInitializer_messages_2dcommon_2eproto() {
    protobuf_AddDesc_messages_2dcommon_2eproto();
  }
} static_descriptor_initializer_messages_2dcommon_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Success::kMessageFieldNumber;
#endif  // !_MSC_VER

Success::Success()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Success)
}

void Success::InitAsDefaultInstance() {
}

Success::Success(const Success& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Success)
}

void Success::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Success::~Success() {
  // @@protoc_insertion_point(destructor:Success)
  SharedDtor();
}

void Success::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void Success::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Success::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Success_descriptor_;
}

const Success& Success::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dcommon_2eproto();
  return *default_instance_;
}

Success* Success::default_instance_ = NULL;

Success* Success::New() const {
  return new Success;
}

void Success::Clear() {
  if (has_message()) {
    if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      message_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Success::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Success)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Success)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Success)
  return false;
#undef DO_
}

void Success::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Success)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Success)
}

::google::protobuf::uint8* Success::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Success)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Success)
  return target;
}

int Success::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Success::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Success* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Success*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Success::MergeFrom(const Success& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Success::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Success::CopyFrom(const Success& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Success::IsInitialized() const {

  return true;
}

void Success::Swap(Success* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Success::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Success_descriptor_;
  metadata.reflection = Success_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Failure_FailureType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Failure_FailureType_descriptor_;
}
bool Failure_FailureType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Failure_FailureType Failure::Failure_UnexpectedMessage;
const Failure_FailureType Failure::Failure_ButtonExpected;
const Failure_FailureType Failure::Failure_DataError;
const Failure_FailureType Failure::Failure_ActionCancelled;
const Failure_FailureType Failure::Failure_PinExpected;
const Failure_FailureType Failure::Failure_PinCancelled;
const Failure_FailureType Failure::Failure_PinInvalid;
const Failure_FailureType Failure::Failure_InvalidSignature;
const Failure_FailureType Failure::Failure_ProcessError;
const Failure_FailureType Failure::Failure_NotEnoughFunds;
const Failure_FailureType Failure::Failure_NotInitialized;
const Failure_FailureType Failure::Failure_PinMismatch;
const Failure_FailureType Failure::Failure_FirmwareError;
const Failure_FailureType Failure::FailureType_MIN;
const Failure_FailureType Failure::FailureType_MAX;
const int Failure::FailureType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Failure::kCodeFieldNumber;
const int Failure::kMessageFieldNumber;
#endif  // !_MSC_VER

Failure::Failure()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Failure)
}

void Failure::InitAsDefaultInstance() {
}

Failure::Failure(const Failure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Failure)
}

void Failure::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 1;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Failure::~Failure() {
  // @@protoc_insertion_point(destructor:Failure)
  SharedDtor();
}

void Failure::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void Failure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Failure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Failure_descriptor_;
}

const Failure& Failure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dcommon_2eproto();
  return *default_instance_;
}

Failure* Failure::default_instance_ = NULL;

Failure* Failure::New() const {
  return new Failure;
}

void Failure::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    code_ = 1;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Failure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Failure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Failure.FailureType code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Failure_FailureType_IsValid(value)) {
            set_code(static_cast< ::Failure_FailureType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Failure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Failure)
  return false;
#undef DO_
}

void Failure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Failure)
  // optional .Failure.FailureType code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Failure)
}

::google::protobuf::uint8* Failure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Failure)
  // optional .Failure.FailureType code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Failure)
  return target;
}

int Failure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Failure.FailureType code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Failure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Failure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Failure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Failure::MergeFrom(const Failure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Failure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Failure::CopyFrom(const Failure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Failure::IsInitialized() const {

  return true;
}

void Failure::Swap(Failure* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Failure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Failure_descriptor_;
  metadata.reflection = Failure_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ButtonRequest_ButtonRequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ButtonRequest_ButtonRequestType_descriptor_;
}
bool ButtonRequest_ButtonRequestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_Other;
const ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_FeeOverThreshold;
const ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_ConfirmOutput;
const ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_ResetDevice;
const ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_ConfirmWord;
const ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_WipeDevice;
const ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_ProtectCall;
const ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_SignTx;
const ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_FirmwareCheck;
const ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_Address;
const ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_PublicKey;
const ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_MnemonicWordCount;
const ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_MnemonicInput;
const ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_PassphraseType;
const ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequestType_MIN;
const ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequestType_MAX;
const int ButtonRequest::ButtonRequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ButtonRequest::kCodeFieldNumber;
const int ButtonRequest::kDataFieldNumber;
#endif  // !_MSC_VER

ButtonRequest::ButtonRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ButtonRequest)
}

void ButtonRequest::InitAsDefaultInstance() {
}

ButtonRequest::ButtonRequest(const ButtonRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ButtonRequest)
}

void ButtonRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 1;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ButtonRequest::~ButtonRequest() {
  // @@protoc_insertion_point(destructor:ButtonRequest)
  SharedDtor();
}

void ButtonRequest::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ButtonRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ButtonRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ButtonRequest_descriptor_;
}

const ButtonRequest& ButtonRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dcommon_2eproto();
  return *default_instance_;
}

ButtonRequest* ButtonRequest::default_instance_ = NULL;

ButtonRequest* ButtonRequest::New() const {
  return new ButtonRequest;
}

void ButtonRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    code_ = 1;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ButtonRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ButtonRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ButtonRequest.ButtonRequestType code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ButtonRequest_ButtonRequestType_IsValid(value)) {
            set_code(static_cast< ::ButtonRequest_ButtonRequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional string data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ButtonRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ButtonRequest)
  return false;
#undef DO_
}

void ButtonRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ButtonRequest)
  // optional .ButtonRequest.ButtonRequestType code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // optional string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ButtonRequest)
}

::google::protobuf::uint8* ButtonRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ButtonRequest)
  // optional .ButtonRequest.ButtonRequestType code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // optional string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ButtonRequest)
  return target;
}

int ButtonRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ButtonRequest.ButtonRequestType code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

    // optional string data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ButtonRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ButtonRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ButtonRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ButtonRequest::MergeFrom(const ButtonRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ButtonRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ButtonRequest::CopyFrom(const ButtonRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtonRequest::IsInitialized() const {

  return true;
}

void ButtonRequest::Swap(ButtonRequest* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ButtonRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ButtonRequest_descriptor_;
  metadata.reflection = ButtonRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ButtonAck::ButtonAck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ButtonAck)
}

void ButtonAck::InitAsDefaultInstance() {
}

ButtonAck::ButtonAck(const ButtonAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ButtonAck)
}

void ButtonAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ButtonAck::~ButtonAck() {
  // @@protoc_insertion_point(destructor:ButtonAck)
  SharedDtor();
}

void ButtonAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ButtonAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ButtonAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ButtonAck_descriptor_;
}

const ButtonAck& ButtonAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dcommon_2eproto();
  return *default_instance_;
}

ButtonAck* ButtonAck::default_instance_ = NULL;

ButtonAck* ButtonAck::New() const {
  return new ButtonAck;
}

void ButtonAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ButtonAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ButtonAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ButtonAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ButtonAck)
  return false;
#undef DO_
}

void ButtonAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ButtonAck)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ButtonAck)
}

::google::protobuf::uint8* ButtonAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ButtonAck)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ButtonAck)
  return target;
}

int ButtonAck::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ButtonAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ButtonAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ButtonAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ButtonAck::MergeFrom(const ButtonAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ButtonAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ButtonAck::CopyFrom(const ButtonAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtonAck::IsInitialized() const {

  return true;
}

void ButtonAck::Swap(ButtonAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ButtonAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ButtonAck_descriptor_;
  metadata.reflection = ButtonAck_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PinMatrixRequest_PinMatrixRequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PinMatrixRequest_PinMatrixRequestType_descriptor_;
}
bool PinMatrixRequest_PinMatrixRequestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PinMatrixRequest_PinMatrixRequestType PinMatrixRequest::PinMatrixRequestType_Current;
const PinMatrixRequest_PinMatrixRequestType PinMatrixRequest::PinMatrixRequestType_NewFirst;
const PinMatrixRequest_PinMatrixRequestType PinMatrixRequest::PinMatrixRequestType_NewSecond;
const PinMatrixRequest_PinMatrixRequestType PinMatrixRequest::PinMatrixRequestType_MIN;
const PinMatrixRequest_PinMatrixRequestType PinMatrixRequest::PinMatrixRequestType_MAX;
const int PinMatrixRequest::PinMatrixRequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PinMatrixRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

PinMatrixRequest::PinMatrixRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PinMatrixRequest)
}

void PinMatrixRequest::InitAsDefaultInstance() {
}

PinMatrixRequest::PinMatrixRequest(const PinMatrixRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PinMatrixRequest)
}

void PinMatrixRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PinMatrixRequest::~PinMatrixRequest() {
  // @@protoc_insertion_point(destructor:PinMatrixRequest)
  SharedDtor();
}

void PinMatrixRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PinMatrixRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PinMatrixRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PinMatrixRequest_descriptor_;
}

const PinMatrixRequest& PinMatrixRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dcommon_2eproto();
  return *default_instance_;
}

PinMatrixRequest* PinMatrixRequest::default_instance_ = NULL;

PinMatrixRequest* PinMatrixRequest::New() const {
  return new PinMatrixRequest;
}

void PinMatrixRequest::Clear() {
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PinMatrixRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PinMatrixRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PinMatrixRequest.PinMatrixRequestType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PinMatrixRequest_PinMatrixRequestType_IsValid(value)) {
            set_type(static_cast< ::PinMatrixRequest_PinMatrixRequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PinMatrixRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PinMatrixRequest)
  return false;
#undef DO_
}

void PinMatrixRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PinMatrixRequest)
  // optional .PinMatrixRequest.PinMatrixRequestType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PinMatrixRequest)
}

::google::protobuf::uint8* PinMatrixRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PinMatrixRequest)
  // optional .PinMatrixRequest.PinMatrixRequestType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PinMatrixRequest)
  return target;
}

int PinMatrixRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PinMatrixRequest.PinMatrixRequestType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PinMatrixRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PinMatrixRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PinMatrixRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PinMatrixRequest::MergeFrom(const PinMatrixRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PinMatrixRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PinMatrixRequest::CopyFrom(const PinMatrixRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PinMatrixRequest::IsInitialized() const {

  return true;
}

void PinMatrixRequest::Swap(PinMatrixRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PinMatrixRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PinMatrixRequest_descriptor_;
  metadata.reflection = PinMatrixRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PinMatrixAck::kPinFieldNumber;
#endif  // !_MSC_VER

PinMatrixAck::PinMatrixAck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PinMatrixAck)
}

void PinMatrixAck::InitAsDefaultInstance() {
}

PinMatrixAck::PinMatrixAck(const PinMatrixAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PinMatrixAck)
}

void PinMatrixAck::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PinMatrixAck::~PinMatrixAck() {
  // @@protoc_insertion_point(destructor:PinMatrixAck)
  SharedDtor();
}

void PinMatrixAck::SharedDtor() {
  if (pin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pin_;
  }
  if (this != default_instance_) {
  }
}

void PinMatrixAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PinMatrixAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PinMatrixAck_descriptor_;
}

const PinMatrixAck& PinMatrixAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dcommon_2eproto();
  return *default_instance_;
}

PinMatrixAck* PinMatrixAck::default_instance_ = NULL;

PinMatrixAck* PinMatrixAck::New() const {
  return new PinMatrixAck;
}

void PinMatrixAck::Clear() {
  if (has_pin()) {
    if (pin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      pin_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PinMatrixAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PinMatrixAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string pin = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pin");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PinMatrixAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PinMatrixAck)
  return false;
#undef DO_
}

void PinMatrixAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PinMatrixAck)
  // required string pin = 1;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PinMatrixAck)
}

::google::protobuf::uint8* PinMatrixAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PinMatrixAck)
  // required string pin = 1;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PinMatrixAck)
  return target;
}

int PinMatrixAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string pin = 1;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PinMatrixAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PinMatrixAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PinMatrixAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PinMatrixAck::MergeFrom(const PinMatrixAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pin()) {
      set_pin(from.pin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PinMatrixAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PinMatrixAck::CopyFrom(const PinMatrixAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PinMatrixAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PinMatrixAck::Swap(PinMatrixAck* other) {
  if (other != this) {
    std::swap(pin_, other->pin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PinMatrixAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PinMatrixAck_descriptor_;
  metadata.reflection = PinMatrixAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassphraseRequest::kOnDeviceFieldNumber;
#endif  // !_MSC_VER

PassphraseRequest::PassphraseRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PassphraseRequest)
}

void PassphraseRequest::InitAsDefaultInstance() {
}

PassphraseRequest::PassphraseRequest(const PassphraseRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PassphraseRequest)
}

void PassphraseRequest::SharedCtor() {
  _cached_size_ = 0;
  on_device_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassphraseRequest::~PassphraseRequest() {
  // @@protoc_insertion_point(destructor:PassphraseRequest)
  SharedDtor();
}

void PassphraseRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PassphraseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassphraseRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassphraseRequest_descriptor_;
}

const PassphraseRequest& PassphraseRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dcommon_2eproto();
  return *default_instance_;
}

PassphraseRequest* PassphraseRequest::default_instance_ = NULL;

PassphraseRequest* PassphraseRequest::New() const {
  return new PassphraseRequest;
}

void PassphraseRequest::Clear() {
  on_device_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassphraseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PassphraseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool on_device = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_device_)));
          set_has_on_device();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PassphraseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PassphraseRequest)
  return false;
#undef DO_
}

void PassphraseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PassphraseRequest)
  // optional bool on_device = 1;
  if (has_on_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->on_device(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PassphraseRequest)
}

::google::protobuf::uint8* PassphraseRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PassphraseRequest)
  // optional bool on_device = 1;
  if (has_on_device()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->on_device(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PassphraseRequest)
  return target;
}

int PassphraseRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool on_device = 1;
    if (has_on_device()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassphraseRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassphraseRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassphraseRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassphraseRequest::MergeFrom(const PassphraseRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_on_device()) {
      set_on_device(from.on_device());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassphraseRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassphraseRequest::CopyFrom(const PassphraseRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassphraseRequest::IsInitialized() const {

  return true;
}

void PassphraseRequest::Swap(PassphraseRequest* other) {
  if (other != this) {
    std::swap(on_device_, other->on_device_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassphraseRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassphraseRequest_descriptor_;
  metadata.reflection = PassphraseRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassphraseAck::kPassphraseFieldNumber;
const int PassphraseAck::kStateFieldNumber;
#endif  // !_MSC_VER

PassphraseAck::PassphraseAck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PassphraseAck)
}

void PassphraseAck::InitAsDefaultInstance() {
}

PassphraseAck::PassphraseAck(const PassphraseAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PassphraseAck)
}

void PassphraseAck::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  passphrase_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassphraseAck::~PassphraseAck() {
  // @@protoc_insertion_point(destructor:PassphraseAck)
  SharedDtor();
}

void PassphraseAck::SharedDtor() {
  if (passphrase_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passphrase_;
  }
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete state_;
  }
  if (this != default_instance_) {
  }
}

void PassphraseAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassphraseAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassphraseAck_descriptor_;
}

const PassphraseAck& PassphraseAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dcommon_2eproto();
  return *default_instance_;
}

PassphraseAck* PassphraseAck::default_instance_ = NULL;

PassphraseAck* PassphraseAck::New() const {
  return new PassphraseAck;
}

void PassphraseAck::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_passphrase()) {
      if (passphrase_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        passphrase_->clear();
      }
    }
    if (has_state()) {
      if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        state_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassphraseAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PassphraseAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string passphrase = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passphrase()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->passphrase().data(), this->passphrase().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "passphrase");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }

      // optional bytes state = 2;
      case 2: {
        if (tag == 18) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PassphraseAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PassphraseAck)
  return false;
#undef DO_
}

void PassphraseAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PassphraseAck)
  // optional string passphrase = 1;
  if (has_passphrase()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passphrase().data(), this->passphrase().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passphrase");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->passphrase(), output);
  }

  // optional bytes state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PassphraseAck)
}

::google::protobuf::uint8* PassphraseAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PassphraseAck)
  // optional string passphrase = 1;
  if (has_passphrase()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passphrase().data(), this->passphrase().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passphrase");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->passphrase(), target);
  }

  // optional bytes state = 2;
  if (has_state()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PassphraseAck)
  return target;
}

int PassphraseAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string passphrase = 1;
    if (has_passphrase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passphrase());
    }

    // optional bytes state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassphraseAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassphraseAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassphraseAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassphraseAck::MergeFrom(const PassphraseAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_passphrase()) {
      set_passphrase(from.passphrase());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassphraseAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassphraseAck::CopyFrom(const PassphraseAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassphraseAck::IsInitialized() const {

  return true;
}

void PassphraseAck::Swap(PassphraseAck* other) {
  if (other != this) {
    std::swap(passphrase_, other->passphrase_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassphraseAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassphraseAck_descriptor_;
  metadata.reflection = PassphraseAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassphraseStateRequest::kStateFieldNumber;
#endif  // !_MSC_VER

PassphraseStateRequest::PassphraseStateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PassphraseStateRequest)
}

void PassphraseStateRequest::InitAsDefaultInstance() {
}

PassphraseStateRequest::PassphraseStateRequest(const PassphraseStateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PassphraseStateRequest)
}

void PassphraseStateRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassphraseStateRequest::~PassphraseStateRequest() {
  // @@protoc_insertion_point(destructor:PassphraseStateRequest)
  SharedDtor();
}

void PassphraseStateRequest::SharedDtor() {
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete state_;
  }
  if (this != default_instance_) {
  }
}

void PassphraseStateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassphraseStateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassphraseStateRequest_descriptor_;
}

const PassphraseStateRequest& PassphraseStateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dcommon_2eproto();
  return *default_instance_;
}

PassphraseStateRequest* PassphraseStateRequest::default_instance_ = NULL;

PassphraseStateRequest* PassphraseStateRequest::New() const {
  return new PassphraseStateRequest;
}

void PassphraseStateRequest::Clear() {
  if (has_state()) {
    if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      state_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassphraseStateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PassphraseStateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes state = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PassphraseStateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PassphraseStateRequest)
  return false;
#undef DO_
}

void PassphraseStateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PassphraseStateRequest)
  // optional bytes state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PassphraseStateRequest)
}

::google::protobuf::uint8* PassphraseStateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PassphraseStateRequest)
  // optional bytes state = 1;
  if (has_state()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PassphraseStateRequest)
  return target;
}

int PassphraseStateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassphraseStateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassphraseStateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassphraseStateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassphraseStateRequest::MergeFrom(const PassphraseStateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassphraseStateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassphraseStateRequest::CopyFrom(const PassphraseStateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassphraseStateRequest::IsInitialized() const {

  return true;
}

void PassphraseStateRequest::Swap(PassphraseStateRequest* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassphraseStateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassphraseStateRequest_descriptor_;
  metadata.reflection = PassphraseStateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PassphraseStateAck::PassphraseStateAck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PassphraseStateAck)
}

void PassphraseStateAck::InitAsDefaultInstance() {
}

PassphraseStateAck::PassphraseStateAck(const PassphraseStateAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PassphraseStateAck)
}

void PassphraseStateAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassphraseStateAck::~PassphraseStateAck() {
  // @@protoc_insertion_point(destructor:PassphraseStateAck)
  SharedDtor();
}

void PassphraseStateAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PassphraseStateAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassphraseStateAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassphraseStateAck_descriptor_;
}

const PassphraseStateAck& PassphraseStateAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dcommon_2eproto();
  return *default_instance_;
}

PassphraseStateAck* PassphraseStateAck::default_instance_ = NULL;

PassphraseStateAck* PassphraseStateAck::New() const {
  return new PassphraseStateAck;
}

void PassphraseStateAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassphraseStateAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PassphraseStateAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:PassphraseStateAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PassphraseStateAck)
  return false;
#undef DO_
}

void PassphraseStateAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PassphraseStateAck)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PassphraseStateAck)
}

::google::protobuf::uint8* PassphraseStateAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PassphraseStateAck)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PassphraseStateAck)
  return target;
}

int PassphraseStateAck::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassphraseStateAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassphraseStateAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassphraseStateAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassphraseStateAck::MergeFrom(const PassphraseStateAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassphraseStateAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassphraseStateAck::CopyFrom(const PassphraseStateAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassphraseStateAck::IsInitialized() const {

  return true;
}

void PassphraseStateAck::Swap(PassphraseStateAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassphraseStateAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassphraseStateAck_descriptor_;
  metadata.reflection = PassphraseStateAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HDNodeType::kDepthFieldNumber;
const int HDNodeType::kFingerprintFieldNumber;
const int HDNodeType::kChildNumFieldNumber;
const int HDNodeType::kChainCodeFieldNumber;
const int HDNodeType::kPrivateKeyFieldNumber;
const int HDNodeType::kPublicKeyFieldNumber;
#endif  // !_MSC_VER

HDNodeType::HDNodeType()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HDNodeType)
}

void HDNodeType::InitAsDefaultInstance() {
}

HDNodeType::HDNodeType(const HDNodeType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HDNodeType)
}

void HDNodeType::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  depth_ = 0u;
  fingerprint_ = 0u;
  child_num_ = 0u;
  chain_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HDNodeType::~HDNodeType() {
  // @@protoc_insertion_point(destructor:HDNodeType)
  SharedDtor();
}

void HDNodeType::SharedDtor() {
  if (chain_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete chain_code_;
  }
  if (private_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete private_key_;
  }
  if (public_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete public_key_;
  }
  if (this != default_instance_) {
  }
}

void HDNodeType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HDNodeType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HDNodeType_descriptor_;
}

const HDNodeType& HDNodeType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dcommon_2eproto();
  return *default_instance_;
}

HDNodeType* HDNodeType::default_instance_ = NULL;

HDNodeType* HDNodeType::New() const {
  return new HDNodeType;
}

void HDNodeType::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HDNodeType*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(depth_, fingerprint_);
    child_num_ = 0u;
    if (has_chain_code()) {
      if (chain_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        chain_code_->clear();
      }
    }
    if (has_private_key()) {
      if (private_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        private_key_->clear();
      }
    }
    if (has_public_key()) {
      if (public_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        public_key_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HDNodeType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HDNodeType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 depth = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fingerprint;
        break;
      }

      // required uint32 fingerprint = 2;
      case 2: {
        if (tag == 16) {
         parse_fingerprint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fingerprint_)));
          set_has_fingerprint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_child_num;
        break;
      }

      // required uint32 child_num = 3;
      case 3: {
        if (tag == 24) {
         parse_child_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &child_num_)));
          set_has_child_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_chain_code;
        break;
      }

      // required bytes chain_code = 4;
      case 4: {
        if (tag == 34) {
         parse_chain_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chain_code()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_private_key;
        break;
      }

      // optional bytes private_key = 5;
      case 5: {
        if (tag == 42) {
         parse_private_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_private_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_public_key;
        break;
      }

      // optional bytes public_key = 6;
      case 6: {
        if (tag == 50) {
         parse_public_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HDNodeType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HDNodeType)
  return false;
#undef DO_
}

void HDNodeType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HDNodeType)
  // required uint32 depth = 1;
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->depth(), output);
  }

  // required uint32 fingerprint = 2;
  if (has_fingerprint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fingerprint(), output);
  }

  // required uint32 child_num = 3;
  if (has_child_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->child_num(), output);
  }

  // required bytes chain_code = 4;
  if (has_chain_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->chain_code(), output);
  }

  // optional bytes private_key = 5;
  if (has_private_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->private_key(), output);
  }

  // optional bytes public_key = 6;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->public_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HDNodeType)
}

::google::protobuf::uint8* HDNodeType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HDNodeType)
  // required uint32 depth = 1;
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->depth(), target);
  }

  // required uint32 fingerprint = 2;
  if (has_fingerprint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fingerprint(), target);
  }

  // required uint32 child_num = 3;
  if (has_child_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->child_num(), target);
  }

  // required bytes chain_code = 4;
  if (has_chain_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->chain_code(), target);
  }

  // optional bytes private_key = 5;
  if (has_private_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->private_key(), target);
  }

  // optional bytes public_key = 6;
  if (has_public_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->public_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HDNodeType)
  return target;
}

int HDNodeType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 depth = 1;
    if (has_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depth());
    }

    // required uint32 fingerprint = 2;
    if (has_fingerprint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fingerprint());
    }

    // required uint32 child_num = 3;
    if (has_child_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->child_num());
    }

    // required bytes chain_code = 4;
    if (has_chain_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chain_code());
    }

    // optional bytes private_key = 5;
    if (has_private_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->private_key());
    }

    // optional bytes public_key = 6;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HDNodeType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HDNodeType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HDNodeType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HDNodeType::MergeFrom(const HDNodeType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_depth()) {
      set_depth(from.depth());
    }
    if (from.has_fingerprint()) {
      set_fingerprint(from.fingerprint());
    }
    if (from.has_child_num()) {
      set_child_num(from.child_num());
    }
    if (from.has_chain_code()) {
      set_chain_code(from.chain_code());
    }
    if (from.has_private_key()) {
      set_private_key(from.private_key());
    }
    if (from.has_public_key()) {
      set_public_key(from.public_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HDNodeType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HDNodeType::CopyFrom(const HDNodeType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HDNodeType::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void HDNodeType::Swap(HDNodeType* other) {
  if (other != this) {
    std::swap(depth_, other->depth_);
    std::swap(fingerprint_, other->fingerprint_);
    std::swap(child_num_, other->child_num_);
    std::swap(chain_code_, other->chain_code_);
    std::swap(private_key_, other->private_key_);
    std::swap(public_key_, other->public_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HDNodeType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HDNodeType_descriptor_;
  metadata.reflection = HDNodeType_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
