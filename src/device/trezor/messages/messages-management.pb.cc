// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages-management.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages-management.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Initialize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Initialize_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFeatures_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFeatures_reflection_ = NULL;
const ::google::protobuf::Descriptor* Features_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Features_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClearSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClearSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplySettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplySettings_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ApplySettings_PassphraseSourceType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ApplyFlags_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyFlags_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangePin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangePin_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ping_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cancel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cancel_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetEntropy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetEntropy_reflection_ = NULL;
const ::google::protobuf::Descriptor* Entropy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Entropy_reflection_ = NULL;
const ::google::protobuf::Descriptor* WipeDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WipeDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoadDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResetDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResetDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* BackupDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BackupDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntropyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntropyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntropyAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntropyAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecoveryDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecoveryDevice_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RecoveryDevice_RecoveryDeviceType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* WordRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WordRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* WordRequest_WordRequestType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* WordAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WordAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetU2FCounter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetU2FCounter_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_2dmanagement_2eproto() {
  protobuf_AddDesc_messages_2dmanagement_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages-management.proto");
  GOOGLE_CHECK(file != NULL);
  Initialize_descriptor_ = file->message_type(0);
  static const int Initialize_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Initialize, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Initialize, skip_passphrase_),
  };
  Initialize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Initialize_descriptor_,
      Initialize::default_instance_,
      Initialize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Initialize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Initialize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Initialize));
  GetFeatures_descriptor_ = file->message_type(1);
  static const int GetFeatures_offsets_[1] = {
  };
  GetFeatures_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFeatures_descriptor_,
      GetFeatures::default_instance_,
      GetFeatures_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFeatures, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFeatures, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFeatures));
  Features_descriptor_ = file->message_type(2);
  static const int Features_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, vendor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, major_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, minor_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, patch_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, bootloader_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, pin_protection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, passphrase_protection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, initialized_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, bootloader_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, imported_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, pin_cached_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, passphrase_cached_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, firmware_present_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, needs_backup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, fw_major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, fw_minor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, fw_patch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, fw_vendor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, fw_vendor_keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, unfinished_backup_),
  };
  Features_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Features_descriptor_,
      Features::default_instance_,
      Features_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Features));
  ClearSession_descriptor_ = file->message_type(3);
  static const int ClearSession_offsets_[1] = {
  };
  ClearSession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClearSession_descriptor_,
      ClearSession::default_instance_,
      ClearSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearSession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearSession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClearSession));
  ApplySettings_descriptor_ = file->message_type(4);
  static const int ApplySettings_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplySettings, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplySettings, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplySettings, use_passphrase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplySettings, homescreen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplySettings, passphrase_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplySettings, auto_lock_delay_ms_),
  };
  ApplySettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplySettings_descriptor_,
      ApplySettings::default_instance_,
      ApplySettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplySettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplySettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplySettings));
  ApplySettings_PassphraseSourceType_descriptor_ = ApplySettings_descriptor_->enum_type(0);
  ApplyFlags_descriptor_ = file->message_type(5);
  static const int ApplyFlags_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyFlags, flags_),
  };
  ApplyFlags_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyFlags_descriptor_,
      ApplyFlags::default_instance_,
      ApplyFlags_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyFlags, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyFlags, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyFlags));
  ChangePin_descriptor_ = file->message_type(6);
  static const int ChangePin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePin, remove_),
  };
  ChangePin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangePin_descriptor_,
      ChangePin::default_instance_,
      ChangePin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangePin));
  Ping_descriptor_ = file->message_type(7);
  static const int Ping_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, button_protection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, pin_protection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, passphrase_protection_),
  };
  Ping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ping_descriptor_,
      Ping::default_instance_,
      Ping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ping));
  Cancel_descriptor_ = file->message_type(8);
  static const int Cancel_offsets_[1] = {
  };
  Cancel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cancel_descriptor_,
      Cancel::default_instance_,
      Cancel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cancel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cancel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cancel));
  GetEntropy_descriptor_ = file->message_type(9);
  static const int GetEntropy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEntropy, size_),
  };
  GetEntropy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetEntropy_descriptor_,
      GetEntropy::default_instance_,
      GetEntropy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEntropy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEntropy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetEntropy));
  Entropy_descriptor_ = file->message_type(10);
  static const int Entropy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entropy, entropy_),
  };
  Entropy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Entropy_descriptor_,
      Entropy::default_instance_,
      Entropy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entropy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entropy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Entropy));
  WipeDevice_descriptor_ = file->message_type(11);
  static const int WipeDevice_offsets_[1] = {
  };
  WipeDevice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WipeDevice_descriptor_,
      WipeDevice::default_instance_,
      WipeDevice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WipeDevice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WipeDevice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WipeDevice));
  LoadDevice_descriptor_ = file->message_type(12);
  static const int LoadDevice_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDevice, mnemonic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDevice, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDevice, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDevice, passphrase_protection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDevice, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDevice, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDevice, skip_checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDevice, u2f_counter_),
  };
  LoadDevice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoadDevice_descriptor_,
      LoadDevice::default_instance_,
      LoadDevice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDevice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDevice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoadDevice));
  ResetDevice_descriptor_ = file->message_type(13);
  static const int ResetDevice_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetDevice, display_random_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetDevice, strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetDevice, passphrase_protection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetDevice, pin_protection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetDevice, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetDevice, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetDevice, u2f_counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetDevice, skip_backup_),
  };
  ResetDevice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResetDevice_descriptor_,
      ResetDevice::default_instance_,
      ResetDevice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetDevice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetDevice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResetDevice));
  BackupDevice_descriptor_ = file->message_type(14);
  static const int BackupDevice_offsets_[1] = {
  };
  BackupDevice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BackupDevice_descriptor_,
      BackupDevice::default_instance_,
      BackupDevice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupDevice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupDevice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BackupDevice));
  EntropyRequest_descriptor_ = file->message_type(15);
  static const int EntropyRequest_offsets_[1] = {
  };
  EntropyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntropyRequest_descriptor_,
      EntropyRequest::default_instance_,
      EntropyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntropyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntropyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntropyRequest));
  EntropyAck_descriptor_ = file->message_type(16);
  static const int EntropyAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntropyAck, entropy_),
  };
  EntropyAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntropyAck_descriptor_,
      EntropyAck::default_instance_,
      EntropyAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntropyAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntropyAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntropyAck));
  RecoveryDevice_descriptor_ = file->message_type(17);
  static const int RecoveryDevice_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDevice, word_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDevice, passphrase_protection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDevice, pin_protection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDevice, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDevice, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDevice, enforce_wordlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDevice, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDevice, u2f_counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDevice, dry_run_),
  };
  RecoveryDevice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecoveryDevice_descriptor_,
      RecoveryDevice::default_instance_,
      RecoveryDevice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDevice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryDevice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecoveryDevice));
  RecoveryDevice_RecoveryDeviceType_descriptor_ = RecoveryDevice_descriptor_->enum_type(0);
  WordRequest_descriptor_ = file->message_type(18);
  static const int WordRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WordRequest, type_),
  };
  WordRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WordRequest_descriptor_,
      WordRequest::default_instance_,
      WordRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WordRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WordRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WordRequest));
  WordRequest_WordRequestType_descriptor_ = WordRequest_descriptor_->enum_type(0);
  WordAck_descriptor_ = file->message_type(19);
  static const int WordAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WordAck, word_),
  };
  WordAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WordAck_descriptor_,
      WordAck::default_instance_,
      WordAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WordAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WordAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WordAck));
  SetU2FCounter_descriptor_ = file->message_type(20);
  static const int SetU2FCounter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetU2FCounter, u2f_counter_),
  };
  SetU2FCounter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetU2FCounter_descriptor_,
      SetU2FCounter::default_instance_,
      SetU2FCounter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetU2FCounter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetU2FCounter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetU2FCounter));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_2dmanagement_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Initialize_descriptor_, &Initialize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFeatures_descriptor_, &GetFeatures::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Features_descriptor_, &Features::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClearSession_descriptor_, &ClearSession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplySettings_descriptor_, &ApplySettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyFlags_descriptor_, &ApplyFlags::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangePin_descriptor_, &ChangePin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ping_descriptor_, &Ping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cancel_descriptor_, &Cancel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetEntropy_descriptor_, &GetEntropy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Entropy_descriptor_, &Entropy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WipeDevice_descriptor_, &WipeDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoadDevice_descriptor_, &LoadDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResetDevice_descriptor_, &ResetDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BackupDevice_descriptor_, &BackupDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntropyRequest_descriptor_, &EntropyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntropyAck_descriptor_, &EntropyAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecoveryDevice_descriptor_, &RecoveryDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WordRequest_descriptor_, &WordRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WordAck_descriptor_, &WordAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetU2FCounter_descriptor_, &SetU2FCounter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_2dmanagement_2eproto() {
  delete Initialize::default_instance_;
  delete Initialize_reflection_;
  delete GetFeatures::default_instance_;
  delete GetFeatures_reflection_;
  delete Features::default_instance_;
  delete Features_reflection_;
  delete ClearSession::default_instance_;
  delete ClearSession_reflection_;
  delete ApplySettings::default_instance_;
  delete ApplySettings_reflection_;
  delete ApplyFlags::default_instance_;
  delete ApplyFlags_reflection_;
  delete ChangePin::default_instance_;
  delete ChangePin_reflection_;
  delete Ping::default_instance_;
  delete Ping_reflection_;
  delete Cancel::default_instance_;
  delete Cancel_reflection_;
  delete GetEntropy::default_instance_;
  delete GetEntropy_reflection_;
  delete Entropy::default_instance_;
  delete Entropy_reflection_;
  delete WipeDevice::default_instance_;
  delete WipeDevice_reflection_;
  delete LoadDevice::default_instance_;
  delete LoadDevice_reflection_;
  delete LoadDevice::_default_language_;
  delete ResetDevice::default_instance_;
  delete ResetDevice_reflection_;
  delete ResetDevice::_default_language_;
  delete BackupDevice::default_instance_;
  delete BackupDevice_reflection_;
  delete EntropyRequest::default_instance_;
  delete EntropyRequest_reflection_;
  delete EntropyAck::default_instance_;
  delete EntropyAck_reflection_;
  delete RecoveryDevice::default_instance_;
  delete RecoveryDevice_reflection_;
  delete RecoveryDevice::_default_language_;
  delete WordRequest::default_instance_;
  delete WordRequest_reflection_;
  delete WordAck::default_instance_;
  delete WordAck_reflection_;
  delete SetU2FCounter::default_instance_;
  delete SetU2FCounter_reflection_;
}

void protobuf_AddDesc_messages_2dmanagement_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_messages_2dcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031messages-management.proto\032\025messages-co"
    "mmon.proto\"4\n\nInitialize\022\r\n\005state\030\001 \001(\014\022"
    "\027\n\017skip_passphrase\030\002 \001(\010\"\r\n\013GetFeatures\""
    "\256\004\n\010Features\022\016\n\006vendor\030\001 \001(\t\022\025\n\rmajor_ve"
    "rsion\030\002 \001(\r\022\025\n\rminor_version\030\003 \001(\r\022\025\n\rpa"
    "tch_version\030\004 \001(\r\022\027\n\017bootloader_mode\030\005 \001"
    "(\010\022\021\n\tdevice_id\030\006 \001(\t\022\026\n\016pin_protection\030"
    "\007 \001(\010\022\035\n\025passphrase_protection\030\010 \001(\010\022\020\n\010"
    "language\030\t \001(\t\022\r\n\005label\030\n \001(\t\022\023\n\013initial"
    "ized\030\014 \001(\010\022\020\n\010revision\030\r \001(\014\022\027\n\017bootload"
    "er_hash\030\016 \001(\014\022\020\n\010imported\030\017 \001(\010\022\022\n\npin_c"
    "ached\030\020 \001(\010\022\031\n\021passphrase_cached\030\021 \001(\010\022\030"
    "\n\020firmware_present\030\022 \001(\010\022\024\n\014needs_backup"
    "\030\023 \001(\010\022\r\n\005flags\030\024 \001(\r\022\r\n\005model\030\025 \001(\t\022\020\n\010"
    "fw_major\030\026 \001(\r\022\020\n\010fw_minor\030\027 \001(\r\022\020\n\010fw_p"
    "atch\030\030 \001(\r\022\021\n\tfw_vendor\030\031 \001(\t\022\026\n\016fw_vend"
    "or_keys\030\032 \001(\014\022\031\n\021unfinished_backup\030\033 \001(\010"
    "\"\016\n\014ClearSession\"\357\001\n\rApplySettings\022\020\n\010la"
    "nguage\030\001 \001(\t\022\r\n\005label\030\002 \001(\t\022\026\n\016use_passp"
    "hrase\030\003 \001(\010\022\022\n\nhomescreen\030\004 \001(\014\022>\n\021passp"
    "hrase_source\030\005 \001(\0162#.ApplySettings.Passp"
    "hraseSourceType\022\032\n\022auto_lock_delay_ms\030\006 "
    "\001(\r\"5\n\024PassphraseSourceType\022\007\n\003ASK\020\000\022\n\n\006"
    "DEVICE\020\001\022\010\n\004HOST\020\002\"\033\n\nApplyFlags\022\r\n\005flag"
    "s\030\001 \001(\r\"\033\n\tChangePin\022\016\n\006remove\030\001 \001(\010\"i\n\004"
    "Ping\022\017\n\007message\030\001 \001(\t\022\031\n\021button_protecti"
    "on\030\002 \001(\010\022\026\n\016pin_protection\030\003 \001(\010\022\035\n\025pass"
    "phrase_protection\030\004 \001(\010\"\010\n\006Cancel\"\032\n\nGet"
    "Entropy\022\014\n\004size\030\001 \002(\r\"\032\n\007Entropy\022\017\n\007entr"
    "opy\030\001 \002(\014\"\014\n\nWipeDevice\"\273\001\n\nLoadDevice\022\020"
    "\n\010mnemonic\030\001 \001(\t\022\031\n\004node\030\002 \001(\0132\013.HDNodeT"
    "ype\022\013\n\003pin\030\003 \001(\t\022\035\n\025passphrase_protectio"
    "n\030\004 \001(\010\022\031\n\010language\030\005 \001(\t:\007english\022\r\n\005la"
    "bel\030\006 \001(\t\022\025\n\rskip_checksum\030\007 \001(\010\022\023\n\013u2f_"
    "counter\030\010 \001(\r\"\307\001\n\013ResetDevice\022\026\n\016display"
    "_random\030\001 \001(\010\022\025\n\010strength\030\002 \001(\r:\003256\022\035\n\025"
    "passphrase_protection\030\003 \001(\010\022\026\n\016pin_prote"
    "ction\030\004 \001(\010\022\031\n\010language\030\005 \001(\t:\007english\022\r"
    "\n\005label\030\006 \001(\t\022\023\n\013u2f_counter\030\007 \001(\r\022\023\n\013sk"
    "ip_backup\030\010 \001(\010\"\016\n\014BackupDevice\"\020\n\016Entro"
    "pyRequest\"\035\n\nEntropyAck\022\017\n\007entropy\030\001 \001(\014"
    "\"\323\002\n\016RecoveryDevice\022\022\n\nword_count\030\001 \001(\r\022"
    "\035\n\025passphrase_protection\030\002 \001(\010\022\026\n\016pin_pr"
    "otection\030\003 \001(\010\022\031\n\010language\030\004 \001(\t:\007englis"
    "h\022\r\n\005label\030\005 \001(\t\022\030\n\020enforce_wordlist\030\006 \001"
    "(\010\0220\n\004type\030\010 \001(\0162\".RecoveryDevice.Recove"
    "ryDeviceType\022\023\n\013u2f_counter\030\t \001(\r\022\017\n\007dry"
    "_run\030\n \001(\010\"Z\n\022RecoveryDeviceType\022%\n!Reco"
    "veryDeviceType_ScrambledWords\020\000\022\035\n\031Recov"
    "eryDeviceType_Matrix\020\001\"\241\001\n\013WordRequest\022*"
    "\n\004type\030\001 \001(\0162\034.WordRequest.WordRequestTy"
    "pe\"f\n\017WordRequestType\022\031\n\025WordRequestType"
    "_Plain\020\000\022\033\n\027WordRequestType_Matrix9\020\001\022\033\n"
    "\027WordRequestType_Matrix6\020\002\"\027\n\007WordAck\022\014\n"
    "\004word\030\001 \002(\t\"$\n\rSetU2FCounter\022\023\n\013u2f_coun"
    "ter\030\001 \001(\rB>\n#com.satoshilabs.trezor.lib."
    "protobufB\027TrezorMessageManagement", 2273);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages-management.proto", &protobuf_RegisterTypes);
  Initialize::default_instance_ = new Initialize();
  GetFeatures::default_instance_ = new GetFeatures();
  Features::default_instance_ = new Features();
  ClearSession::default_instance_ = new ClearSession();
  ApplySettings::default_instance_ = new ApplySettings();
  ApplyFlags::default_instance_ = new ApplyFlags();
  ChangePin::default_instance_ = new ChangePin();
  Ping::default_instance_ = new Ping();
  Cancel::default_instance_ = new Cancel();
  GetEntropy::default_instance_ = new GetEntropy();
  Entropy::default_instance_ = new Entropy();
  WipeDevice::default_instance_ = new WipeDevice();
  LoadDevice::_default_language_ =
      new ::std::string("english", 7);
  LoadDevice::default_instance_ = new LoadDevice();
  ResetDevice::_default_language_ =
      new ::std::string("english", 7);
  ResetDevice::default_instance_ = new ResetDevice();
  BackupDevice::default_instance_ = new BackupDevice();
  EntropyRequest::default_instance_ = new EntropyRequest();
  EntropyAck::default_instance_ = new EntropyAck();
  RecoveryDevice::_default_language_ =
      new ::std::string("english", 7);
  RecoveryDevice::default_instance_ = new RecoveryDevice();
  WordRequest::default_instance_ = new WordRequest();
  WordAck::default_instance_ = new WordAck();
  SetU2FCounter::default_instance_ = new SetU2FCounter();
  Initialize::default_instance_->InitAsDefaultInstance();
  GetFeatures::default_instance_->InitAsDefaultInstance();
  Features::default_instance_->InitAsDefaultInstance();
  ClearSession::default_instance_->InitAsDefaultInstance();
  ApplySettings::default_instance_->InitAsDefaultInstance();
  ApplyFlags::default_instance_->InitAsDefaultInstance();
  ChangePin::default_instance_->InitAsDefaultInstance();
  Ping::default_instance_->InitAsDefaultInstance();
  Cancel::default_instance_->InitAsDefaultInstance();
  GetEntropy::default_instance_->InitAsDefaultInstance();
  Entropy::default_instance_->InitAsDefaultInstance();
  WipeDevice::default_instance_->InitAsDefaultInstance();
  LoadDevice::default_instance_->InitAsDefaultInstance();
  ResetDevice::default_instance_->InitAsDefaultInstance();
  BackupDevice::default_instance_->InitAsDefaultInstance();
  EntropyRequest::default_instance_->InitAsDefaultInstance();
  EntropyAck::default_instance_->InitAsDefaultInstance();
  RecoveryDevice::default_instance_->InitAsDefaultInstance();
  WordRequest::default_instance_->InitAsDefaultInstance();
  WordAck::default_instance_->InitAsDefaultInstance();
  SetU2FCounter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_2dmanagement_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_2dmanagement_2eproto {
  StaticDescriptorInitializer_messages_2dmanagement_2eproto() {
    protobuf_AddDesc_messages_2dmanagement_2eproto();
  }
} static_descriptor_initializer_messages_2dmanagement_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Initialize::kStateFieldNumber;
const int Initialize::kSkipPassphraseFieldNumber;
#endif  // !_MSC_VER

Initialize::Initialize()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Initialize)
}

void Initialize::InitAsDefaultInstance() {
}

Initialize::Initialize(const Initialize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Initialize)
}

void Initialize::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skip_passphrase_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Initialize::~Initialize() {
  // @@protoc_insertion_point(destructor:Initialize)
  SharedDtor();
}

void Initialize::SharedDtor() {
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete state_;
  }
  if (this != default_instance_) {
  }
}

void Initialize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Initialize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Initialize_descriptor_;
}

const Initialize& Initialize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmanagement_2eproto();
  return *default_instance_;
}

Initialize* Initialize::default_instance_ = NULL;

Initialize* Initialize::New() const {
  return new Initialize;
}

void Initialize::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_state()) {
      if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        state_->clear();
      }
    }
    skip_passphrase_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Initialize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Initialize)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes state = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_skip_passphrase;
        break;
      }

      // optional bool skip_passphrase = 2;
      case 2: {
        if (tag == 16) {
         parse_skip_passphrase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_passphrase_)));
          set_has_skip_passphrase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Initialize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Initialize)
  return false;
#undef DO_
}

void Initialize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Initialize)
  // optional bytes state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->state(), output);
  }

  // optional bool skip_passphrase = 2;
  if (has_skip_passphrase()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->skip_passphrase(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Initialize)
}

::google::protobuf::uint8* Initialize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Initialize)
  // optional bytes state = 1;
  if (has_state()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->state(), target);
  }

  // optional bool skip_passphrase = 2;
  if (has_skip_passphrase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->skip_passphrase(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Initialize)
  return target;
}

int Initialize::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->state());
    }

    // optional bool skip_passphrase = 2;
    if (has_skip_passphrase()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Initialize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Initialize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Initialize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Initialize::MergeFrom(const Initialize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_skip_passphrase()) {
      set_skip_passphrase(from.skip_passphrase());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Initialize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Initialize::CopyFrom(const Initialize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Initialize::IsInitialized() const {

  return true;
}

void Initialize::Swap(Initialize* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(skip_passphrase_, other->skip_passphrase_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Initialize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Initialize_descriptor_;
  metadata.reflection = Initialize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetFeatures::GetFeatures()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetFeatures)
}

void GetFeatures::InitAsDefaultInstance() {
}

GetFeatures::GetFeatures(const GetFeatures& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetFeatures)
}

void GetFeatures::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFeatures::~GetFeatures() {
  // @@protoc_insertion_point(destructor:GetFeatures)
  SharedDtor();
}

void GetFeatures::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFeatures::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFeatures::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFeatures_descriptor_;
}

const GetFeatures& GetFeatures::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmanagement_2eproto();
  return *default_instance_;
}

GetFeatures* GetFeatures::default_instance_ = NULL;

GetFeatures* GetFeatures::New() const {
  return new GetFeatures;
}

void GetFeatures::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFeatures::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetFeatures)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GetFeatures)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetFeatures)
  return false;
#undef DO_
}

void GetFeatures::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetFeatures)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetFeatures)
}

::google::protobuf::uint8* GetFeatures::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetFeatures)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetFeatures)
  return target;
}

int GetFeatures::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFeatures::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFeatures* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFeatures*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFeatures::MergeFrom(const GetFeatures& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFeatures::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFeatures::CopyFrom(const GetFeatures& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFeatures::IsInitialized() const {

  return true;
}

void GetFeatures::Swap(GetFeatures* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFeatures::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFeatures_descriptor_;
  metadata.reflection = GetFeatures_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Features::kVendorFieldNumber;
const int Features::kMajorVersionFieldNumber;
const int Features::kMinorVersionFieldNumber;
const int Features::kPatchVersionFieldNumber;
const int Features::kBootloaderModeFieldNumber;
const int Features::kDeviceIdFieldNumber;
const int Features::kPinProtectionFieldNumber;
const int Features::kPassphraseProtectionFieldNumber;
const int Features::kLanguageFieldNumber;
const int Features::kLabelFieldNumber;
const int Features::kInitializedFieldNumber;
const int Features::kRevisionFieldNumber;
const int Features::kBootloaderHashFieldNumber;
const int Features::kImportedFieldNumber;
const int Features::kPinCachedFieldNumber;
const int Features::kPassphraseCachedFieldNumber;
const int Features::kFirmwarePresentFieldNumber;
const int Features::kNeedsBackupFieldNumber;
const int Features::kFlagsFieldNumber;
const int Features::kModelFieldNumber;
const int Features::kFwMajorFieldNumber;
const int Features::kFwMinorFieldNumber;
const int Features::kFwPatchFieldNumber;
const int Features::kFwVendorFieldNumber;
const int Features::kFwVendorKeysFieldNumber;
const int Features::kUnfinishedBackupFieldNumber;
#endif  // !_MSC_VER

Features::Features()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Features)
}

void Features::InitAsDefaultInstance() {
}

Features::Features(const Features& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Features)
}

void Features::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  vendor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  major_version_ = 0u;
  minor_version_ = 0u;
  patch_version_ = 0u;
  bootloader_mode_ = false;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pin_protection_ = false;
  passphrase_protection_ = false;
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initialized_ = false;
  revision_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bootloader_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imported_ = false;
  pin_cached_ = false;
  passphrase_cached_ = false;
  firmware_present_ = false;
  needs_backup_ = false;
  flags_ = 0u;
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fw_major_ = 0u;
  fw_minor_ = 0u;
  fw_patch_ = 0u;
  fw_vendor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fw_vendor_keys_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unfinished_backup_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Features::~Features() {
  // @@protoc_insertion_point(destructor:Features)
  SharedDtor();
}

void Features::SharedDtor() {
  if (vendor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vendor_;
  }
  if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_id_;
  }
  if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete language_;
  }
  if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_;
  }
  if (revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete revision_;
  }
  if (bootloader_hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bootloader_hash_;
  }
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (fw_vendor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fw_vendor_;
  }
  if (fw_vendor_keys_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fw_vendor_keys_;
  }
  if (this != default_instance_) {
  }
}

void Features::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Features::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Features_descriptor_;
}

const Features& Features::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmanagement_2eproto();
  return *default_instance_;
}

Features* Features::default_instance_ = NULL;

Features* Features::New() const {
  return new Features;
}

void Features::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Features*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(major_version_, minor_version_);
    ZR_(patch_version_, passphrase_protection_);
    if (has_vendor()) {
      if (vendor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vendor_->clear();
      }
    }
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        device_id_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(imported_, passphrase_cached_);
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        language_->clear();
      }
    }
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        label_->clear();
      }
    }
    initialized_ = false;
    if (has_revision()) {
      if (revision_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        revision_->clear();
      }
    }
    if (has_bootloader_hash()) {
      if (bootloader_hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bootloader_hash_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(firmware_present_, flags_);
    ZR_(fw_major_, needs_backup_);
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model_->clear();
      }
    }
    fw_patch_ = 0u;
    if (has_fw_vendor()) {
      if (fw_vendor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fw_vendor_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 50331648) {
    if (has_fw_vendor_keys()) {
      if (fw_vendor_keys_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fw_vendor_keys_->clear();
      }
    }
    unfinished_backup_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Features::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Features)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string vendor = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vendor().data(), this->vendor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vendor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_major_version;
        break;
      }

      // optional uint32 major_version = 2;
      case 2: {
        if (tag == 16) {
         parse_major_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &major_version_)));
          set_has_major_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_minor_version;
        break;
      }

      // optional uint32 minor_version = 3;
      case 3: {
        if (tag == 24) {
         parse_minor_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minor_version_)));
          set_has_minor_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_patch_version;
        break;
      }

      // optional uint32 patch_version = 4;
      case 4: {
        if (tag == 32) {
         parse_patch_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &patch_version_)));
          set_has_patch_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bootloader_mode;
        break;
      }

      // optional bool bootloader_mode = 5;
      case 5: {
        if (tag == 40) {
         parse_bootloader_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bootloader_mode_)));
          set_has_bootloader_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_device_id;
        break;
      }

      // optional string device_id = 6;
      case 6: {
        if (tag == 50) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pin_protection;
        break;
      }

      // optional bool pin_protection = 7;
      case 7: {
        if (tag == 56) {
         parse_pin_protection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pin_protection_)));
          set_has_pin_protection();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_passphrase_protection;
        break;
      }

      // optional bool passphrase_protection = 8;
      case 8: {
        if (tag == 64) {
         parse_passphrase_protection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &passphrase_protection_)));
          set_has_passphrase_protection();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_language;
        break;
      }

      // optional string language = 9;
      case 9: {
        if (tag == 74) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "language");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_label;
        break;
      }

      // optional string label = 10;
      case 10: {
        if (tag == 82) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_initialized;
        break;
      }

      // optional bool initialized = 12;
      case 12: {
        if (tag == 96) {
         parse_initialized:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &initialized_)));
          set_has_initialized();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_revision;
        break;
      }

      // optional bytes revision = 13;
      case 13: {
        if (tag == 106) {
         parse_revision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_revision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_bootloader_hash;
        break;
      }

      // optional bytes bootloader_hash = 14;
      case 14: {
        if (tag == 114) {
         parse_bootloader_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bootloader_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_imported;
        break;
      }

      // optional bool imported = 15;
      case 15: {
        if (tag == 120) {
         parse_imported:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &imported_)));
          set_has_imported();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_pin_cached;
        break;
      }

      // optional bool pin_cached = 16;
      case 16: {
        if (tag == 128) {
         parse_pin_cached:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pin_cached_)));
          set_has_pin_cached();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_passphrase_cached;
        break;
      }

      // optional bool passphrase_cached = 17;
      case 17: {
        if (tag == 136) {
         parse_passphrase_cached:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &passphrase_cached_)));
          set_has_passphrase_cached();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_firmware_present;
        break;
      }

      // optional bool firmware_present = 18;
      case 18: {
        if (tag == 144) {
         parse_firmware_present:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &firmware_present_)));
          set_has_firmware_present();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_needs_backup;
        break;
      }

      // optional bool needs_backup = 19;
      case 19: {
        if (tag == 152) {
         parse_needs_backup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_backup_)));
          set_has_needs_backup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 20;
      case 20: {
        if (tag == 160) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_model;
        break;
      }

      // optional string model = 21;
      case 21: {
        if (tag == 170) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_fw_major;
        break;
      }

      // optional uint32 fw_major = 22;
      case 22: {
        if (tag == 176) {
         parse_fw_major:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fw_major_)));
          set_has_fw_major();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_fw_minor;
        break;
      }

      // optional uint32 fw_minor = 23;
      case 23: {
        if (tag == 184) {
         parse_fw_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fw_minor_)));
          set_has_fw_minor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_fw_patch;
        break;
      }

      // optional uint32 fw_patch = 24;
      case 24: {
        if (tag == 192) {
         parse_fw_patch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fw_patch_)));
          set_has_fw_patch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_fw_vendor;
        break;
      }

      // optional string fw_vendor = 25;
      case 25: {
        if (tag == 202) {
         parse_fw_vendor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fw_vendor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fw_vendor().data(), this->fw_vendor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fw_vendor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_fw_vendor_keys;
        break;
      }

      // optional bytes fw_vendor_keys = 26;
      case 26: {
        if (tag == 210) {
         parse_fw_vendor_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fw_vendor_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_unfinished_backup;
        break;
      }

      // optional bool unfinished_backup = 27;
      case 27: {
        if (tag == 216) {
         parse_unfinished_backup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unfinished_backup_)));
          set_has_unfinished_backup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Features)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Features)
  return false;
#undef DO_
}

void Features::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Features)
  // optional string vendor = 1;
  if (has_vendor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vendor().data(), this->vendor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vendor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vendor(), output);
  }

  // optional uint32 major_version = 2;
  if (has_major_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->major_version(), output);
  }

  // optional uint32 minor_version = 3;
  if (has_minor_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->minor_version(), output);
  }

  // optional uint32 patch_version = 4;
  if (has_patch_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->patch_version(), output);
  }

  // optional bool bootloader_mode = 5;
  if (has_bootloader_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bootloader_mode(), output);
  }

  // optional string device_id = 6;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->device_id(), output);
  }

  // optional bool pin_protection = 7;
  if (has_pin_protection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->pin_protection(), output);
  }

  // optional bool passphrase_protection = 8;
  if (has_passphrase_protection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->passphrase_protection(), output);
  }

  // optional string language = 9;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->language(), output);
  }

  // optional string label = 10;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->label(), output);
  }

  // optional bool initialized = 12;
  if (has_initialized()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->initialized(), output);
  }

  // optional bytes revision = 13;
  if (has_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->revision(), output);
  }

  // optional bytes bootloader_hash = 14;
  if (has_bootloader_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->bootloader_hash(), output);
  }

  // optional bool imported = 15;
  if (has_imported()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->imported(), output);
  }

  // optional bool pin_cached = 16;
  if (has_pin_cached()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->pin_cached(), output);
  }

  // optional bool passphrase_cached = 17;
  if (has_passphrase_cached()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->passphrase_cached(), output);
  }

  // optional bool firmware_present = 18;
  if (has_firmware_present()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->firmware_present(), output);
  }

  // optional bool needs_backup = 19;
  if (has_needs_backup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->needs_backup(), output);
  }

  // optional uint32 flags = 20;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->flags(), output);
  }

  // optional string model = 21;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->model(), output);
  }

  // optional uint32 fw_major = 22;
  if (has_fw_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->fw_major(), output);
  }

  // optional uint32 fw_minor = 23;
  if (has_fw_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->fw_minor(), output);
  }

  // optional uint32 fw_patch = 24;
  if (has_fw_patch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->fw_patch(), output);
  }

  // optional string fw_vendor = 25;
  if (has_fw_vendor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fw_vendor().data(), this->fw_vendor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fw_vendor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->fw_vendor(), output);
  }

  // optional bytes fw_vendor_keys = 26;
  if (has_fw_vendor_keys()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      26, this->fw_vendor_keys(), output);
  }

  // optional bool unfinished_backup = 27;
  if (has_unfinished_backup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->unfinished_backup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Features)
}

::google::protobuf::uint8* Features::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Features)
  // optional string vendor = 1;
  if (has_vendor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vendor().data(), this->vendor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vendor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->vendor(), target);
  }

  // optional uint32 major_version = 2;
  if (has_major_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->major_version(), target);
  }

  // optional uint32 minor_version = 3;
  if (has_minor_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->minor_version(), target);
  }

  // optional uint32 patch_version = 4;
  if (has_patch_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->patch_version(), target);
  }

  // optional bool bootloader_mode = 5;
  if (has_bootloader_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bootloader_mode(), target);
  }

  // optional string device_id = 6;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->device_id(), target);
  }

  // optional bool pin_protection = 7;
  if (has_pin_protection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->pin_protection(), target);
  }

  // optional bool passphrase_protection = 8;
  if (has_passphrase_protection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->passphrase_protection(), target);
  }

  // optional string language = 9;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->language(), target);
  }

  // optional string label = 10;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->label(), target);
  }

  // optional bool initialized = 12;
  if (has_initialized()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->initialized(), target);
  }

  // optional bytes revision = 13;
  if (has_revision()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->revision(), target);
  }

  // optional bytes bootloader_hash = 14;
  if (has_bootloader_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->bootloader_hash(), target);
  }

  // optional bool imported = 15;
  if (has_imported()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->imported(), target);
  }

  // optional bool pin_cached = 16;
  if (has_pin_cached()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->pin_cached(), target);
  }

  // optional bool passphrase_cached = 17;
  if (has_passphrase_cached()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->passphrase_cached(), target);
  }

  // optional bool firmware_present = 18;
  if (has_firmware_present()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->firmware_present(), target);
  }

  // optional bool needs_backup = 19;
  if (has_needs_backup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->needs_backup(), target);
  }

  // optional uint32 flags = 20;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->flags(), target);
  }

  // optional string model = 21;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->model(), target);
  }

  // optional uint32 fw_major = 22;
  if (has_fw_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->fw_major(), target);
  }

  // optional uint32 fw_minor = 23;
  if (has_fw_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->fw_minor(), target);
  }

  // optional uint32 fw_patch = 24;
  if (has_fw_patch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->fw_patch(), target);
  }

  // optional string fw_vendor = 25;
  if (has_fw_vendor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fw_vendor().data(), this->fw_vendor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fw_vendor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->fw_vendor(), target);
  }

  // optional bytes fw_vendor_keys = 26;
  if (has_fw_vendor_keys()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        26, this->fw_vendor_keys(), target);
  }

  // optional bool unfinished_backup = 27;
  if (has_unfinished_backup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->unfinished_backup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Features)
  return target;
}

int Features::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string vendor = 1;
    if (has_vendor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vendor());
    }

    // optional uint32 major_version = 2;
    if (has_major_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->major_version());
    }

    // optional uint32 minor_version = 3;
    if (has_minor_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minor_version());
    }

    // optional uint32 patch_version = 4;
    if (has_patch_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->patch_version());
    }

    // optional bool bootloader_mode = 5;
    if (has_bootloader_mode()) {
      total_size += 1 + 1;
    }

    // optional string device_id = 6;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional bool pin_protection = 7;
    if (has_pin_protection()) {
      total_size += 1 + 1;
    }

    // optional bool passphrase_protection = 8;
    if (has_passphrase_protection()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string language = 9;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional string label = 10;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional bool initialized = 12;
    if (has_initialized()) {
      total_size += 1 + 1;
    }

    // optional bytes revision = 13;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->revision());
    }

    // optional bytes bootloader_hash = 14;
    if (has_bootloader_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bootloader_hash());
    }

    // optional bool imported = 15;
    if (has_imported()) {
      total_size += 1 + 1;
    }

    // optional bool pin_cached = 16;
    if (has_pin_cached()) {
      total_size += 2 + 1;
    }

    // optional bool passphrase_cached = 17;
    if (has_passphrase_cached()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool firmware_present = 18;
    if (has_firmware_present()) {
      total_size += 2 + 1;
    }

    // optional bool needs_backup = 19;
    if (has_needs_backup()) {
      total_size += 2 + 1;
    }

    // optional uint32 flags = 20;
    if (has_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional string model = 21;
    if (has_model()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional uint32 fw_major = 22;
    if (has_fw_major()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fw_major());
    }

    // optional uint32 fw_minor = 23;
    if (has_fw_minor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fw_minor());
    }

    // optional uint32 fw_patch = 24;
    if (has_fw_patch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fw_patch());
    }

    // optional string fw_vendor = 25;
    if (has_fw_vendor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fw_vendor());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bytes fw_vendor_keys = 26;
    if (has_fw_vendor_keys()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fw_vendor_keys());
    }

    // optional bool unfinished_backup = 27;
    if (has_unfinished_backup()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Features::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Features* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Features*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Features::MergeFrom(const Features& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vendor()) {
      set_vendor(from.vendor());
    }
    if (from.has_major_version()) {
      set_major_version(from.major_version());
    }
    if (from.has_minor_version()) {
      set_minor_version(from.minor_version());
    }
    if (from.has_patch_version()) {
      set_patch_version(from.patch_version());
    }
    if (from.has_bootloader_mode()) {
      set_bootloader_mode(from.bootloader_mode());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_pin_protection()) {
      set_pin_protection(from.pin_protection());
    }
    if (from.has_passphrase_protection()) {
      set_passphrase_protection(from.passphrase_protection());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_initialized()) {
      set_initialized(from.initialized());
    }
    if (from.has_revision()) {
      set_revision(from.revision());
    }
    if (from.has_bootloader_hash()) {
      set_bootloader_hash(from.bootloader_hash());
    }
    if (from.has_imported()) {
      set_imported(from.imported());
    }
    if (from.has_pin_cached()) {
      set_pin_cached(from.pin_cached());
    }
    if (from.has_passphrase_cached()) {
      set_passphrase_cached(from.passphrase_cached());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_firmware_present()) {
      set_firmware_present(from.firmware_present());
    }
    if (from.has_needs_backup()) {
      set_needs_backup(from.needs_backup());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_fw_major()) {
      set_fw_major(from.fw_major());
    }
    if (from.has_fw_minor()) {
      set_fw_minor(from.fw_minor());
    }
    if (from.has_fw_patch()) {
      set_fw_patch(from.fw_patch());
    }
    if (from.has_fw_vendor()) {
      set_fw_vendor(from.fw_vendor());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_fw_vendor_keys()) {
      set_fw_vendor_keys(from.fw_vendor_keys());
    }
    if (from.has_unfinished_backup()) {
      set_unfinished_backup(from.unfinished_backup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Features::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Features::CopyFrom(const Features& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Features::IsInitialized() const {

  return true;
}

void Features::Swap(Features* other) {
  if (other != this) {
    std::swap(vendor_, other->vendor_);
    std::swap(major_version_, other->major_version_);
    std::swap(minor_version_, other->minor_version_);
    std::swap(patch_version_, other->patch_version_);
    std::swap(bootloader_mode_, other->bootloader_mode_);
    std::swap(device_id_, other->device_id_);
    std::swap(pin_protection_, other->pin_protection_);
    std::swap(passphrase_protection_, other->passphrase_protection_);
    std::swap(language_, other->language_);
    std::swap(label_, other->label_);
    std::swap(initialized_, other->initialized_);
    std::swap(revision_, other->revision_);
    std::swap(bootloader_hash_, other->bootloader_hash_);
    std::swap(imported_, other->imported_);
    std::swap(pin_cached_, other->pin_cached_);
    std::swap(passphrase_cached_, other->passphrase_cached_);
    std::swap(firmware_present_, other->firmware_present_);
    std::swap(needs_backup_, other->needs_backup_);
    std::swap(flags_, other->flags_);
    std::swap(model_, other->model_);
    std::swap(fw_major_, other->fw_major_);
    std::swap(fw_minor_, other->fw_minor_);
    std::swap(fw_patch_, other->fw_patch_);
    std::swap(fw_vendor_, other->fw_vendor_);
    std::swap(fw_vendor_keys_, other->fw_vendor_keys_);
    std::swap(unfinished_backup_, other->unfinished_backup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Features::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Features_descriptor_;
  metadata.reflection = Features_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ClearSession::ClearSession()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClearSession)
}

void ClearSession::InitAsDefaultInstance() {
}

ClearSession::ClearSession(const ClearSession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClearSession)
}

void ClearSession::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClearSession::~ClearSession() {
  // @@protoc_insertion_point(destructor:ClearSession)
  SharedDtor();
}

void ClearSession::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClearSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClearSession_descriptor_;
}

const ClearSession& ClearSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmanagement_2eproto();
  return *default_instance_;
}

ClearSession* ClearSession::default_instance_ = NULL;

ClearSession* ClearSession::New() const {
  return new ClearSession;
}

void ClearSession::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClearSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClearSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ClearSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClearSession)
  return false;
#undef DO_
}

void ClearSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClearSession)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClearSession)
}

::google::protobuf::uint8* ClearSession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClearSession)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClearSession)
  return target;
}

int ClearSession::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearSession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClearSession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClearSession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClearSession::MergeFrom(const ClearSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClearSession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearSession::CopyFrom(const ClearSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearSession::IsInitialized() const {

  return true;
}

void ClearSession::Swap(ClearSession* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClearSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClearSession_descriptor_;
  metadata.reflection = ClearSession_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ApplySettings_PassphraseSourceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplySettings_PassphraseSourceType_descriptor_;
}
bool ApplySettings_PassphraseSourceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ApplySettings_PassphraseSourceType ApplySettings::ASK;
const ApplySettings_PassphraseSourceType ApplySettings::DEVICE;
const ApplySettings_PassphraseSourceType ApplySettings::HOST;
const ApplySettings_PassphraseSourceType ApplySettings::PassphraseSourceType_MIN;
const ApplySettings_PassphraseSourceType ApplySettings::PassphraseSourceType_MAX;
const int ApplySettings::PassphraseSourceType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ApplySettings::kLanguageFieldNumber;
const int ApplySettings::kLabelFieldNumber;
const int ApplySettings::kUsePassphraseFieldNumber;
const int ApplySettings::kHomescreenFieldNumber;
const int ApplySettings::kPassphraseSourceFieldNumber;
const int ApplySettings::kAutoLockDelayMsFieldNumber;
#endif  // !_MSC_VER

ApplySettings::ApplySettings()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ApplySettings)
}

void ApplySettings::InitAsDefaultInstance() {
}

ApplySettings::ApplySettings(const ApplySettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ApplySettings)
}

void ApplySettings::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  use_passphrase_ = false;
  homescreen_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passphrase_source_ = 0;
  auto_lock_delay_ms_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplySettings::~ApplySettings() {
  // @@protoc_insertion_point(destructor:ApplySettings)
  SharedDtor();
}

void ApplySettings::SharedDtor() {
  if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete language_;
  }
  if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_;
  }
  if (homescreen_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete homescreen_;
  }
  if (this != default_instance_) {
  }
}

void ApplySettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplySettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplySettings_descriptor_;
}

const ApplySettings& ApplySettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmanagement_2eproto();
  return *default_instance_;
}

ApplySettings* ApplySettings::default_instance_ = NULL;

ApplySettings* ApplySettings::New() const {
  return new ApplySettings;
}

void ApplySettings::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ApplySettings*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(use_passphrase_, auto_lock_delay_ms_);
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        language_->clear();
      }
    }
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        label_->clear();
      }
    }
    if (has_homescreen()) {
      if (homescreen_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        homescreen_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplySettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ApplySettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string language = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "language");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_label;
        break;
      }

      // optional string label = 2;
      case 2: {
        if (tag == 18) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_use_passphrase;
        break;
      }

      // optional bool use_passphrase = 3;
      case 3: {
        if (tag == 24) {
         parse_use_passphrase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_passphrase_)));
          set_has_use_passphrase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_homescreen;
        break;
      }

      // optional bytes homescreen = 4;
      case 4: {
        if (tag == 34) {
         parse_homescreen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_homescreen()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_passphrase_source;
        break;
      }

      // optional .ApplySettings.PassphraseSourceType passphrase_source = 5;
      case 5: {
        if (tag == 40) {
         parse_passphrase_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ApplySettings_PassphraseSourceType_IsValid(value)) {
            set_passphrase_source(static_cast< ::ApplySettings_PassphraseSourceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_auto_lock_delay_ms;
        break;
      }

      // optional uint32 auto_lock_delay_ms = 6;
      case 6: {
        if (tag == 48) {
         parse_auto_lock_delay_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auto_lock_delay_ms_)));
          set_has_auto_lock_delay_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ApplySettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ApplySettings)
  return false;
#undef DO_
}

void ApplySettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ApplySettings)
  // optional string language = 1;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->language(), output);
  }

  // optional string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->label(), output);
  }

  // optional bool use_passphrase = 3;
  if (has_use_passphrase()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_passphrase(), output);
  }

  // optional bytes homescreen = 4;
  if (has_homescreen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->homescreen(), output);
  }

  // optional .ApplySettings.PassphraseSourceType passphrase_source = 5;
  if (has_passphrase_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->passphrase_source(), output);
  }

  // optional uint32 auto_lock_delay_ms = 6;
  if (has_auto_lock_delay_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->auto_lock_delay_ms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ApplySettings)
}

::google::protobuf::uint8* ApplySettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ApplySettings)
  // optional string language = 1;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->language(), target);
  }

  // optional string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }

  // optional bool use_passphrase = 3;
  if (has_use_passphrase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_passphrase(), target);
  }

  // optional bytes homescreen = 4;
  if (has_homescreen()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->homescreen(), target);
  }

  // optional .ApplySettings.PassphraseSourceType passphrase_source = 5;
  if (has_passphrase_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->passphrase_source(), target);
  }

  // optional uint32 auto_lock_delay_ms = 6;
  if (has_auto_lock_delay_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->auto_lock_delay_ms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ApplySettings)
  return target;
}

int ApplySettings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string language = 1;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional string label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional bool use_passphrase = 3;
    if (has_use_passphrase()) {
      total_size += 1 + 1;
    }

    // optional bytes homescreen = 4;
    if (has_homescreen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->homescreen());
    }

    // optional .ApplySettings.PassphraseSourceType passphrase_source = 5;
    if (has_passphrase_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->passphrase_source());
    }

    // optional uint32 auto_lock_delay_ms = 6;
    if (has_auto_lock_delay_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auto_lock_delay_ms());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplySettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplySettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplySettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplySettings::MergeFrom(const ApplySettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_use_passphrase()) {
      set_use_passphrase(from.use_passphrase());
    }
    if (from.has_homescreen()) {
      set_homescreen(from.homescreen());
    }
    if (from.has_passphrase_source()) {
      set_passphrase_source(from.passphrase_source());
    }
    if (from.has_auto_lock_delay_ms()) {
      set_auto_lock_delay_ms(from.auto_lock_delay_ms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplySettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplySettings::CopyFrom(const ApplySettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplySettings::IsInitialized() const {

  return true;
}

void ApplySettings::Swap(ApplySettings* other) {
  if (other != this) {
    std::swap(language_, other->language_);
    std::swap(label_, other->label_);
    std::swap(use_passphrase_, other->use_passphrase_);
    std::swap(homescreen_, other->homescreen_);
    std::swap(passphrase_source_, other->passphrase_source_);
    std::swap(auto_lock_delay_ms_, other->auto_lock_delay_ms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplySettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplySettings_descriptor_;
  metadata.reflection = ApplySettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyFlags::kFlagsFieldNumber;
#endif  // !_MSC_VER

ApplyFlags::ApplyFlags()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ApplyFlags)
}

void ApplyFlags::InitAsDefaultInstance() {
}

ApplyFlags::ApplyFlags(const ApplyFlags& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ApplyFlags)
}

void ApplyFlags::SharedCtor() {
  _cached_size_ = 0;
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyFlags::~ApplyFlags() {
  // @@protoc_insertion_point(destructor:ApplyFlags)
  SharedDtor();
}

void ApplyFlags::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyFlags::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyFlags::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyFlags_descriptor_;
}

const ApplyFlags& ApplyFlags::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmanagement_2eproto();
  return *default_instance_;
}

ApplyFlags* ApplyFlags::default_instance_ = NULL;

ApplyFlags* ApplyFlags::New() const {
  return new ApplyFlags;
}

void ApplyFlags::Clear() {
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyFlags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ApplyFlags)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 flags = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ApplyFlags)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ApplyFlags)
  return false;
#undef DO_
}

void ApplyFlags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ApplyFlags)
  // optional uint32 flags = 1;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ApplyFlags)
}

::google::protobuf::uint8* ApplyFlags::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ApplyFlags)
  // optional uint32 flags = 1;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->flags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ApplyFlags)
  return target;
}

int ApplyFlags::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 flags = 1;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyFlags::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyFlags* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyFlags*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyFlags::MergeFrom(const ApplyFlags& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyFlags::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyFlags::CopyFrom(const ApplyFlags& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyFlags::IsInitialized() const {

  return true;
}

void ApplyFlags::Swap(ApplyFlags* other) {
  if (other != this) {
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyFlags::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyFlags_descriptor_;
  metadata.reflection = ApplyFlags_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangePin::kRemoveFieldNumber;
#endif  // !_MSC_VER

ChangePin::ChangePin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChangePin)
}

void ChangePin::InitAsDefaultInstance() {
}

ChangePin::ChangePin(const ChangePin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChangePin)
}

void ChangePin::SharedCtor() {
  _cached_size_ = 0;
  remove_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangePin::~ChangePin() {
  // @@protoc_insertion_point(destructor:ChangePin)
  SharedDtor();
}

void ChangePin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangePin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangePin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangePin_descriptor_;
}

const ChangePin& ChangePin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmanagement_2eproto();
  return *default_instance_;
}

ChangePin* ChangePin::default_instance_ = NULL;

ChangePin* ChangePin::New() const {
  return new ChangePin;
}

void ChangePin::Clear() {
  remove_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangePin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChangePin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool remove = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remove_)));
          set_has_remove();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChangePin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChangePin)
  return false;
#undef DO_
}

void ChangePin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChangePin)
  // optional bool remove = 1;
  if (has_remove()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->remove(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChangePin)
}

::google::protobuf::uint8* ChangePin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChangePin)
  // optional bool remove = 1;
  if (has_remove()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->remove(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChangePin)
  return target;
}

int ChangePin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool remove = 1;
    if (has_remove()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangePin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangePin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangePin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangePin::MergeFrom(const ChangePin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remove()) {
      set_remove(from.remove());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangePin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePin::CopyFrom(const ChangePin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePin::IsInitialized() const {

  return true;
}

void ChangePin::Swap(ChangePin* other) {
  if (other != this) {
    std::swap(remove_, other->remove_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangePin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangePin_descriptor_;
  metadata.reflection = ChangePin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ping::kMessageFieldNumber;
const int Ping::kButtonProtectionFieldNumber;
const int Ping::kPinProtectionFieldNumber;
const int Ping::kPassphraseProtectionFieldNumber;
#endif  // !_MSC_VER

Ping::Ping()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Ping)
}

void Ping::InitAsDefaultInstance() {
}

Ping::Ping(const Ping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Ping)
}

void Ping::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  button_protection_ = false;
  pin_protection_ = false;
  passphrase_protection_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:Ping)
  SharedDtor();
}

void Ping::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ping_descriptor_;
}

const Ping& Ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmanagement_2eproto();
  return *default_instance_;
}

Ping* Ping::default_instance_ = NULL;

Ping* Ping::New() const {
  return new Ping;
}

void Ping::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Ping*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(button_protection_, passphrase_protection_);
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Ping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_button_protection;
        break;
      }

      // optional bool button_protection = 2;
      case 2: {
        if (tag == 16) {
         parse_button_protection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &button_protection_)));
          set_has_button_protection();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pin_protection;
        break;
      }

      // optional bool pin_protection = 3;
      case 3: {
        if (tag == 24) {
         parse_pin_protection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pin_protection_)));
          set_has_pin_protection();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_passphrase_protection;
        break;
      }

      // optional bool passphrase_protection = 4;
      case 4: {
        if (tag == 32) {
         parse_passphrase_protection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &passphrase_protection_)));
          set_has_passphrase_protection();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Ping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Ping)
  return false;
#undef DO_
}

void Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Ping)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // optional bool button_protection = 2;
  if (has_button_protection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->button_protection(), output);
  }

  // optional bool pin_protection = 3;
  if (has_pin_protection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->pin_protection(), output);
  }

  // optional bool passphrase_protection = 4;
  if (has_passphrase_protection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->passphrase_protection(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Ping)
}

::google::protobuf::uint8* Ping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Ping)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // optional bool button_protection = 2;
  if (has_button_protection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->button_protection(), target);
  }

  // optional bool pin_protection = 3;
  if (has_pin_protection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->pin_protection(), target);
  }

  // optional bool passphrase_protection = 4;
  if (has_passphrase_protection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->passphrase_protection(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Ping)
  return target;
}

int Ping::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional bool button_protection = 2;
    if (has_button_protection()) {
      total_size += 1 + 1;
    }

    // optional bool pin_protection = 3;
    if (has_pin_protection()) {
      total_size += 1 + 1;
    }

    // optional bool passphrase_protection = 4;
    if (has_passphrase_protection()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ping::MergeFrom(const Ping& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_button_protection()) {
      set_button_protection(from.button_protection());
    }
    if (from.has_pin_protection()) {
      set_pin_protection(from.pin_protection());
    }
    if (from.has_passphrase_protection()) {
      set_passphrase_protection(from.passphrase_protection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ping::CopyFrom(const Ping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {

  return true;
}

void Ping::Swap(Ping* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(button_protection_, other->button_protection_);
    std::swap(pin_protection_, other->pin_protection_);
    std::swap(passphrase_protection_, other->passphrase_protection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ping_descriptor_;
  metadata.reflection = Ping_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Cancel::Cancel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cancel)
}

void Cancel::InitAsDefaultInstance() {
}

Cancel::Cancel(const Cancel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cancel)
}

void Cancel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cancel::~Cancel() {
  // @@protoc_insertion_point(destructor:Cancel)
  SharedDtor();
}

void Cancel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Cancel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cancel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cancel_descriptor_;
}

const Cancel& Cancel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmanagement_2eproto();
  return *default_instance_;
}

Cancel* Cancel::default_instance_ = NULL;

Cancel* Cancel::New() const {
  return new Cancel;
}

void Cancel::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cancel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cancel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Cancel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cancel)
  return false;
#undef DO_
}

void Cancel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cancel)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cancel)
}

::google::protobuf::uint8* Cancel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cancel)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cancel)
  return target;
}

int Cancel::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cancel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cancel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cancel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cancel::MergeFrom(const Cancel& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cancel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cancel::CopyFrom(const Cancel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cancel::IsInitialized() const {

  return true;
}

void Cancel::Swap(Cancel* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cancel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cancel_descriptor_;
  metadata.reflection = Cancel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetEntropy::kSizeFieldNumber;
#endif  // !_MSC_VER

GetEntropy::GetEntropy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetEntropy)
}

void GetEntropy::InitAsDefaultInstance() {
}

GetEntropy::GetEntropy(const GetEntropy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetEntropy)
}

void GetEntropy::SharedCtor() {
  _cached_size_ = 0;
  size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetEntropy::~GetEntropy() {
  // @@protoc_insertion_point(destructor:GetEntropy)
  SharedDtor();
}

void GetEntropy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetEntropy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetEntropy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetEntropy_descriptor_;
}

const GetEntropy& GetEntropy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmanagement_2eproto();
  return *default_instance_;
}

GetEntropy* GetEntropy::default_instance_ = NULL;

GetEntropy* GetEntropy::New() const {
  return new GetEntropy;
}

void GetEntropy::Clear() {
  size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetEntropy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetEntropy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetEntropy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetEntropy)
  return false;
#undef DO_
}

void GetEntropy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetEntropy)
  // required uint32 size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetEntropy)
}

::google::protobuf::uint8* GetEntropy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetEntropy)
  // required uint32 size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetEntropy)
  return target;
}

int GetEntropy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetEntropy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetEntropy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetEntropy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetEntropy::MergeFrom(const GetEntropy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetEntropy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEntropy::CopyFrom(const GetEntropy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEntropy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetEntropy::Swap(GetEntropy* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetEntropy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetEntropy_descriptor_;
  metadata.reflection = GetEntropy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Entropy::kEntropyFieldNumber;
#endif  // !_MSC_VER

Entropy::Entropy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Entropy)
}

void Entropy::InitAsDefaultInstance() {
}

Entropy::Entropy(const Entropy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Entropy)
}

void Entropy::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  entropy_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Entropy::~Entropy() {
  // @@protoc_insertion_point(destructor:Entropy)
  SharedDtor();
}

void Entropy::SharedDtor() {
  if (entropy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete entropy_;
  }
  if (this != default_instance_) {
  }
}

void Entropy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entropy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entropy_descriptor_;
}

const Entropy& Entropy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmanagement_2eproto();
  return *default_instance_;
}

Entropy* Entropy::default_instance_ = NULL;

Entropy* Entropy::New() const {
  return new Entropy;
}

void Entropy::Clear() {
  if (has_entropy()) {
    if (entropy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      entropy_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Entropy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Entropy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes entropy = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_entropy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Entropy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Entropy)
  return false;
#undef DO_
}

void Entropy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Entropy)
  // required bytes entropy = 1;
  if (has_entropy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->entropy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Entropy)
}

::google::protobuf::uint8* Entropy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Entropy)
  // required bytes entropy = 1;
  if (has_entropy()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->entropy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Entropy)
  return target;
}

int Entropy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes entropy = 1;
    if (has_entropy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->entropy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entropy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Entropy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Entropy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Entropy::MergeFrom(const Entropy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entropy()) {
      set_entropy(from.entropy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Entropy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entropy::CopyFrom(const Entropy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entropy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Entropy::Swap(Entropy* other) {
  if (other != this) {
    std::swap(entropy_, other->entropy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Entropy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Entropy_descriptor_;
  metadata.reflection = Entropy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

WipeDevice::WipeDevice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WipeDevice)
}

void WipeDevice::InitAsDefaultInstance() {
}

WipeDevice::WipeDevice(const WipeDevice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WipeDevice)
}

void WipeDevice::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WipeDevice::~WipeDevice() {
  // @@protoc_insertion_point(destructor:WipeDevice)
  SharedDtor();
}

void WipeDevice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WipeDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WipeDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WipeDevice_descriptor_;
}

const WipeDevice& WipeDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmanagement_2eproto();
  return *default_instance_;
}

WipeDevice* WipeDevice::default_instance_ = NULL;

WipeDevice* WipeDevice::New() const {
  return new WipeDevice;
}

void WipeDevice::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WipeDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WipeDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:WipeDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WipeDevice)
  return false;
#undef DO_
}

void WipeDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WipeDevice)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WipeDevice)
}

::google::protobuf::uint8* WipeDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WipeDevice)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WipeDevice)
  return target;
}

int WipeDevice::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WipeDevice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WipeDevice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WipeDevice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WipeDevice::MergeFrom(const WipeDevice& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WipeDevice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WipeDevice::CopyFrom(const WipeDevice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WipeDevice::IsInitialized() const {

  return true;
}

void WipeDevice::Swap(WipeDevice* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WipeDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WipeDevice_descriptor_;
  metadata.reflection = WipeDevice_reflection_;
  return metadata;
}


// ===================================================================

::std::string* LoadDevice::_default_language_ = NULL;
#ifndef _MSC_VER
const int LoadDevice::kMnemonicFieldNumber;
const int LoadDevice::kNodeFieldNumber;
const int LoadDevice::kPinFieldNumber;
const int LoadDevice::kPassphraseProtectionFieldNumber;
const int LoadDevice::kLanguageFieldNumber;
const int LoadDevice::kLabelFieldNumber;
const int LoadDevice::kSkipChecksumFieldNumber;
const int LoadDevice::kU2FCounterFieldNumber;
#endif  // !_MSC_VER

LoadDevice::LoadDevice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoadDevice)
}

void LoadDevice::InitAsDefaultInstance() {
  node_ = const_cast< ::HDNodeType*>(&::HDNodeType::default_instance());
}

LoadDevice::LoadDevice(const LoadDevice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LoadDevice)
}

void LoadDevice::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mnemonic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_ = NULL;
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passphrase_protection_ = false;
  language_ = const_cast< ::std::string*>(_default_language_);
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skip_checksum_ = false;
  u2f_counter_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoadDevice::~LoadDevice() {
  // @@protoc_insertion_point(destructor:LoadDevice)
  SharedDtor();
}

void LoadDevice::SharedDtor() {
  if (mnemonic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mnemonic_;
  }
  if (pin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pin_;
  }
  if (language_ != _default_language_) {
    delete language_;
  }
  if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_;
  }
  if (this != default_instance_) {
    delete node_;
  }
}

void LoadDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadDevice_descriptor_;
}

const LoadDevice& LoadDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmanagement_2eproto();
  return *default_instance_;
}

LoadDevice* LoadDevice::default_instance_ = NULL;

LoadDevice* LoadDevice::New() const {
  return new LoadDevice;
}

void LoadDevice::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LoadDevice*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(passphrase_protection_, u2f_counter_);
    if (has_mnemonic()) {
      if (mnemonic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mnemonic_->clear();
      }
    }
    if (has_node()) {
      if (node_ != NULL) node_->::HDNodeType::Clear();
    }
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pin_->clear();
      }
    }
    if (has_language()) {
      if (language_ != _default_language_) {
        language_->assign(*_default_language_);
      }
    }
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        label_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoadDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoadDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mnemonic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mnemonic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mnemonic().data(), this->mnemonic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mnemonic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_node;
        break;
      }

      // optional .HDNodeType node = 2;
      case 2: {
        if (tag == 18) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pin;
        break;
      }

      // optional string pin = 3;
      case 3: {
        if (tag == 26) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pin");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_passphrase_protection;
        break;
      }

      // optional bool passphrase_protection = 4;
      case 4: {
        if (tag == 32) {
         parse_passphrase_protection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &passphrase_protection_)));
          set_has_passphrase_protection();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_language;
        break;
      }

      // optional string language = 5 [default = "english"];
      case 5: {
        if (tag == 42) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "language");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_label;
        break;
      }

      // optional string label = 6;
      case 6: {
        if (tag == 50) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_skip_checksum;
        break;
      }

      // optional bool skip_checksum = 7;
      case 7: {
        if (tag == 56) {
         parse_skip_checksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_checksum_)));
          set_has_skip_checksum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_u2f_counter;
        break;
      }

      // optional uint32 u2f_counter = 8;
      case 8: {
        if (tag == 64) {
         parse_u2f_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &u2f_counter_)));
          set_has_u2f_counter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoadDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoadDevice)
  return false;
#undef DO_
}

void LoadDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoadDevice)
  // optional string mnemonic = 1;
  if (has_mnemonic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mnemonic().data(), this->mnemonic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mnemonic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mnemonic(), output);
  }

  // optional .HDNodeType node = 2;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->node(), output);
  }

  // optional string pin = 3;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pin(), output);
  }

  // optional bool passphrase_protection = 4;
  if (has_passphrase_protection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->passphrase_protection(), output);
  }

  // optional string language = 5 [default = "english"];
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->language(), output);
  }

  // optional string label = 6;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->label(), output);
  }

  // optional bool skip_checksum = 7;
  if (has_skip_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->skip_checksum(), output);
  }

  // optional uint32 u2f_counter = 8;
  if (has_u2f_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->u2f_counter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LoadDevice)
}

::google::protobuf::uint8* LoadDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoadDevice)
  // optional string mnemonic = 1;
  if (has_mnemonic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mnemonic().data(), this->mnemonic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mnemonic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mnemonic(), target);
  }

  // optional .HDNodeType node = 2;
  if (has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->node(), target);
  }

  // optional string pin = 3;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pin(), target);
  }

  // optional bool passphrase_protection = 4;
  if (has_passphrase_protection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->passphrase_protection(), target);
  }

  // optional string language = 5 [default = "english"];
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->language(), target);
  }

  // optional string label = 6;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->label(), target);
  }

  // optional bool skip_checksum = 7;
  if (has_skip_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->skip_checksum(), target);
  }

  // optional uint32 u2f_counter = 8;
  if (has_u2f_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->u2f_counter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoadDevice)
  return target;
}

int LoadDevice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string mnemonic = 1;
    if (has_mnemonic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mnemonic());
    }

    // optional .HDNodeType node = 2;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node());
    }

    // optional string pin = 3;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }

    // optional bool passphrase_protection = 4;
    if (has_passphrase_protection()) {
      total_size += 1 + 1;
    }

    // optional string language = 5 [default = "english"];
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional string label = 6;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional bool skip_checksum = 7;
    if (has_skip_checksum()) {
      total_size += 1 + 1;
    }

    // optional uint32 u2f_counter = 8;
    if (has_u2f_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->u2f_counter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadDevice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoadDevice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoadDevice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoadDevice::MergeFrom(const LoadDevice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mnemonic()) {
      set_mnemonic(from.mnemonic());
    }
    if (from.has_node()) {
      mutable_node()->::HDNodeType::MergeFrom(from.node());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_passphrase_protection()) {
      set_passphrase_protection(from.passphrase_protection());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_skip_checksum()) {
      set_skip_checksum(from.skip_checksum());
    }
    if (from.has_u2f_counter()) {
      set_u2f_counter(from.u2f_counter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoadDevice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadDevice::CopyFrom(const LoadDevice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadDevice::IsInitialized() const {

  if (has_node()) {
    if (!this->node().IsInitialized()) return false;
  }
  return true;
}

void LoadDevice::Swap(LoadDevice* other) {
  if (other != this) {
    std::swap(mnemonic_, other->mnemonic_);
    std::swap(node_, other->node_);
    std::swap(pin_, other->pin_);
    std::swap(passphrase_protection_, other->passphrase_protection_);
    std::swap(language_, other->language_);
    std::swap(label_, other->label_);
    std::swap(skip_checksum_, other->skip_checksum_);
    std::swap(u2f_counter_, other->u2f_counter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoadDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadDevice_descriptor_;
  metadata.reflection = LoadDevice_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ResetDevice::_default_language_ = NULL;
#ifndef _MSC_VER
const int ResetDevice::kDisplayRandomFieldNumber;
const int ResetDevice::kStrengthFieldNumber;
const int ResetDevice::kPassphraseProtectionFieldNumber;
const int ResetDevice::kPinProtectionFieldNumber;
const int ResetDevice::kLanguageFieldNumber;
const int ResetDevice::kLabelFieldNumber;
const int ResetDevice::kU2FCounterFieldNumber;
const int ResetDevice::kSkipBackupFieldNumber;
#endif  // !_MSC_VER

ResetDevice::ResetDevice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ResetDevice)
}

void ResetDevice::InitAsDefaultInstance() {
}

ResetDevice::ResetDevice(const ResetDevice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ResetDevice)
}

void ResetDevice::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  display_random_ = false;
  strength_ = 256u;
  passphrase_protection_ = false;
  pin_protection_ = false;
  language_ = const_cast< ::std::string*>(_default_language_);
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  u2f_counter_ = 0u;
  skip_backup_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResetDevice::~ResetDevice() {
  // @@protoc_insertion_point(destructor:ResetDevice)
  SharedDtor();
}

void ResetDevice::SharedDtor() {
  if (language_ != _default_language_) {
    delete language_;
  }
  if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_;
  }
  if (this != default_instance_) {
  }
}

void ResetDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResetDevice_descriptor_;
}

const ResetDevice& ResetDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmanagement_2eproto();
  return *default_instance_;
}

ResetDevice* ResetDevice::default_instance_ = NULL;

ResetDevice* ResetDevice::New() const {
  return new ResetDevice;
}

void ResetDevice::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ResetDevice*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(display_random_, skip_backup_);
    strength_ = 256u;
    if (has_language()) {
      if (language_ != _default_language_) {
        language_->assign(*_default_language_);
      }
    }
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        label_->clear();
      }
    }
    u2f_counter_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResetDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ResetDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool display_random = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &display_random_)));
          set_has_display_random();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_strength;
        break;
      }

      // optional uint32 strength = 2 [default = 256];
      case 2: {
        if (tag == 16) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_passphrase_protection;
        break;
      }

      // optional bool passphrase_protection = 3;
      case 3: {
        if (tag == 24) {
         parse_passphrase_protection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &passphrase_protection_)));
          set_has_passphrase_protection();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pin_protection;
        break;
      }

      // optional bool pin_protection = 4;
      case 4: {
        if (tag == 32) {
         parse_pin_protection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pin_protection_)));
          set_has_pin_protection();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_language;
        break;
      }

      // optional string language = 5 [default = "english"];
      case 5: {
        if (tag == 42) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "language");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_label;
        break;
      }

      // optional string label = 6;
      case 6: {
        if (tag == 50) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_u2f_counter;
        break;
      }

      // optional uint32 u2f_counter = 7;
      case 7: {
        if (tag == 56) {
         parse_u2f_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &u2f_counter_)));
          set_has_u2f_counter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_skip_backup;
        break;
      }

      // optional bool skip_backup = 8;
      case 8: {
        if (tag == 64) {
         parse_skip_backup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_backup_)));
          set_has_skip_backup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ResetDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ResetDevice)
  return false;
#undef DO_
}

void ResetDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ResetDevice)
  // optional bool display_random = 1;
  if (has_display_random()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->display_random(), output);
  }

  // optional uint32 strength = 2 [default = 256];
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->strength(), output);
  }

  // optional bool passphrase_protection = 3;
  if (has_passphrase_protection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->passphrase_protection(), output);
  }

  // optional bool pin_protection = 4;
  if (has_pin_protection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->pin_protection(), output);
  }

  // optional string language = 5 [default = "english"];
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->language(), output);
  }

  // optional string label = 6;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->label(), output);
  }

  // optional uint32 u2f_counter = 7;
  if (has_u2f_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->u2f_counter(), output);
  }

  // optional bool skip_backup = 8;
  if (has_skip_backup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->skip_backup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ResetDevice)
}

::google::protobuf::uint8* ResetDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResetDevice)
  // optional bool display_random = 1;
  if (has_display_random()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->display_random(), target);
  }

  // optional uint32 strength = 2 [default = 256];
  if (has_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->strength(), target);
  }

  // optional bool passphrase_protection = 3;
  if (has_passphrase_protection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->passphrase_protection(), target);
  }

  // optional bool pin_protection = 4;
  if (has_pin_protection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->pin_protection(), target);
  }

  // optional string language = 5 [default = "english"];
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->language(), target);
  }

  // optional string label = 6;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->label(), target);
  }

  // optional uint32 u2f_counter = 7;
  if (has_u2f_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->u2f_counter(), target);
  }

  // optional bool skip_backup = 8;
  if (has_skip_backup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->skip_backup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResetDevice)
  return target;
}

int ResetDevice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool display_random = 1;
    if (has_display_random()) {
      total_size += 1 + 1;
    }

    // optional uint32 strength = 2 [default = 256];
    if (has_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strength());
    }

    // optional bool passphrase_protection = 3;
    if (has_passphrase_protection()) {
      total_size += 1 + 1;
    }

    // optional bool pin_protection = 4;
    if (has_pin_protection()) {
      total_size += 1 + 1;
    }

    // optional string language = 5 [default = "english"];
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional string label = 6;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional uint32 u2f_counter = 7;
    if (has_u2f_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->u2f_counter());
    }

    // optional bool skip_backup = 8;
    if (has_skip_backup()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetDevice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResetDevice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResetDevice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResetDevice::MergeFrom(const ResetDevice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display_random()) {
      set_display_random(from.display_random());
    }
    if (from.has_strength()) {
      set_strength(from.strength());
    }
    if (from.has_passphrase_protection()) {
      set_passphrase_protection(from.passphrase_protection());
    }
    if (from.has_pin_protection()) {
      set_pin_protection(from.pin_protection());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_u2f_counter()) {
      set_u2f_counter(from.u2f_counter());
    }
    if (from.has_skip_backup()) {
      set_skip_backup(from.skip_backup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResetDevice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetDevice::CopyFrom(const ResetDevice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetDevice::IsInitialized() const {

  return true;
}

void ResetDevice::Swap(ResetDevice* other) {
  if (other != this) {
    std::swap(display_random_, other->display_random_);
    std::swap(strength_, other->strength_);
    std::swap(passphrase_protection_, other->passphrase_protection_);
    std::swap(pin_protection_, other->pin_protection_);
    std::swap(language_, other->language_);
    std::swap(label_, other->label_);
    std::swap(u2f_counter_, other->u2f_counter_);
    std::swap(skip_backup_, other->skip_backup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResetDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResetDevice_descriptor_;
  metadata.reflection = ResetDevice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BackupDevice::BackupDevice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BackupDevice)
}

void BackupDevice::InitAsDefaultInstance() {
}

BackupDevice::BackupDevice(const BackupDevice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BackupDevice)
}

void BackupDevice::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BackupDevice::~BackupDevice() {
  // @@protoc_insertion_point(destructor:BackupDevice)
  SharedDtor();
}

void BackupDevice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BackupDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackupDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BackupDevice_descriptor_;
}

const BackupDevice& BackupDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmanagement_2eproto();
  return *default_instance_;
}

BackupDevice* BackupDevice::default_instance_ = NULL;

BackupDevice* BackupDevice::New() const {
  return new BackupDevice;
}

void BackupDevice::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BackupDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BackupDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:BackupDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BackupDevice)
  return false;
#undef DO_
}

void BackupDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BackupDevice)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BackupDevice)
}

::google::protobuf::uint8* BackupDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BackupDevice)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BackupDevice)
  return target;
}

int BackupDevice::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackupDevice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BackupDevice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BackupDevice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BackupDevice::MergeFrom(const BackupDevice& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BackupDevice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackupDevice::CopyFrom(const BackupDevice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackupDevice::IsInitialized() const {

  return true;
}

void BackupDevice::Swap(BackupDevice* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BackupDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BackupDevice_descriptor_;
  metadata.reflection = BackupDevice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EntropyRequest::EntropyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EntropyRequest)
}

void EntropyRequest::InitAsDefaultInstance() {
}

EntropyRequest::EntropyRequest(const EntropyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EntropyRequest)
}

void EntropyRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntropyRequest::~EntropyRequest() {
  // @@protoc_insertion_point(destructor:EntropyRequest)
  SharedDtor();
}

void EntropyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EntropyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntropyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntropyRequest_descriptor_;
}

const EntropyRequest& EntropyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmanagement_2eproto();
  return *default_instance_;
}

EntropyRequest* EntropyRequest::default_instance_ = NULL;

EntropyRequest* EntropyRequest::New() const {
  return new EntropyRequest;
}

void EntropyRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntropyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EntropyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:EntropyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EntropyRequest)
  return false;
#undef DO_
}

void EntropyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EntropyRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EntropyRequest)
}

::google::protobuf::uint8* EntropyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EntropyRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EntropyRequest)
  return target;
}

int EntropyRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntropyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntropyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntropyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntropyRequest::MergeFrom(const EntropyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntropyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntropyRequest::CopyFrom(const EntropyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntropyRequest::IsInitialized() const {

  return true;
}

void EntropyRequest::Swap(EntropyRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntropyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntropyRequest_descriptor_;
  metadata.reflection = EntropyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EntropyAck::kEntropyFieldNumber;
#endif  // !_MSC_VER

EntropyAck::EntropyAck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EntropyAck)
}

void EntropyAck::InitAsDefaultInstance() {
}

EntropyAck::EntropyAck(const EntropyAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EntropyAck)
}

void EntropyAck::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  entropy_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntropyAck::~EntropyAck() {
  // @@protoc_insertion_point(destructor:EntropyAck)
  SharedDtor();
}

void EntropyAck::SharedDtor() {
  if (entropy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete entropy_;
  }
  if (this != default_instance_) {
  }
}

void EntropyAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntropyAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntropyAck_descriptor_;
}

const EntropyAck& EntropyAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmanagement_2eproto();
  return *default_instance_;
}

EntropyAck* EntropyAck::default_instance_ = NULL;

EntropyAck* EntropyAck::New() const {
  return new EntropyAck;
}

void EntropyAck::Clear() {
  if (has_entropy()) {
    if (entropy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      entropy_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntropyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EntropyAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes entropy = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_entropy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EntropyAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EntropyAck)
  return false;
#undef DO_
}

void EntropyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EntropyAck)
  // optional bytes entropy = 1;
  if (has_entropy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->entropy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EntropyAck)
}

::google::protobuf::uint8* EntropyAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EntropyAck)
  // optional bytes entropy = 1;
  if (has_entropy()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->entropy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EntropyAck)
  return target;
}

int EntropyAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes entropy = 1;
    if (has_entropy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->entropy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntropyAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntropyAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntropyAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntropyAck::MergeFrom(const EntropyAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entropy()) {
      set_entropy(from.entropy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntropyAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntropyAck::CopyFrom(const EntropyAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntropyAck::IsInitialized() const {

  return true;
}

void EntropyAck::Swap(EntropyAck* other) {
  if (other != this) {
    std::swap(entropy_, other->entropy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntropyAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntropyAck_descriptor_;
  metadata.reflection = EntropyAck_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RecoveryDevice_RecoveryDeviceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecoveryDevice_RecoveryDeviceType_descriptor_;
}
bool RecoveryDevice_RecoveryDeviceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RecoveryDevice_RecoveryDeviceType RecoveryDevice::RecoveryDeviceType_ScrambledWords;
const RecoveryDevice_RecoveryDeviceType RecoveryDevice::RecoveryDeviceType_Matrix;
const RecoveryDevice_RecoveryDeviceType RecoveryDevice::RecoveryDeviceType_MIN;
const RecoveryDevice_RecoveryDeviceType RecoveryDevice::RecoveryDeviceType_MAX;
const int RecoveryDevice::RecoveryDeviceType_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* RecoveryDevice::_default_language_ = NULL;
#ifndef _MSC_VER
const int RecoveryDevice::kWordCountFieldNumber;
const int RecoveryDevice::kPassphraseProtectionFieldNumber;
const int RecoveryDevice::kPinProtectionFieldNumber;
const int RecoveryDevice::kLanguageFieldNumber;
const int RecoveryDevice::kLabelFieldNumber;
const int RecoveryDevice::kEnforceWordlistFieldNumber;
const int RecoveryDevice::kTypeFieldNumber;
const int RecoveryDevice::kU2FCounterFieldNumber;
const int RecoveryDevice::kDryRunFieldNumber;
#endif  // !_MSC_VER

RecoveryDevice::RecoveryDevice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RecoveryDevice)
}

void RecoveryDevice::InitAsDefaultInstance() {
}

RecoveryDevice::RecoveryDevice(const RecoveryDevice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RecoveryDevice)
}

void RecoveryDevice::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  word_count_ = 0u;
  passphrase_protection_ = false;
  pin_protection_ = false;
  language_ = const_cast< ::std::string*>(_default_language_);
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enforce_wordlist_ = false;
  type_ = 0;
  u2f_counter_ = 0u;
  dry_run_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecoveryDevice::~RecoveryDevice() {
  // @@protoc_insertion_point(destructor:RecoveryDevice)
  SharedDtor();
}

void RecoveryDevice::SharedDtor() {
  if (language_ != _default_language_) {
    delete language_;
  }
  if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_;
  }
  if (this != default_instance_) {
  }
}

void RecoveryDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecoveryDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecoveryDevice_descriptor_;
}

const RecoveryDevice& RecoveryDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmanagement_2eproto();
  return *default_instance_;
}

RecoveryDevice* RecoveryDevice::default_instance_ = NULL;

RecoveryDevice* RecoveryDevice::New() const {
  return new RecoveryDevice;
}

void RecoveryDevice::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RecoveryDevice*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(word_count_, enforce_wordlist_);
    ZR_(type_, u2f_counter_);
    if (has_language()) {
      if (language_ != _default_language_) {
        language_->assign(*_default_language_);
      }
    }
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        label_->clear();
      }
    }
  }
  dry_run_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecoveryDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RecoveryDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 word_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &word_count_)));
          set_has_word_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_passphrase_protection;
        break;
      }

      // optional bool passphrase_protection = 2;
      case 2: {
        if (tag == 16) {
         parse_passphrase_protection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &passphrase_protection_)));
          set_has_passphrase_protection();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pin_protection;
        break;
      }

      // optional bool pin_protection = 3;
      case 3: {
        if (tag == 24) {
         parse_pin_protection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pin_protection_)));
          set_has_pin_protection();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_language;
        break;
      }

      // optional string language = 4 [default = "english"];
      case 4: {
        if (tag == 34) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "language");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_label;
        break;
      }

      // optional string label = 5;
      case 5: {
        if (tag == 42) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_enforce_wordlist;
        break;
      }

      // optional bool enforce_wordlist = 6;
      case 6: {
        if (tag == 48) {
         parse_enforce_wordlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enforce_wordlist_)));
          set_has_enforce_wordlist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_type;
        break;
      }

      // optional .RecoveryDevice.RecoveryDeviceType type = 8;
      case 8: {
        if (tag == 64) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RecoveryDevice_RecoveryDeviceType_IsValid(value)) {
            set_type(static_cast< ::RecoveryDevice_RecoveryDeviceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_u2f_counter;
        break;
      }

      // optional uint32 u2f_counter = 9;
      case 9: {
        if (tag == 72) {
         parse_u2f_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &u2f_counter_)));
          set_has_u2f_counter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_dry_run;
        break;
      }

      // optional bool dry_run = 10;
      case 10: {
        if (tag == 80) {
         parse_dry_run:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dry_run_)));
          set_has_dry_run();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RecoveryDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RecoveryDevice)
  return false;
#undef DO_
}

void RecoveryDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RecoveryDevice)
  // optional uint32 word_count = 1;
  if (has_word_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->word_count(), output);
  }

  // optional bool passphrase_protection = 2;
  if (has_passphrase_protection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->passphrase_protection(), output);
  }

  // optional bool pin_protection = 3;
  if (has_pin_protection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->pin_protection(), output);
  }

  // optional string language = 4 [default = "english"];
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->language(), output);
  }

  // optional string label = 5;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->label(), output);
  }

  // optional bool enforce_wordlist = 6;
  if (has_enforce_wordlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->enforce_wordlist(), output);
  }

  // optional .RecoveryDevice.RecoveryDeviceType type = 8;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->type(), output);
  }

  // optional uint32 u2f_counter = 9;
  if (has_u2f_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->u2f_counter(), output);
  }

  // optional bool dry_run = 10;
  if (has_dry_run()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->dry_run(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RecoveryDevice)
}

::google::protobuf::uint8* RecoveryDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RecoveryDevice)
  // optional uint32 word_count = 1;
  if (has_word_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->word_count(), target);
  }

  // optional bool passphrase_protection = 2;
  if (has_passphrase_protection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->passphrase_protection(), target);
  }

  // optional bool pin_protection = 3;
  if (has_pin_protection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->pin_protection(), target);
  }

  // optional string language = 4 [default = "english"];
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->language(), target);
  }

  // optional string label = 5;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->label(), target);
  }

  // optional bool enforce_wordlist = 6;
  if (has_enforce_wordlist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->enforce_wordlist(), target);
  }

  // optional .RecoveryDevice.RecoveryDeviceType type = 8;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->type(), target);
  }

  // optional uint32 u2f_counter = 9;
  if (has_u2f_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->u2f_counter(), target);
  }

  // optional bool dry_run = 10;
  if (has_dry_run()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->dry_run(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RecoveryDevice)
  return target;
}

int RecoveryDevice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 word_count = 1;
    if (has_word_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->word_count());
    }

    // optional bool passphrase_protection = 2;
    if (has_passphrase_protection()) {
      total_size += 1 + 1;
    }

    // optional bool pin_protection = 3;
    if (has_pin_protection()) {
      total_size += 1 + 1;
    }

    // optional string language = 4 [default = "english"];
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional string label = 5;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional bool enforce_wordlist = 6;
    if (has_enforce_wordlist()) {
      total_size += 1 + 1;
    }

    // optional .RecoveryDevice.RecoveryDeviceType type = 8;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 u2f_counter = 9;
    if (has_u2f_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->u2f_counter());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool dry_run = 10;
    if (has_dry_run()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecoveryDevice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecoveryDevice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecoveryDevice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecoveryDevice::MergeFrom(const RecoveryDevice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_word_count()) {
      set_word_count(from.word_count());
    }
    if (from.has_passphrase_protection()) {
      set_passphrase_protection(from.passphrase_protection());
    }
    if (from.has_pin_protection()) {
      set_pin_protection(from.pin_protection());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_enforce_wordlist()) {
      set_enforce_wordlist(from.enforce_wordlist());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_u2f_counter()) {
      set_u2f_counter(from.u2f_counter());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dry_run()) {
      set_dry_run(from.dry_run());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecoveryDevice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoveryDevice::CopyFrom(const RecoveryDevice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoveryDevice::IsInitialized() const {

  return true;
}

void RecoveryDevice::Swap(RecoveryDevice* other) {
  if (other != this) {
    std::swap(word_count_, other->word_count_);
    std::swap(passphrase_protection_, other->passphrase_protection_);
    std::swap(pin_protection_, other->pin_protection_);
    std::swap(language_, other->language_);
    std::swap(label_, other->label_);
    std::swap(enforce_wordlist_, other->enforce_wordlist_);
    std::swap(type_, other->type_);
    std::swap(u2f_counter_, other->u2f_counter_);
    std::swap(dry_run_, other->dry_run_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecoveryDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecoveryDevice_descriptor_;
  metadata.reflection = RecoveryDevice_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* WordRequest_WordRequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WordRequest_WordRequestType_descriptor_;
}
bool WordRequest_WordRequestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const WordRequest_WordRequestType WordRequest::WordRequestType_Plain;
const WordRequest_WordRequestType WordRequest::WordRequestType_Matrix9;
const WordRequest_WordRequestType WordRequest::WordRequestType_Matrix6;
const WordRequest_WordRequestType WordRequest::WordRequestType_MIN;
const WordRequest_WordRequestType WordRequest::WordRequestType_MAX;
const int WordRequest::WordRequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int WordRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

WordRequest::WordRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WordRequest)
}

void WordRequest::InitAsDefaultInstance() {
}

WordRequest::WordRequest(const WordRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WordRequest)
}

void WordRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WordRequest::~WordRequest() {
  // @@protoc_insertion_point(destructor:WordRequest)
  SharedDtor();
}

void WordRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WordRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WordRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WordRequest_descriptor_;
}

const WordRequest& WordRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmanagement_2eproto();
  return *default_instance_;
}

WordRequest* WordRequest::default_instance_ = NULL;

WordRequest* WordRequest::New() const {
  return new WordRequest;
}

void WordRequest::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WordRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .WordRequest.WordRequestType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::WordRequest_WordRequestType_IsValid(value)) {
            set_type(static_cast< ::WordRequest_WordRequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WordRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WordRequest)
  return false;
#undef DO_
}

void WordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WordRequest)
  // optional .WordRequest.WordRequestType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WordRequest)
}

::google::protobuf::uint8* WordRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WordRequest)
  // optional .WordRequest.WordRequestType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WordRequest)
  return target;
}

int WordRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .WordRequest.WordRequestType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WordRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WordRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WordRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WordRequest::MergeFrom(const WordRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WordRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WordRequest::CopyFrom(const WordRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WordRequest::IsInitialized() const {

  return true;
}

void WordRequest::Swap(WordRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WordRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WordRequest_descriptor_;
  metadata.reflection = WordRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WordAck::kWordFieldNumber;
#endif  // !_MSC_VER

WordAck::WordAck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WordAck)
}

void WordAck::InitAsDefaultInstance() {
}

WordAck::WordAck(const WordAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WordAck)
}

void WordAck::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  word_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WordAck::~WordAck() {
  // @@protoc_insertion_point(destructor:WordAck)
  SharedDtor();
}

void WordAck::SharedDtor() {
  if (word_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete word_;
  }
  if (this != default_instance_) {
  }
}

void WordAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WordAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WordAck_descriptor_;
}

const WordAck& WordAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmanagement_2eproto();
  return *default_instance_;
}

WordAck* WordAck::default_instance_ = NULL;

WordAck* WordAck::New() const {
  return new WordAck;
}

void WordAck::Clear() {
  if (has_word()) {
    if (word_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      word_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WordAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WordAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string word = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_word()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->word().data(), this->word().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "word");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WordAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WordAck)
  return false;
#undef DO_
}

void WordAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WordAck)
  // required string word = 1;
  if (has_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->word().data(), this->word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "word");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->word(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WordAck)
}

::google::protobuf::uint8* WordAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WordAck)
  // required string word = 1;
  if (has_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->word().data(), this->word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "word");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->word(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WordAck)
  return target;
}

int WordAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string word = 1;
    if (has_word()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->word());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WordAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WordAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WordAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WordAck::MergeFrom(const WordAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_word()) {
      set_word(from.word());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WordAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WordAck::CopyFrom(const WordAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WordAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WordAck::Swap(WordAck* other) {
  if (other != this) {
    std::swap(word_, other->word_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WordAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WordAck_descriptor_;
  metadata.reflection = WordAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetU2FCounter::kU2FCounterFieldNumber;
#endif  // !_MSC_VER

SetU2FCounter::SetU2FCounter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SetU2FCounter)
}

void SetU2FCounter::InitAsDefaultInstance() {
}

SetU2FCounter::SetU2FCounter(const SetU2FCounter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SetU2FCounter)
}

void SetU2FCounter::SharedCtor() {
  _cached_size_ = 0;
  u2f_counter_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetU2FCounter::~SetU2FCounter() {
  // @@protoc_insertion_point(destructor:SetU2FCounter)
  SharedDtor();
}

void SetU2FCounter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetU2FCounter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetU2FCounter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetU2FCounter_descriptor_;
}

const SetU2FCounter& SetU2FCounter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmanagement_2eproto();
  return *default_instance_;
}

SetU2FCounter* SetU2FCounter::default_instance_ = NULL;

SetU2FCounter* SetU2FCounter::New() const {
  return new SetU2FCounter;
}

void SetU2FCounter::Clear() {
  u2f_counter_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetU2FCounter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SetU2FCounter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 u2f_counter = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &u2f_counter_)));
          set_has_u2f_counter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SetU2FCounter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SetU2FCounter)
  return false;
#undef DO_
}

void SetU2FCounter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SetU2FCounter)
  // optional uint32 u2f_counter = 1;
  if (has_u2f_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->u2f_counter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SetU2FCounter)
}

::google::protobuf::uint8* SetU2FCounter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetU2FCounter)
  // optional uint32 u2f_counter = 1;
  if (has_u2f_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->u2f_counter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetU2FCounter)
  return target;
}

int SetU2FCounter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 u2f_counter = 1;
    if (has_u2f_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->u2f_counter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetU2FCounter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetU2FCounter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetU2FCounter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetU2FCounter::MergeFrom(const SetU2FCounter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_u2f_counter()) {
      set_u2f_counter(from.u2f_counter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetU2FCounter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetU2FCounter::CopyFrom(const SetU2FCounter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetU2FCounter::IsInitialized() const {

  return true;
}

void SetU2FCounter::Swap(SetU2FCounter* other) {
  if (other != this) {
    std::swap(u2f_counter_, other->u2f_counter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetU2FCounter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetU2FCounter_descriptor_;
  metadata.reflection = SetU2FCounter_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
