// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages-monero.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages-monero.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hw {
namespace trezor {
namespace messages {
namespace monero {

namespace {

const ::google::protobuf::Descriptor* MoneroGetAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroGetAddress_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroAddress_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroGetWatchKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroGetWatchKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroWatchKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroWatchKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroTransactionDestinationEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroTransactionDestinationEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroTransactionDestinationEntry_MoneroAccountPublicAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroTransactionDestinationEntry_MoneroAccountPublicAddress_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroTransactionInitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroTransactionInitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroTransactionInitRequest_MoneroTransactionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroTransactionInitRequest_MoneroTransactionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroTransactionInitAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroTransactionInitAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroTransactionSourceEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroTransactionSourceEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroTransactionSourceEntry_MoneroRctKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroTransactionSourceEntry_MoneroRctKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroTransactionSourceEntry_MoneroOutputEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroTransactionSourceEntry_MoneroOutputEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroTransactionSourceEntry_MoneroMultisigKLRki_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroTransactionSourceEntry_MoneroMultisigKLRki_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroTransactionSetInputRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroTransactionSetInputRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroTransactionSetInputAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroTransactionSetInputAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroTransactionInputsPermutationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroTransactionInputsPermutationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroTransactionInputsPermutationAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroTransactionInputsPermutationAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroTransactionInputViniRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroTransactionInputViniRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroTransactionInputViniAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroTransactionInputViniAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroTransactionSetOutputRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroTransactionSetOutputRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroTransactionSetOutputAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroTransactionSetOutputAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroTransactionAllOutSetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroTransactionAllOutSetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroTransactionAllOutSetAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroTransactionAllOutSetAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroTransactionAllOutSetAck_MoneroRingCtSig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroTransactionAllOutSetAck_MoneroRingCtSig_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroTransactionMlsagDoneRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroTransactionMlsagDoneRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroTransactionMlsagDoneAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroTransactionMlsagDoneAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroTransactionSignInputRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroTransactionSignInputRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroTransactionSignInputAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroTransactionSignInputAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroTransactionFinalRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroTransactionFinalRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroTransactionFinalAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroTransactionFinalAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroTransactionSignRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroTransactionSignRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroKeyImageExportInitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroKeyImageExportInitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroKeyImageExportInitAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroKeyImageExportInitAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroKeyImageSyncStepRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroKeyImageSyncStepRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroKeyImageSyncStepRequest_MoneroTransferDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroKeyImageSyncStepRequest_MoneroTransferDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroKeyImageSyncStepAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroKeyImageSyncStepAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroKeyImageSyncStepAck_MoneroExportedKeyImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroKeyImageSyncStepAck_MoneroExportedKeyImage_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroKeyImageSyncFinalRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroKeyImageSyncFinalRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroKeyImageSyncFinalAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroKeyImageSyncFinalAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneroKeyImageSyncRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneroKeyImageSyncRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugMoneroDiagRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugMoneroDiagRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugMoneroDiagAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugMoneroDiagAck_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_2dmonero_2eproto() {
  protobuf_AddDesc_messages_2dmonero_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages-monero.proto");
  GOOGLE_CHECK(file != NULL);
  MoneroGetAddress_descriptor_ = file->message_type(0);
  static const int MoneroGetAddress_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroGetAddress, address_n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroGetAddress, show_display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroGetAddress, network_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroGetAddress, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroGetAddress, minor_),
  };
  MoneroGetAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroGetAddress_descriptor_,
      MoneroGetAddress::default_instance_,
      MoneroGetAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroGetAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroGetAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroGetAddress));
  MoneroAddress_descriptor_ = file->message_type(1);
  static const int MoneroAddress_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroAddress, address_),
  };
  MoneroAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroAddress_descriptor_,
      MoneroAddress::default_instance_,
      MoneroAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroAddress));
  MoneroGetWatchKey_descriptor_ = file->message_type(2);
  static const int MoneroGetWatchKey_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroGetWatchKey, address_n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroGetWatchKey, network_type_),
  };
  MoneroGetWatchKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroGetWatchKey_descriptor_,
      MoneroGetWatchKey::default_instance_,
      MoneroGetWatchKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroGetWatchKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroGetWatchKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroGetWatchKey));
  MoneroWatchKey_descriptor_ = file->message_type(3);
  static const int MoneroWatchKey_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroWatchKey, watch_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroWatchKey, address_),
  };
  MoneroWatchKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroWatchKey_descriptor_,
      MoneroWatchKey::default_instance_,
      MoneroWatchKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroWatchKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroWatchKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroWatchKey));
  MoneroTransactionDestinationEntry_descriptor_ = file->message_type(4);
  static const int MoneroTransactionDestinationEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionDestinationEntry, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionDestinationEntry, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionDestinationEntry, is_subaddress_),
  };
  MoneroTransactionDestinationEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroTransactionDestinationEntry_descriptor_,
      MoneroTransactionDestinationEntry::default_instance_,
      MoneroTransactionDestinationEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionDestinationEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionDestinationEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroTransactionDestinationEntry));
  MoneroTransactionDestinationEntry_MoneroAccountPublicAddress_descriptor_ = MoneroTransactionDestinationEntry_descriptor_->nested_type(0);
  static const int MoneroTransactionDestinationEntry_MoneroAccountPublicAddress_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionDestinationEntry_MoneroAccountPublicAddress, spend_public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionDestinationEntry_MoneroAccountPublicAddress, view_public_key_),
  };
  MoneroTransactionDestinationEntry_MoneroAccountPublicAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroTransactionDestinationEntry_MoneroAccountPublicAddress_descriptor_,
      MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::default_instance_,
      MoneroTransactionDestinationEntry_MoneroAccountPublicAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionDestinationEntry_MoneroAccountPublicAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionDestinationEntry_MoneroAccountPublicAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroTransactionDestinationEntry_MoneroAccountPublicAddress));
  MoneroTransactionInitRequest_descriptor_ = file->message_type(5);
  static const int MoneroTransactionInitRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitRequest, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitRequest, address_n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitRequest, network_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitRequest, tsx_data_),
  };
  MoneroTransactionInitRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroTransactionInitRequest_descriptor_,
      MoneroTransactionInitRequest::default_instance_,
      MoneroTransactionInitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroTransactionInitRequest));
  MoneroTransactionInitRequest_MoneroTransactionData_descriptor_ = MoneroTransactionInitRequest_descriptor_->nested_type(0);
  static const int MoneroTransactionInitRequest_MoneroTransactionData_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitRequest_MoneroTransactionData, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitRequest_MoneroTransactionData, payment_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitRequest_MoneroTransactionData, unlock_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitRequest_MoneroTransactionData, outputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitRequest_MoneroTransactionData, change_dts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitRequest_MoneroTransactionData, num_inputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitRequest_MoneroTransactionData, mixin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitRequest_MoneroTransactionData, fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitRequest_MoneroTransactionData, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitRequest_MoneroTransactionData, minor_indices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitRequest_MoneroTransactionData, is_multisig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitRequest_MoneroTransactionData, exp_tx_prefix_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitRequest_MoneroTransactionData, use_tx_keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitRequest_MoneroTransactionData, is_bulletproof_),
  };
  MoneroTransactionInitRequest_MoneroTransactionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroTransactionInitRequest_MoneroTransactionData_descriptor_,
      MoneroTransactionInitRequest_MoneroTransactionData::default_instance_,
      MoneroTransactionInitRequest_MoneroTransactionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitRequest_MoneroTransactionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitRequest_MoneroTransactionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroTransactionInitRequest_MoneroTransactionData));
  MoneroTransactionInitAck_descriptor_ = file->message_type(6);
  static const int MoneroTransactionInitAck_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitAck, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitAck, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitAck, in_memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitAck, hmacs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitAck, many_inputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitAck, many_outputs_),
  };
  MoneroTransactionInitAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroTransactionInitAck_descriptor_,
      MoneroTransactionInitAck::default_instance_,
      MoneroTransactionInitAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInitAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroTransactionInitAck));
  MoneroTransactionSourceEntry_descriptor_ = file->message_type(7);
  static const int MoneroTransactionSourceEntry_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSourceEntry, outputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSourceEntry, real_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSourceEntry, real_out_tx_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSourceEntry, real_out_additional_tx_keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSourceEntry, real_output_in_tx_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSourceEntry, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSourceEntry, rct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSourceEntry, mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSourceEntry, multisig_klrki_),
  };
  MoneroTransactionSourceEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroTransactionSourceEntry_descriptor_,
      MoneroTransactionSourceEntry::default_instance_,
      MoneroTransactionSourceEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSourceEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSourceEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroTransactionSourceEntry));
  MoneroTransactionSourceEntry_MoneroRctKey_descriptor_ = MoneroTransactionSourceEntry_descriptor_->nested_type(0);
  static const int MoneroTransactionSourceEntry_MoneroRctKey_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSourceEntry_MoneroRctKey, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSourceEntry_MoneroRctKey, mask_),
  };
  MoneroTransactionSourceEntry_MoneroRctKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroTransactionSourceEntry_MoneroRctKey_descriptor_,
      MoneroTransactionSourceEntry_MoneroRctKey::default_instance_,
      MoneroTransactionSourceEntry_MoneroRctKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSourceEntry_MoneroRctKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSourceEntry_MoneroRctKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroTransactionSourceEntry_MoneroRctKey));
  MoneroTransactionSourceEntry_MoneroOutputEntry_descriptor_ = MoneroTransactionSourceEntry_descriptor_->nested_type(1);
  static const int MoneroTransactionSourceEntry_MoneroOutputEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSourceEntry_MoneroOutputEntry, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSourceEntry_MoneroOutputEntry, key_),
  };
  MoneroTransactionSourceEntry_MoneroOutputEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroTransactionSourceEntry_MoneroOutputEntry_descriptor_,
      MoneroTransactionSourceEntry_MoneroOutputEntry::default_instance_,
      MoneroTransactionSourceEntry_MoneroOutputEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSourceEntry_MoneroOutputEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSourceEntry_MoneroOutputEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroTransactionSourceEntry_MoneroOutputEntry));
  MoneroTransactionSourceEntry_MoneroMultisigKLRki_descriptor_ = MoneroTransactionSourceEntry_descriptor_->nested_type(2);
  static const int MoneroTransactionSourceEntry_MoneroMultisigKLRki_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSourceEntry_MoneroMultisigKLRki, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSourceEntry_MoneroMultisigKLRki, l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSourceEntry_MoneroMultisigKLRki, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSourceEntry_MoneroMultisigKLRki, ki_),
  };
  MoneroTransactionSourceEntry_MoneroMultisigKLRki_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroTransactionSourceEntry_MoneroMultisigKLRki_descriptor_,
      MoneroTransactionSourceEntry_MoneroMultisigKLRki::default_instance_,
      MoneroTransactionSourceEntry_MoneroMultisigKLRki_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSourceEntry_MoneroMultisigKLRki, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSourceEntry_MoneroMultisigKLRki, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroTransactionSourceEntry_MoneroMultisigKLRki));
  MoneroTransactionSetInputRequest_descriptor_ = file->message_type(8);
  static const int MoneroTransactionSetInputRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSetInputRequest, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSetInputRequest, src_entr_),
  };
  MoneroTransactionSetInputRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroTransactionSetInputRequest_descriptor_,
      MoneroTransactionSetInputRequest::default_instance_,
      MoneroTransactionSetInputRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSetInputRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSetInputRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroTransactionSetInputRequest));
  MoneroTransactionSetInputAck_descriptor_ = file->message_type(9);
  static const int MoneroTransactionSetInputAck_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSetInputAck, vini_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSetInputAck, vini_hmac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSetInputAck, pseudo_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSetInputAck, pseudo_out_hmac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSetInputAck, alpha_enc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSetInputAck, spend_enc_),
  };
  MoneroTransactionSetInputAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroTransactionSetInputAck_descriptor_,
      MoneroTransactionSetInputAck::default_instance_,
      MoneroTransactionSetInputAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSetInputAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSetInputAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroTransactionSetInputAck));
  MoneroTransactionInputsPermutationRequest_descriptor_ = file->message_type(10);
  static const int MoneroTransactionInputsPermutationRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInputsPermutationRequest, perm_),
  };
  MoneroTransactionInputsPermutationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroTransactionInputsPermutationRequest_descriptor_,
      MoneroTransactionInputsPermutationRequest::default_instance_,
      MoneroTransactionInputsPermutationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInputsPermutationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInputsPermutationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroTransactionInputsPermutationRequest));
  MoneroTransactionInputsPermutationAck_descriptor_ = file->message_type(11);
  static const int MoneroTransactionInputsPermutationAck_offsets_[1] = {
  };
  MoneroTransactionInputsPermutationAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroTransactionInputsPermutationAck_descriptor_,
      MoneroTransactionInputsPermutationAck::default_instance_,
      MoneroTransactionInputsPermutationAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInputsPermutationAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInputsPermutationAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroTransactionInputsPermutationAck));
  MoneroTransactionInputViniRequest_descriptor_ = file->message_type(12);
  static const int MoneroTransactionInputViniRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInputViniRequest, src_entr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInputViniRequest, vini_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInputViniRequest, vini_hmac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInputViniRequest, pseudo_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInputViniRequest, pseudo_out_hmac_),
  };
  MoneroTransactionInputViniRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroTransactionInputViniRequest_descriptor_,
      MoneroTransactionInputViniRequest::default_instance_,
      MoneroTransactionInputViniRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInputViniRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInputViniRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroTransactionInputViniRequest));
  MoneroTransactionInputViniAck_descriptor_ = file->message_type(13);
  static const int MoneroTransactionInputViniAck_offsets_[1] = {
  };
  MoneroTransactionInputViniAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroTransactionInputViniAck_descriptor_,
      MoneroTransactionInputViniAck::default_instance_,
      MoneroTransactionInputViniAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInputViniAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionInputViniAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroTransactionInputViniAck));
  MoneroTransactionSetOutputRequest_descriptor_ = file->message_type(14);
  static const int MoneroTransactionSetOutputRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSetOutputRequest, dst_entr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSetOutputRequest, dst_entr_hmac_),
  };
  MoneroTransactionSetOutputRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroTransactionSetOutputRequest_descriptor_,
      MoneroTransactionSetOutputRequest::default_instance_,
      MoneroTransactionSetOutputRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSetOutputRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSetOutputRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroTransactionSetOutputRequest));
  MoneroTransactionSetOutputAck_descriptor_ = file->message_type(15);
  static const int MoneroTransactionSetOutputAck_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSetOutputAck, tx_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSetOutputAck, vouti_hmac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSetOutputAck, rsig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSetOutputAck, out_pk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSetOutputAck, ecdh_info_),
  };
  MoneroTransactionSetOutputAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroTransactionSetOutputAck_descriptor_,
      MoneroTransactionSetOutputAck::default_instance_,
      MoneroTransactionSetOutputAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSetOutputAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSetOutputAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroTransactionSetOutputAck));
  MoneroTransactionAllOutSetRequest_descriptor_ = file->message_type(16);
  static const int MoneroTransactionAllOutSetRequest_offsets_[1] = {
  };
  MoneroTransactionAllOutSetRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroTransactionAllOutSetRequest_descriptor_,
      MoneroTransactionAllOutSetRequest::default_instance_,
      MoneroTransactionAllOutSetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionAllOutSetRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionAllOutSetRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroTransactionAllOutSetRequest));
  MoneroTransactionAllOutSetAck_descriptor_ = file->message_type(17);
  static const int MoneroTransactionAllOutSetAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionAllOutSetAck, extra_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionAllOutSetAck, tx_prefix_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionAllOutSetAck, rv_),
  };
  MoneroTransactionAllOutSetAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroTransactionAllOutSetAck_descriptor_,
      MoneroTransactionAllOutSetAck::default_instance_,
      MoneroTransactionAllOutSetAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionAllOutSetAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionAllOutSetAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroTransactionAllOutSetAck));
  MoneroTransactionAllOutSetAck_MoneroRingCtSig_descriptor_ = MoneroTransactionAllOutSetAck_descriptor_->nested_type(0);
  static const int MoneroTransactionAllOutSetAck_MoneroRingCtSig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionAllOutSetAck_MoneroRingCtSig, txn_fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionAllOutSetAck_MoneroRingCtSig, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionAllOutSetAck_MoneroRingCtSig, rv_type_),
  };
  MoneroTransactionAllOutSetAck_MoneroRingCtSig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroTransactionAllOutSetAck_MoneroRingCtSig_descriptor_,
      MoneroTransactionAllOutSetAck_MoneroRingCtSig::default_instance_,
      MoneroTransactionAllOutSetAck_MoneroRingCtSig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionAllOutSetAck_MoneroRingCtSig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionAllOutSetAck_MoneroRingCtSig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroTransactionAllOutSetAck_MoneroRingCtSig));
  MoneroTransactionMlsagDoneRequest_descriptor_ = file->message_type(18);
  static const int MoneroTransactionMlsagDoneRequest_offsets_[1] = {
  };
  MoneroTransactionMlsagDoneRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroTransactionMlsagDoneRequest_descriptor_,
      MoneroTransactionMlsagDoneRequest::default_instance_,
      MoneroTransactionMlsagDoneRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionMlsagDoneRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionMlsagDoneRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroTransactionMlsagDoneRequest));
  MoneroTransactionMlsagDoneAck_descriptor_ = file->message_type(19);
  static const int MoneroTransactionMlsagDoneAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionMlsagDoneAck, full_message_hash_),
  };
  MoneroTransactionMlsagDoneAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroTransactionMlsagDoneAck_descriptor_,
      MoneroTransactionMlsagDoneAck::default_instance_,
      MoneroTransactionMlsagDoneAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionMlsagDoneAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionMlsagDoneAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroTransactionMlsagDoneAck));
  MoneroTransactionSignInputRequest_descriptor_ = file->message_type(20);
  static const int MoneroTransactionSignInputRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSignInputRequest, src_entr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSignInputRequest, vini_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSignInputRequest, vini_hmac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSignInputRequest, pseudo_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSignInputRequest, pseudo_out_hmac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSignInputRequest, alpha_enc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSignInputRequest, spend_enc_),
  };
  MoneroTransactionSignInputRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroTransactionSignInputRequest_descriptor_,
      MoneroTransactionSignInputRequest::default_instance_,
      MoneroTransactionSignInputRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSignInputRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSignInputRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroTransactionSignInputRequest));
  MoneroTransactionSignInputAck_descriptor_ = file->message_type(21);
  static const int MoneroTransactionSignInputAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSignInputAck, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSignInputAck, cout_),
  };
  MoneroTransactionSignInputAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroTransactionSignInputAck_descriptor_,
      MoneroTransactionSignInputAck::default_instance_,
      MoneroTransactionSignInputAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSignInputAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSignInputAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroTransactionSignInputAck));
  MoneroTransactionFinalRequest_descriptor_ = file->message_type(22);
  static const int MoneroTransactionFinalRequest_offsets_[1] = {
  };
  MoneroTransactionFinalRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroTransactionFinalRequest_descriptor_,
      MoneroTransactionFinalRequest::default_instance_,
      MoneroTransactionFinalRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionFinalRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionFinalRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroTransactionFinalRequest));
  MoneroTransactionFinalAck_descriptor_ = file->message_type(23);
  static const int MoneroTransactionFinalAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionFinalAck, cout_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionFinalAck, salt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionFinalAck, rand_mult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionFinalAck, tx_enc_keys_),
  };
  MoneroTransactionFinalAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroTransactionFinalAck_descriptor_,
      MoneroTransactionFinalAck::default_instance_,
      MoneroTransactionFinalAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionFinalAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionFinalAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroTransactionFinalAck));
  MoneroTransactionSignRequest_descriptor_ = file->message_type(24);
  static const int MoneroTransactionSignRequest_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSignRequest, init_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSignRequest, set_input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSignRequest, input_permutation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSignRequest, input_vini_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSignRequest, set_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSignRequest, all_out_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSignRequest, mlsag_done_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSignRequest, sign_input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSignRequest, final_msg_),
  };
  MoneroTransactionSignRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroTransactionSignRequest_descriptor_,
      MoneroTransactionSignRequest::default_instance_,
      MoneroTransactionSignRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSignRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroTransactionSignRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroTransactionSignRequest));
  MoneroKeyImageExportInitRequest_descriptor_ = file->message_type(25);
  static const int MoneroKeyImageExportInitRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageExportInitRequest, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageExportInitRequest, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageExportInitRequest, address_n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageExportInitRequest, network_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageExportInitRequest, subs_),
  };
  MoneroKeyImageExportInitRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroKeyImageExportInitRequest_descriptor_,
      MoneroKeyImageExportInitRequest::default_instance_,
      MoneroKeyImageExportInitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageExportInitRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageExportInitRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroKeyImageExportInitRequest));
  MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList_descriptor_ = MoneroKeyImageExportInitRequest_descriptor_->nested_type(0);
  static const int MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList, minor_indices_),
  };
  MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList_descriptor_,
      MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::default_instance_,
      MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList));
  MoneroKeyImageExportInitAck_descriptor_ = file->message_type(26);
  static const int MoneroKeyImageExportInitAck_offsets_[1] = {
  };
  MoneroKeyImageExportInitAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroKeyImageExportInitAck_descriptor_,
      MoneroKeyImageExportInitAck::default_instance_,
      MoneroKeyImageExportInitAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageExportInitAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageExportInitAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroKeyImageExportInitAck));
  MoneroKeyImageSyncStepRequest_descriptor_ = file->message_type(27);
  static const int MoneroKeyImageSyncStepRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageSyncStepRequest, tdis_),
  };
  MoneroKeyImageSyncStepRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroKeyImageSyncStepRequest_descriptor_,
      MoneroKeyImageSyncStepRequest::default_instance_,
      MoneroKeyImageSyncStepRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageSyncStepRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageSyncStepRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroKeyImageSyncStepRequest));
  MoneroKeyImageSyncStepRequest_MoneroTransferDetails_descriptor_ = MoneroKeyImageSyncStepRequest_descriptor_->nested_type(0);
  static const int MoneroKeyImageSyncStepRequest_MoneroTransferDetails_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageSyncStepRequest_MoneroTransferDetails, out_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageSyncStepRequest_MoneroTransferDetails, tx_pub_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageSyncStepRequest_MoneroTransferDetails, additional_tx_pub_keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageSyncStepRequest_MoneroTransferDetails, internal_output_index_),
  };
  MoneroKeyImageSyncStepRequest_MoneroTransferDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroKeyImageSyncStepRequest_MoneroTransferDetails_descriptor_,
      MoneroKeyImageSyncStepRequest_MoneroTransferDetails::default_instance_,
      MoneroKeyImageSyncStepRequest_MoneroTransferDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageSyncStepRequest_MoneroTransferDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageSyncStepRequest_MoneroTransferDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroKeyImageSyncStepRequest_MoneroTransferDetails));
  MoneroKeyImageSyncStepAck_descriptor_ = file->message_type(28);
  static const int MoneroKeyImageSyncStepAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageSyncStepAck, kis_),
  };
  MoneroKeyImageSyncStepAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroKeyImageSyncStepAck_descriptor_,
      MoneroKeyImageSyncStepAck::default_instance_,
      MoneroKeyImageSyncStepAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageSyncStepAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageSyncStepAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroKeyImageSyncStepAck));
  MoneroKeyImageSyncStepAck_MoneroExportedKeyImage_descriptor_ = MoneroKeyImageSyncStepAck_descriptor_->nested_type(0);
  static const int MoneroKeyImageSyncStepAck_MoneroExportedKeyImage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageSyncStepAck_MoneroExportedKeyImage, iv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageSyncStepAck_MoneroExportedKeyImage, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageSyncStepAck_MoneroExportedKeyImage, blob_),
  };
  MoneroKeyImageSyncStepAck_MoneroExportedKeyImage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroKeyImageSyncStepAck_MoneroExportedKeyImage_descriptor_,
      MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::default_instance_,
      MoneroKeyImageSyncStepAck_MoneroExportedKeyImage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageSyncStepAck_MoneroExportedKeyImage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageSyncStepAck_MoneroExportedKeyImage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroKeyImageSyncStepAck_MoneroExportedKeyImage));
  MoneroKeyImageSyncFinalRequest_descriptor_ = file->message_type(29);
  static const int MoneroKeyImageSyncFinalRequest_offsets_[1] = {
  };
  MoneroKeyImageSyncFinalRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroKeyImageSyncFinalRequest_descriptor_,
      MoneroKeyImageSyncFinalRequest::default_instance_,
      MoneroKeyImageSyncFinalRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageSyncFinalRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageSyncFinalRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroKeyImageSyncFinalRequest));
  MoneroKeyImageSyncFinalAck_descriptor_ = file->message_type(30);
  static const int MoneroKeyImageSyncFinalAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageSyncFinalAck, enc_key_),
  };
  MoneroKeyImageSyncFinalAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroKeyImageSyncFinalAck_descriptor_,
      MoneroKeyImageSyncFinalAck::default_instance_,
      MoneroKeyImageSyncFinalAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageSyncFinalAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageSyncFinalAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroKeyImageSyncFinalAck));
  MoneroKeyImageSyncRequest_descriptor_ = file->message_type(31);
  static const int MoneroKeyImageSyncRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageSyncRequest, init_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageSyncRequest, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageSyncRequest, final_msg_),
  };
  MoneroKeyImageSyncRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneroKeyImageSyncRequest_descriptor_,
      MoneroKeyImageSyncRequest::default_instance_,
      MoneroKeyImageSyncRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageSyncRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneroKeyImageSyncRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneroKeyImageSyncRequest));
  DebugMoneroDiagRequest_descriptor_ = file->message_type(32);
  static const int DebugMoneroDiagRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugMoneroDiagRequest, ins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugMoneroDiagRequest, p1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugMoneroDiagRequest, p2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugMoneroDiagRequest, pd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugMoneroDiagRequest, data1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugMoneroDiagRequest, data2_),
  };
  DebugMoneroDiagRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DebugMoneroDiagRequest_descriptor_,
      DebugMoneroDiagRequest::default_instance_,
      DebugMoneroDiagRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugMoneroDiagRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugMoneroDiagRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DebugMoneroDiagRequest));
  DebugMoneroDiagAck_descriptor_ = file->message_type(33);
  static const int DebugMoneroDiagAck_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugMoneroDiagAck, ins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugMoneroDiagAck, p1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugMoneroDiagAck, p2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugMoneroDiagAck, pd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugMoneroDiagAck, data1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugMoneroDiagAck, data2_),
  };
  DebugMoneroDiagAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DebugMoneroDiagAck_descriptor_,
      DebugMoneroDiagAck::default_instance_,
      DebugMoneroDiagAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugMoneroDiagAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugMoneroDiagAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DebugMoneroDiagAck));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_2dmonero_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroGetAddress_descriptor_, &MoneroGetAddress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroAddress_descriptor_, &MoneroAddress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroGetWatchKey_descriptor_, &MoneroGetWatchKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroWatchKey_descriptor_, &MoneroWatchKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroTransactionDestinationEntry_descriptor_, &MoneroTransactionDestinationEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroTransactionDestinationEntry_MoneroAccountPublicAddress_descriptor_, &MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroTransactionInitRequest_descriptor_, &MoneroTransactionInitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroTransactionInitRequest_MoneroTransactionData_descriptor_, &MoneroTransactionInitRequest_MoneroTransactionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroTransactionInitAck_descriptor_, &MoneroTransactionInitAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroTransactionSourceEntry_descriptor_, &MoneroTransactionSourceEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroTransactionSourceEntry_MoneroRctKey_descriptor_, &MoneroTransactionSourceEntry_MoneroRctKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroTransactionSourceEntry_MoneroOutputEntry_descriptor_, &MoneroTransactionSourceEntry_MoneroOutputEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroTransactionSourceEntry_MoneroMultisigKLRki_descriptor_, &MoneroTransactionSourceEntry_MoneroMultisigKLRki::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroTransactionSetInputRequest_descriptor_, &MoneroTransactionSetInputRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroTransactionSetInputAck_descriptor_, &MoneroTransactionSetInputAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroTransactionInputsPermutationRequest_descriptor_, &MoneroTransactionInputsPermutationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroTransactionInputsPermutationAck_descriptor_, &MoneroTransactionInputsPermutationAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroTransactionInputViniRequest_descriptor_, &MoneroTransactionInputViniRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroTransactionInputViniAck_descriptor_, &MoneroTransactionInputViniAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroTransactionSetOutputRequest_descriptor_, &MoneroTransactionSetOutputRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroTransactionSetOutputAck_descriptor_, &MoneroTransactionSetOutputAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroTransactionAllOutSetRequest_descriptor_, &MoneroTransactionAllOutSetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroTransactionAllOutSetAck_descriptor_, &MoneroTransactionAllOutSetAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroTransactionAllOutSetAck_MoneroRingCtSig_descriptor_, &MoneroTransactionAllOutSetAck_MoneroRingCtSig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroTransactionMlsagDoneRequest_descriptor_, &MoneroTransactionMlsagDoneRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroTransactionMlsagDoneAck_descriptor_, &MoneroTransactionMlsagDoneAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroTransactionSignInputRequest_descriptor_, &MoneroTransactionSignInputRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroTransactionSignInputAck_descriptor_, &MoneroTransactionSignInputAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroTransactionFinalRequest_descriptor_, &MoneroTransactionFinalRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroTransactionFinalAck_descriptor_, &MoneroTransactionFinalAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroTransactionSignRequest_descriptor_, &MoneroTransactionSignRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroKeyImageExportInitRequest_descriptor_, &MoneroKeyImageExportInitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList_descriptor_, &MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroKeyImageExportInitAck_descriptor_, &MoneroKeyImageExportInitAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroKeyImageSyncStepRequest_descriptor_, &MoneroKeyImageSyncStepRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroKeyImageSyncStepRequest_MoneroTransferDetails_descriptor_, &MoneroKeyImageSyncStepRequest_MoneroTransferDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroKeyImageSyncStepAck_descriptor_, &MoneroKeyImageSyncStepAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroKeyImageSyncStepAck_MoneroExportedKeyImage_descriptor_, &MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroKeyImageSyncFinalRequest_descriptor_, &MoneroKeyImageSyncFinalRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroKeyImageSyncFinalAck_descriptor_, &MoneroKeyImageSyncFinalAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneroKeyImageSyncRequest_descriptor_, &MoneroKeyImageSyncRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DebugMoneroDiagRequest_descriptor_, &DebugMoneroDiagRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DebugMoneroDiagAck_descriptor_, &DebugMoneroDiagAck::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_2dmonero_2eproto() {
  delete MoneroGetAddress::default_instance_;
  delete MoneroGetAddress_reflection_;
  delete MoneroAddress::default_instance_;
  delete MoneroAddress_reflection_;
  delete MoneroGetWatchKey::default_instance_;
  delete MoneroGetWatchKey_reflection_;
  delete MoneroWatchKey::default_instance_;
  delete MoneroWatchKey_reflection_;
  delete MoneroTransactionDestinationEntry::default_instance_;
  delete MoneroTransactionDestinationEntry_reflection_;
  delete MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::default_instance_;
  delete MoneroTransactionDestinationEntry_MoneroAccountPublicAddress_reflection_;
  delete MoneroTransactionInitRequest::default_instance_;
  delete MoneroTransactionInitRequest_reflection_;
  delete MoneroTransactionInitRequest_MoneroTransactionData::default_instance_;
  delete MoneroTransactionInitRequest_MoneroTransactionData_reflection_;
  delete MoneroTransactionInitAck::default_instance_;
  delete MoneroTransactionInitAck_reflection_;
  delete MoneroTransactionSourceEntry::default_instance_;
  delete MoneroTransactionSourceEntry_reflection_;
  delete MoneroTransactionSourceEntry_MoneroRctKey::default_instance_;
  delete MoneroTransactionSourceEntry_MoneroRctKey_reflection_;
  delete MoneroTransactionSourceEntry_MoneroOutputEntry::default_instance_;
  delete MoneroTransactionSourceEntry_MoneroOutputEntry_reflection_;
  delete MoneroTransactionSourceEntry_MoneroMultisigKLRki::default_instance_;
  delete MoneroTransactionSourceEntry_MoneroMultisigKLRki_reflection_;
  delete MoneroTransactionSetInputRequest::default_instance_;
  delete MoneroTransactionSetInputRequest_reflection_;
  delete MoneroTransactionSetInputAck::default_instance_;
  delete MoneroTransactionSetInputAck_reflection_;
  delete MoneroTransactionInputsPermutationRequest::default_instance_;
  delete MoneroTransactionInputsPermutationRequest_reflection_;
  delete MoneroTransactionInputsPermutationAck::default_instance_;
  delete MoneroTransactionInputsPermutationAck_reflection_;
  delete MoneroTransactionInputViniRequest::default_instance_;
  delete MoneroTransactionInputViniRequest_reflection_;
  delete MoneroTransactionInputViniAck::default_instance_;
  delete MoneroTransactionInputViniAck_reflection_;
  delete MoneroTransactionSetOutputRequest::default_instance_;
  delete MoneroTransactionSetOutputRequest_reflection_;
  delete MoneroTransactionSetOutputAck::default_instance_;
  delete MoneroTransactionSetOutputAck_reflection_;
  delete MoneroTransactionAllOutSetRequest::default_instance_;
  delete MoneroTransactionAllOutSetRequest_reflection_;
  delete MoneroTransactionAllOutSetAck::default_instance_;
  delete MoneroTransactionAllOutSetAck_reflection_;
  delete MoneroTransactionAllOutSetAck_MoneroRingCtSig::default_instance_;
  delete MoneroTransactionAllOutSetAck_MoneroRingCtSig_reflection_;
  delete MoneroTransactionMlsagDoneRequest::default_instance_;
  delete MoneroTransactionMlsagDoneRequest_reflection_;
  delete MoneroTransactionMlsagDoneAck::default_instance_;
  delete MoneroTransactionMlsagDoneAck_reflection_;
  delete MoneroTransactionSignInputRequest::default_instance_;
  delete MoneroTransactionSignInputRequest_reflection_;
  delete MoneroTransactionSignInputAck::default_instance_;
  delete MoneroTransactionSignInputAck_reflection_;
  delete MoneroTransactionFinalRequest::default_instance_;
  delete MoneroTransactionFinalRequest_reflection_;
  delete MoneroTransactionFinalAck::default_instance_;
  delete MoneroTransactionFinalAck_reflection_;
  delete MoneroTransactionSignRequest::default_instance_;
  delete MoneroTransactionSignRequest_reflection_;
  delete MoneroKeyImageExportInitRequest::default_instance_;
  delete MoneroKeyImageExportInitRequest_reflection_;
  delete MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::default_instance_;
  delete MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList_reflection_;
  delete MoneroKeyImageExportInitAck::default_instance_;
  delete MoneroKeyImageExportInitAck_reflection_;
  delete MoneroKeyImageSyncStepRequest::default_instance_;
  delete MoneroKeyImageSyncStepRequest_reflection_;
  delete MoneroKeyImageSyncStepRequest_MoneroTransferDetails::default_instance_;
  delete MoneroKeyImageSyncStepRequest_MoneroTransferDetails_reflection_;
  delete MoneroKeyImageSyncStepAck::default_instance_;
  delete MoneroKeyImageSyncStepAck_reflection_;
  delete MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::default_instance_;
  delete MoneroKeyImageSyncStepAck_MoneroExportedKeyImage_reflection_;
  delete MoneroKeyImageSyncFinalRequest::default_instance_;
  delete MoneroKeyImageSyncFinalRequest_reflection_;
  delete MoneroKeyImageSyncFinalAck::default_instance_;
  delete MoneroKeyImageSyncFinalAck_reflection_;
  delete MoneroKeyImageSyncRequest::default_instance_;
  delete MoneroKeyImageSyncRequest_reflection_;
  delete DebugMoneroDiagRequest::default_instance_;
  delete DebugMoneroDiagRequest_reflection_;
  delete DebugMoneroDiagAck::default_instance_;
  delete DebugMoneroDiagAck_reflection_;
}

void protobuf_AddDesc_messages_2dmonero_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025messages-monero.proto\022\031hw.trezor.messa"
    "ges.monero\"q\n\020MoneroGetAddress\022\021\n\taddres"
    "s_n\030\001 \003(\r\022\024\n\014show_display\030\002 \001(\010\022\024\n\014netwo"
    "rk_type\030\003 \001(\r\022\017\n\007account\030\004 \001(\r\022\r\n\005minor\030"
    "\005 \001(\r\" \n\rMoneroAddress\022\017\n\007address\030\001 \001(\014\""
    "<\n\021MoneroGetWatchKey\022\021\n\taddress_n\030\001 \003(\r\022"
    "\024\n\014network_type\030\002 \001(\r\"4\n\016MoneroWatchKey\022"
    "\021\n\twatch_key\030\001 \001(\014\022\017\n\007address\030\002 \001(\014\"\202\002\n!"
    "MoneroTransactionDestinationEntry\022\016\n\006amo"
    "unt\030\001 \001(\004\022e\n\004addr\030\002 \001(\0132W.hw.trezor.mess"
    "ages.monero.MoneroTransactionDestination"
    "Entry.MoneroAccountPublicAddress\022\025\n\ris_s"
    "ubaddress\030\003 \001(\010\032O\n\032MoneroAccountPublicAd"
    "dress\022\030\n\020spend_public_key\030\001 \001(\014\022\027\n\017view_"
    "public_key\030\002 \001(\014\"\344\004\n\034MoneroTransactionIn"
    "itRequest\022\017\n\007version\030\001 \001(\r\022\021\n\taddress_n\030"
    "\002 \003(\r\022\024\n\014network_type\030\003 \001(\r\022_\n\010tsx_data\030"
    "\004 \001(\0132M.hw.trezor.messages.monero.Monero"
    "TransactionInitRequest.MoneroTransaction"
    "Data\032\250\003\n\025MoneroTransactionData\022\017\n\007versio"
    "n\030\001 \001(\r\022\022\n\npayment_id\030\002 \001(\014\022\023\n\013unlock_ti"
    "me\030\003 \001(\004\022M\n\007outputs\030\004 \003(\0132<.hw.trezor.me"
    "ssages.monero.MoneroTransactionDestinati"
    "onEntry\022P\n\nchange_dts\030\005 \001(\0132<.hw.trezor."
    "messages.monero.MoneroTransactionDestina"
    "tionEntry\022\022\n\nnum_inputs\030\006 \001(\r\022\r\n\005mixin\030\007"
    " \001(\r\022\013\n\003fee\030\010 \001(\004\022\017\n\007account\030\t \001(\r\022\025\n\rmi"
    "nor_indices\030\n \003(\r\022\023\n\013is_multisig\030\013 \001(\010\022\032"
    "\n\022exp_tx_prefix_hash\030\014 \001(\014\022\023\n\013use_tx_key"
    "s\030\r \003(\014\022\026\n\016is_bulletproof\030\016 \001(\010\"\210\001\n\030Mone"
    "roTransactionInitAck\022\017\n\007version\030\001 \001(\r\022\016\n"
    "\006status\030\002 \001(\r\022\021\n\tin_memory\030\003 \001(\010\022\r\n\005hmac"
    "s\030\004 \003(\014\022\023\n\013many_inputs\030\005 \001(\010\022\024\n\014many_out"
    "puts\030\006 \001(\010\"\343\004\n\034MoneroTransactionSourceEn"
    "try\022Z\n\007outputs\030\001 \003(\0132I.hw.trezor.message"
    "s.monero.MoneroTransactionSourceEntry.Mo"
    "neroOutputEntry\022\023\n\013real_output\030\002 \001(\004\022\027\n\017"
    "real_out_tx_key\030\003 \001(\014\022#\n\033real_out_additi"
    "onal_tx_keys\030\004 \003(\014\022\037\n\027real_output_in_tx_"
    "index\030\005 \001(\004\022\016\n\006amount\030\006 \001(\004\022\013\n\003rct\030\007 \001(\010"
    "\022\014\n\004mask\030\010 \001(\014\022c\n\016multisig_kLRki\030\t \001(\0132K"
    ".hw.trezor.messages.monero.MoneroTransac"
    "tionSourceEntry.MoneroMultisigKLRki\032*\n\014M"
    "oneroRctKey\022\014\n\004dest\030\001 \001(\014\022\014\n\004mask\030\002 \001(\014\032"
    "s\n\021MoneroOutputEntry\022\013\n\003idx\030\001 \001(\004\022Q\n\003key"
    "\030\002 \001(\0132D.hw.trezor.messages.monero.Moner"
    "oTransactionSourceEntry.MoneroRctKey\032B\n\023"
    "MoneroMultisigKLRki\022\t\n\001K\030\001 \001(\014\022\t\n\001L\030\002 \001("
    "\014\022\t\n\001R\030\003 \001(\014\022\n\n\002ki\030\004 \001(\014\"~\n MoneroTransa"
    "ctionSetInputRequest\022\017\n\007version\030\001 \001(\r\022I\n"
    "\010src_entr\030\002 \001(\01327.hw.trezor.messages.mon"
    "ero.MoneroTransactionSourceEntry\"\222\001\n\034Mon"
    "eroTransactionSetInputAck\022\014\n\004vini\030\001 \001(\014\022"
    "\021\n\tvini_hmac\030\002 \001(\014\022\022\n\npseudo_out\030\003 \001(\014\022\027"
    "\n\017pseudo_out_hmac\030\004 \001(\014\022\021\n\talpha_enc\030\005 \001"
    "(\014\022\021\n\tspend_enc\030\006 \001(\014\"9\n)MoneroTransacti"
    "onInputsPermutationRequest\022\014\n\004perm\030\001 \003(\r"
    "\"\'\n%MoneroTransactionInputsPermutationAc"
    "k\"\274\001\n!MoneroTransactionInputViniRequest\022"
    "I\n\010src_entr\030\001 \001(\01327.hw.trezor.messages.m"
    "onero.MoneroTransactionSourceEntry\022\014\n\004vi"
    "ni\030\002 \001(\014\022\021\n\tvini_hmac\030\003 \001(\014\022\022\n\npseudo_ou"
    "t\030\004 \001(\014\022\027\n\017pseudo_out_hmac\030\005 \001(\014\"\037\n\035Mone"
    "roTransactionInputViniAck\"\212\001\n!MoneroTran"
    "sactionSetOutputRequest\022N\n\010dst_entr\030\001 \001("
    "\0132<.hw.trezor.messages.monero.MoneroTran"
    "sactionDestinationEntry\022\025\n\rdst_entr_hmac"
    "\030\002 \001(\014\"t\n\035MoneroTransactionSetOutputAck\022"
    "\016\n\006tx_out\030\001 \001(\014\022\022\n\nvouti_hmac\030\002 \001(\014\022\014\n\004r"
    "sig\030\003 \001(\014\022\016\n\006out_pk\030\004 \001(\014\022\021\n\tecdh_info\030\005"
    " \001(\014\"#\n!MoneroTransactionAllOutSetReques"
    "t\"\342\001\n\035MoneroTransactionAllOutSetAck\022\r\n\005e"
    "xtra\030\001 \001(\014\022\026\n\016tx_prefix_hash\030\002 \001(\014\022T\n\002rv"
    "\030\003 \001(\0132H.hw.trezor.messages.monero.Moner"
    "oTransactionAllOutSetAck.MoneroRingCtSig"
    "\032D\n\017MoneroRingCtSig\022\017\n\007txn_fee\030\001 \001(\004\022\017\n\007"
    "message\030\002 \001(\014\022\017\n\007rv_type\030\003 \001(\r\"#\n!Monero"
    "TransactionMlsagDoneRequest\":\n\035MoneroTra"
    "nsactionMlsagDoneAck\022\031\n\021full_message_has"
    "h\030\001 \001(\014\"\342\001\n!MoneroTransactionSignInputRe"
    "quest\022I\n\010src_entr\030\001 \001(\01327.hw.trezor.mess"
    "ages.monero.MoneroTransactionSourceEntry"
    "\022\014\n\004vini\030\002 \001(\014\022\021\n\tvini_hmac\030\003 \001(\014\022\022\n\npse"
    "udo_out\030\004 \001(\014\022\027\n\017pseudo_out_hmac\030\005 \001(\014\022\021"
    "\n\talpha_enc\030\006 \001(\014\022\021\n\tspend_enc\030\007 \001(\014\"@\n\035"
    "MoneroTransactionSignInputAck\022\021\n\tsignatu"
    "re\030\001 \001(\014\022\014\n\004cout\030\002 \001(\014\"\037\n\035MoneroTransact"
    "ionFinalRequest\"c\n\031MoneroTransactionFina"
    "lAck\022\020\n\010cout_key\030\001 \001(\014\022\014\n\004salt\030\002 \001(\014\022\021\n\t"
    "rand_mult\030\003 \001(\014\022\023\n\013tx_enc_keys\030\004 \001(\014\"\376\005\n"
    "\034MoneroTransactionSignRequest\022E\n\004init\030\001 "
    "\001(\01327.hw.trezor.messages.monero.MoneroTr"
    "ansactionInitRequest\022N\n\tset_input\030\002 \001(\0132"
    ";.hw.trezor.messages.monero.MoneroTransa"
    "ctionSetInputRequest\022_\n\021input_permutatio"
    "n\030\003 \001(\0132D.hw.trezor.messages.monero.Mone"
    "roTransactionInputsPermutationRequest\022P\n"
    "\ninput_vini\030\004 \001(\0132<.hw.trezor.messages.m"
    "onero.MoneroTransactionInputViniRequest\022"
    "P\n\nset_output\030\005 \001(\0132<.hw.trezor.messages"
    ".monero.MoneroTransactionSetOutputReques"
    "t\022Q\n\013all_out_set\030\006 \001(\0132<.hw.trezor.messa"
    "ges.monero.MoneroTransactionAllOutSetReq"
    "uest\022P\n\nmlsag_done\030\007 \001(\0132<.hw.trezor.mes"
    "sages.monero.MoneroTransactionMlsagDoneR"
    "equest\022P\n\nsign_input\030\010 \001(\0132<.hw.trezor.m"
    "essages.monero.MoneroTransactionSignInpu"
    "tRequest\022K\n\tfinal_msg\030\t \001(\01328.hw.trezor."
    "messages.monero.MoneroTransactionFinalRe"
    "quest\"\222\002\n\037MoneroKeyImageExportInitReques"
    "t\022\013\n\003num\030\001 \001(\004\022\014\n\004hash\030\002 \001(\014\022\021\n\taddress_"
    "n\030\003 \003(\r\022\024\n\014network_type\030\004 \001(\r\022d\n\004subs\030\005 "
    "\003(\0132V.hw.trezor.messages.monero.MoneroKe"
    "yImageExportInitRequest.MoneroSubAddress"
    "IndicesList\032E\n\033MoneroSubAddressIndicesLi"
    "st\022\017\n\007account\030\001 \001(\r\022\025\n\rminor_indices\030\002 \003"
    "(\r\"\035\n\033MoneroKeyImageExportInitAck\"\372\001\n\035Mo"
    "neroKeyImageSyncStepRequest\022\\\n\004tdis\030\001 \003("
    "\0132N.hw.trezor.messages.monero.MoneroKeyI"
    "mageSyncStepRequest.MoneroTransferDetail"
    "s\032{\n\025MoneroTransferDetails\022\017\n\007out_key\030\001 "
    "\001(\014\022\022\n\ntx_pub_key\030\002 \001(\014\022\036\n\026additional_tx"
    "_pub_keys\030\003 \003(\014\022\035\n\025internal_output_index"
    "\030\004 \001(\004\"\266\001\n\031MoneroKeyImageSyncStepAck\022X\n\003"
    "kis\030\001 \003(\0132K.hw.trezor.messages.monero.Mo"
    "neroKeyImageSyncStepAck.MoneroExportedKe"
    "yImage\032\?\n\026MoneroExportedKeyImage\022\n\n\002iv\030\001"
    " \001(\014\022\013\n\003tag\030\002 \001(\014\022\014\n\004blob\030\003 \001(\014\" \n\036Moner"
    "oKeyImageSyncFinalRequest\"-\n\032MoneroKeyIm"
    "ageSyncFinalAck\022\017\n\007enc_key\030\001 \001(\014\"\373\001\n\031Mon"
    "eroKeyImageSyncRequest\022H\n\004init\030\001 \001(\0132:.h"
    "w.trezor.messages.monero.MoneroKeyImageE"
    "xportInitRequest\022F\n\004step\030\002 \001(\01328.hw.trez"
    "or.messages.monero.MoneroKeyImageSyncSte"
    "pRequest\022L\n\tfinal_msg\030\003 \001(\01329.hw.trezor."
    "messages.monero.MoneroKeyImageSyncFinalR"
    "equest\"g\n\026DebugMoneroDiagRequest\022\013\n\003ins\030"
    "\001 \001(\004\022\n\n\002p1\030\002 \001(\004\022\n\n\002p2\030\003 \001(\004\022\n\n\002pd\030\004 \003("
    "\004\022\r\n\005data1\030\005 \001(\014\022\r\n\005data2\030\006 \001(\014\"c\n\022Debug"
    "MoneroDiagAck\022\013\n\003ins\030\001 \001(\004\022\n\n\002p1\030\002 \001(\004\022\n"
    "\n\002p2\030\003 \001(\004\022\n\n\002pd\030\004 \003(\004\022\r\n\005data1\030\005 \001(\014\022\r\n"
    "\005data2\030\006 \001(\014B:\n#com.satoshilabs.trezor.l"
    "ib.protobufB\023TrezorMessageMonero", 5712);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages-monero.proto", &protobuf_RegisterTypes);
  MoneroGetAddress::default_instance_ = new MoneroGetAddress();
  MoneroAddress::default_instance_ = new MoneroAddress();
  MoneroGetWatchKey::default_instance_ = new MoneroGetWatchKey();
  MoneroWatchKey::default_instance_ = new MoneroWatchKey();
  MoneroTransactionDestinationEntry::default_instance_ = new MoneroTransactionDestinationEntry();
  MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::default_instance_ = new MoneroTransactionDestinationEntry_MoneroAccountPublicAddress();
  MoneroTransactionInitRequest::default_instance_ = new MoneroTransactionInitRequest();
  MoneroTransactionInitRequest_MoneroTransactionData::default_instance_ = new MoneroTransactionInitRequest_MoneroTransactionData();
  MoneroTransactionInitAck::default_instance_ = new MoneroTransactionInitAck();
  MoneroTransactionSourceEntry::default_instance_ = new MoneroTransactionSourceEntry();
  MoneroTransactionSourceEntry_MoneroRctKey::default_instance_ = new MoneroTransactionSourceEntry_MoneroRctKey();
  MoneroTransactionSourceEntry_MoneroOutputEntry::default_instance_ = new MoneroTransactionSourceEntry_MoneroOutputEntry();
  MoneroTransactionSourceEntry_MoneroMultisigKLRki::default_instance_ = new MoneroTransactionSourceEntry_MoneroMultisigKLRki();
  MoneroTransactionSetInputRequest::default_instance_ = new MoneroTransactionSetInputRequest();
  MoneroTransactionSetInputAck::default_instance_ = new MoneroTransactionSetInputAck();
  MoneroTransactionInputsPermutationRequest::default_instance_ = new MoneroTransactionInputsPermutationRequest();
  MoneroTransactionInputsPermutationAck::default_instance_ = new MoneroTransactionInputsPermutationAck();
  MoneroTransactionInputViniRequest::default_instance_ = new MoneroTransactionInputViniRequest();
  MoneroTransactionInputViniAck::default_instance_ = new MoneroTransactionInputViniAck();
  MoneroTransactionSetOutputRequest::default_instance_ = new MoneroTransactionSetOutputRequest();
  MoneroTransactionSetOutputAck::default_instance_ = new MoneroTransactionSetOutputAck();
  MoneroTransactionAllOutSetRequest::default_instance_ = new MoneroTransactionAllOutSetRequest();
  MoneroTransactionAllOutSetAck::default_instance_ = new MoneroTransactionAllOutSetAck();
  MoneroTransactionAllOutSetAck_MoneroRingCtSig::default_instance_ = new MoneroTransactionAllOutSetAck_MoneroRingCtSig();
  MoneroTransactionMlsagDoneRequest::default_instance_ = new MoneroTransactionMlsagDoneRequest();
  MoneroTransactionMlsagDoneAck::default_instance_ = new MoneroTransactionMlsagDoneAck();
  MoneroTransactionSignInputRequest::default_instance_ = new MoneroTransactionSignInputRequest();
  MoneroTransactionSignInputAck::default_instance_ = new MoneroTransactionSignInputAck();
  MoneroTransactionFinalRequest::default_instance_ = new MoneroTransactionFinalRequest();
  MoneroTransactionFinalAck::default_instance_ = new MoneroTransactionFinalAck();
  MoneroTransactionSignRequest::default_instance_ = new MoneroTransactionSignRequest();
  MoneroKeyImageExportInitRequest::default_instance_ = new MoneroKeyImageExportInitRequest();
  MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::default_instance_ = new MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList();
  MoneroKeyImageExportInitAck::default_instance_ = new MoneroKeyImageExportInitAck();
  MoneroKeyImageSyncStepRequest::default_instance_ = new MoneroKeyImageSyncStepRequest();
  MoneroKeyImageSyncStepRequest_MoneroTransferDetails::default_instance_ = new MoneroKeyImageSyncStepRequest_MoneroTransferDetails();
  MoneroKeyImageSyncStepAck::default_instance_ = new MoneroKeyImageSyncStepAck();
  MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::default_instance_ = new MoneroKeyImageSyncStepAck_MoneroExportedKeyImage();
  MoneroKeyImageSyncFinalRequest::default_instance_ = new MoneroKeyImageSyncFinalRequest();
  MoneroKeyImageSyncFinalAck::default_instance_ = new MoneroKeyImageSyncFinalAck();
  MoneroKeyImageSyncRequest::default_instance_ = new MoneroKeyImageSyncRequest();
  DebugMoneroDiagRequest::default_instance_ = new DebugMoneroDiagRequest();
  DebugMoneroDiagAck::default_instance_ = new DebugMoneroDiagAck();
  MoneroGetAddress::default_instance_->InitAsDefaultInstance();
  MoneroAddress::default_instance_->InitAsDefaultInstance();
  MoneroGetWatchKey::default_instance_->InitAsDefaultInstance();
  MoneroWatchKey::default_instance_->InitAsDefaultInstance();
  MoneroTransactionDestinationEntry::default_instance_->InitAsDefaultInstance();
  MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::default_instance_->InitAsDefaultInstance();
  MoneroTransactionInitRequest::default_instance_->InitAsDefaultInstance();
  MoneroTransactionInitRequest_MoneroTransactionData::default_instance_->InitAsDefaultInstance();
  MoneroTransactionInitAck::default_instance_->InitAsDefaultInstance();
  MoneroTransactionSourceEntry::default_instance_->InitAsDefaultInstance();
  MoneroTransactionSourceEntry_MoneroRctKey::default_instance_->InitAsDefaultInstance();
  MoneroTransactionSourceEntry_MoneroOutputEntry::default_instance_->InitAsDefaultInstance();
  MoneroTransactionSourceEntry_MoneroMultisigKLRki::default_instance_->InitAsDefaultInstance();
  MoneroTransactionSetInputRequest::default_instance_->InitAsDefaultInstance();
  MoneroTransactionSetInputAck::default_instance_->InitAsDefaultInstance();
  MoneroTransactionInputsPermutationRequest::default_instance_->InitAsDefaultInstance();
  MoneroTransactionInputsPermutationAck::default_instance_->InitAsDefaultInstance();
  MoneroTransactionInputViniRequest::default_instance_->InitAsDefaultInstance();
  MoneroTransactionInputViniAck::default_instance_->InitAsDefaultInstance();
  MoneroTransactionSetOutputRequest::default_instance_->InitAsDefaultInstance();
  MoneroTransactionSetOutputAck::default_instance_->InitAsDefaultInstance();
  MoneroTransactionAllOutSetRequest::default_instance_->InitAsDefaultInstance();
  MoneroTransactionAllOutSetAck::default_instance_->InitAsDefaultInstance();
  MoneroTransactionAllOutSetAck_MoneroRingCtSig::default_instance_->InitAsDefaultInstance();
  MoneroTransactionMlsagDoneRequest::default_instance_->InitAsDefaultInstance();
  MoneroTransactionMlsagDoneAck::default_instance_->InitAsDefaultInstance();
  MoneroTransactionSignInputRequest::default_instance_->InitAsDefaultInstance();
  MoneroTransactionSignInputAck::default_instance_->InitAsDefaultInstance();
  MoneroTransactionFinalRequest::default_instance_->InitAsDefaultInstance();
  MoneroTransactionFinalAck::default_instance_->InitAsDefaultInstance();
  MoneroTransactionSignRequest::default_instance_->InitAsDefaultInstance();
  MoneroKeyImageExportInitRequest::default_instance_->InitAsDefaultInstance();
  MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::default_instance_->InitAsDefaultInstance();
  MoneroKeyImageExportInitAck::default_instance_->InitAsDefaultInstance();
  MoneroKeyImageSyncStepRequest::default_instance_->InitAsDefaultInstance();
  MoneroKeyImageSyncStepRequest_MoneroTransferDetails::default_instance_->InitAsDefaultInstance();
  MoneroKeyImageSyncStepAck::default_instance_->InitAsDefaultInstance();
  MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::default_instance_->InitAsDefaultInstance();
  MoneroKeyImageSyncFinalRequest::default_instance_->InitAsDefaultInstance();
  MoneroKeyImageSyncFinalAck::default_instance_->InitAsDefaultInstance();
  MoneroKeyImageSyncRequest::default_instance_->InitAsDefaultInstance();
  DebugMoneroDiagRequest::default_instance_->InitAsDefaultInstance();
  DebugMoneroDiagAck::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_2dmonero_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_2dmonero_2eproto {
  StaticDescriptorInitializer_messages_2dmonero_2eproto() {
    protobuf_AddDesc_messages_2dmonero_2eproto();
  }
} static_descriptor_initializer_messages_2dmonero_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MoneroGetAddress::kAddressNFieldNumber;
const int MoneroGetAddress::kShowDisplayFieldNumber;
const int MoneroGetAddress::kNetworkTypeFieldNumber;
const int MoneroGetAddress::kAccountFieldNumber;
const int MoneroGetAddress::kMinorFieldNumber;
#endif  // !_MSC_VER

MoneroGetAddress::MoneroGetAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroGetAddress)
}

void MoneroGetAddress::InitAsDefaultInstance() {
}

MoneroGetAddress::MoneroGetAddress(const MoneroGetAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroGetAddress)
}

void MoneroGetAddress::SharedCtor() {
  _cached_size_ = 0;
  show_display_ = false;
  network_type_ = 0u;
  account_ = 0u;
  minor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroGetAddress::~MoneroGetAddress() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroGetAddress)
  SharedDtor();
}

void MoneroGetAddress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoneroGetAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroGetAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroGetAddress_descriptor_;
}

const MoneroGetAddress& MoneroGetAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroGetAddress* MoneroGetAddress::default_instance_ = NULL;

MoneroGetAddress* MoneroGetAddress::New() const {
  return new MoneroGetAddress;
}

void MoneroGetAddress::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MoneroGetAddress*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(show_display_, minor_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  address_n_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroGetAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroGetAddress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (tag == 8) {
         parse_address_n:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_address_n())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_address_n;
        if (input->ExpectTag(16)) goto parse_show_display;
        break;
      }

      // optional bool show_display = 2;
      case 2: {
        if (tag == 16) {
         parse_show_display:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_display_)));
          set_has_show_display();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_network_type;
        break;
      }

      // optional uint32 network_type = 3;
      case 3: {
        if (tag == 24) {
         parse_network_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &network_type_)));
          set_has_network_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_account;
        break;
      }

      // optional uint32 account = 4;
      case 4: {
        if (tag == 32) {
         parse_account:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_)));
          set_has_account();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_minor;
        break;
      }

      // optional uint32 minor = 5;
      case 5: {
        if (tag == 40) {
         parse_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minor_)));
          set_has_minor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroGetAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroGetAddress)
  return false;
#undef DO_
}

void MoneroGetAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroGetAddress)
  // repeated uint32 address_n = 1;
  for (int i = 0; i < this->address_n_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->address_n(i), output);
  }

  // optional bool show_display = 2;
  if (has_show_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->show_display(), output);
  }

  // optional uint32 network_type = 3;
  if (has_network_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->network_type(), output);
  }

  // optional uint32 account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->account(), output);
  }

  // optional uint32 minor = 5;
  if (has_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->minor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroGetAddress)
}

::google::protobuf::uint8* MoneroGetAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroGetAddress)
  // repeated uint32 address_n = 1;
  for (int i = 0; i < this->address_n_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->address_n(i), target);
  }

  // optional bool show_display = 2;
  if (has_show_display()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->show_display(), target);
  }

  // optional uint32 network_type = 3;
  if (has_network_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->network_type(), target);
  }

  // optional uint32 account = 4;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->account(), target);
  }

  // optional uint32 minor = 5;
  if (has_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->minor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroGetAddress)
  return target;
}

int MoneroGetAddress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool show_display = 2;
    if (has_show_display()) {
      total_size += 1 + 1;
    }

    // optional uint32 network_type = 3;
    if (has_network_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->network_type());
    }

    // optional uint32 account = 4;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account());
    }

    // optional uint32 minor = 5;
    if (has_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minor());
    }

  }
  // repeated uint32 address_n = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->address_n_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->address_n(i));
    }
    total_size += 1 * this->address_n_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroGetAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroGetAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroGetAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroGetAddress::MergeFrom(const MoneroGetAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  address_n_.MergeFrom(from.address_n_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_show_display()) {
      set_show_display(from.show_display());
    }
    if (from.has_network_type()) {
      set_network_type(from.network_type());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_minor()) {
      set_minor(from.minor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroGetAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroGetAddress::CopyFrom(const MoneroGetAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroGetAddress::IsInitialized() const {

  return true;
}

void MoneroGetAddress::Swap(MoneroGetAddress* other) {
  if (other != this) {
    address_n_.Swap(&other->address_n_);
    std::swap(show_display_, other->show_display_);
    std::swap(network_type_, other->network_type_);
    std::swap(account_, other->account_);
    std::swap(minor_, other->minor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroGetAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroGetAddress_descriptor_;
  metadata.reflection = MoneroGetAddress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneroAddress::kAddressFieldNumber;
#endif  // !_MSC_VER

MoneroAddress::MoneroAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroAddress)
}

void MoneroAddress::InitAsDefaultInstance() {
}

MoneroAddress::MoneroAddress(const MoneroAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroAddress)
}

void MoneroAddress::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroAddress::~MoneroAddress() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroAddress)
  SharedDtor();
}

void MoneroAddress::SharedDtor() {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (this != default_instance_) {
  }
}

void MoneroAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroAddress_descriptor_;
}

const MoneroAddress& MoneroAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroAddress* MoneroAddress::default_instance_ = NULL;

MoneroAddress* MoneroAddress::New() const {
  return new MoneroAddress;
}

void MoneroAddress::Clear() {
  if (has_address()) {
    if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      address_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroAddress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes address = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroAddress)
  return false;
#undef DO_
}

void MoneroAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroAddress)
  // optional bytes address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroAddress)
}

::google::protobuf::uint8* MoneroAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroAddress)
  // optional bytes address = 1;
  if (has_address()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroAddress)
  return target;
}

int MoneroAddress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroAddress::MergeFrom(const MoneroAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroAddress::CopyFrom(const MoneroAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroAddress::IsInitialized() const {

  return true;
}

void MoneroAddress::Swap(MoneroAddress* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroAddress_descriptor_;
  metadata.reflection = MoneroAddress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneroGetWatchKey::kAddressNFieldNumber;
const int MoneroGetWatchKey::kNetworkTypeFieldNumber;
#endif  // !_MSC_VER

MoneroGetWatchKey::MoneroGetWatchKey()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroGetWatchKey)
}

void MoneroGetWatchKey::InitAsDefaultInstance() {
}

MoneroGetWatchKey::MoneroGetWatchKey(const MoneroGetWatchKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroGetWatchKey)
}

void MoneroGetWatchKey::SharedCtor() {
  _cached_size_ = 0;
  network_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroGetWatchKey::~MoneroGetWatchKey() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroGetWatchKey)
  SharedDtor();
}

void MoneroGetWatchKey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoneroGetWatchKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroGetWatchKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroGetWatchKey_descriptor_;
}

const MoneroGetWatchKey& MoneroGetWatchKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroGetWatchKey* MoneroGetWatchKey::default_instance_ = NULL;

MoneroGetWatchKey* MoneroGetWatchKey::New() const {
  return new MoneroGetWatchKey;
}

void MoneroGetWatchKey::Clear() {
  network_type_ = 0u;
  address_n_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroGetWatchKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroGetWatchKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (tag == 8) {
         parse_address_n:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_address_n())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_address_n;
        if (input->ExpectTag(16)) goto parse_network_type;
        break;
      }

      // optional uint32 network_type = 2;
      case 2: {
        if (tag == 16) {
         parse_network_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &network_type_)));
          set_has_network_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroGetWatchKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroGetWatchKey)
  return false;
#undef DO_
}

void MoneroGetWatchKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroGetWatchKey)
  // repeated uint32 address_n = 1;
  for (int i = 0; i < this->address_n_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->address_n(i), output);
  }

  // optional uint32 network_type = 2;
  if (has_network_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->network_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroGetWatchKey)
}

::google::protobuf::uint8* MoneroGetWatchKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroGetWatchKey)
  // repeated uint32 address_n = 1;
  for (int i = 0; i < this->address_n_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->address_n(i), target);
  }

  // optional uint32 network_type = 2;
  if (has_network_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->network_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroGetWatchKey)
  return target;
}

int MoneroGetWatchKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 network_type = 2;
    if (has_network_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->network_type());
    }

  }
  // repeated uint32 address_n = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->address_n_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->address_n(i));
    }
    total_size += 1 * this->address_n_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroGetWatchKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroGetWatchKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroGetWatchKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroGetWatchKey::MergeFrom(const MoneroGetWatchKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  address_n_.MergeFrom(from.address_n_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_network_type()) {
      set_network_type(from.network_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroGetWatchKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroGetWatchKey::CopyFrom(const MoneroGetWatchKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroGetWatchKey::IsInitialized() const {

  return true;
}

void MoneroGetWatchKey::Swap(MoneroGetWatchKey* other) {
  if (other != this) {
    address_n_.Swap(&other->address_n_);
    std::swap(network_type_, other->network_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroGetWatchKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroGetWatchKey_descriptor_;
  metadata.reflection = MoneroGetWatchKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneroWatchKey::kWatchKeyFieldNumber;
const int MoneroWatchKey::kAddressFieldNumber;
#endif  // !_MSC_VER

MoneroWatchKey::MoneroWatchKey()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroWatchKey)
}

void MoneroWatchKey::InitAsDefaultInstance() {
}

MoneroWatchKey::MoneroWatchKey(const MoneroWatchKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroWatchKey)
}

void MoneroWatchKey::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  watch_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroWatchKey::~MoneroWatchKey() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroWatchKey)
  SharedDtor();
}

void MoneroWatchKey::SharedDtor() {
  if (watch_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete watch_key_;
  }
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (this != default_instance_) {
  }
}

void MoneroWatchKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroWatchKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroWatchKey_descriptor_;
}

const MoneroWatchKey& MoneroWatchKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroWatchKey* MoneroWatchKey::default_instance_ = NULL;

MoneroWatchKey* MoneroWatchKey::New() const {
  return new MoneroWatchKey;
}

void MoneroWatchKey::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_watch_key()) {
      if (watch_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        watch_key_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        address_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroWatchKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroWatchKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes watch_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_watch_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }

      // optional bytes address = 2;
      case 2: {
        if (tag == 18) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroWatchKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroWatchKey)
  return false;
#undef DO_
}

void MoneroWatchKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroWatchKey)
  // optional bytes watch_key = 1;
  if (has_watch_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->watch_key(), output);
  }

  // optional bytes address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroWatchKey)
}

::google::protobuf::uint8* MoneroWatchKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroWatchKey)
  // optional bytes watch_key = 1;
  if (has_watch_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->watch_key(), target);
  }

  // optional bytes address = 2;
  if (has_address()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroWatchKey)
  return target;
}

int MoneroWatchKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes watch_key = 1;
    if (has_watch_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->watch_key());
    }

    // optional bytes address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroWatchKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroWatchKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroWatchKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroWatchKey::MergeFrom(const MoneroWatchKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_watch_key()) {
      set_watch_key(from.watch_key());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroWatchKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroWatchKey::CopyFrom(const MoneroWatchKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroWatchKey::IsInitialized() const {

  return true;
}

void MoneroWatchKey::Swap(MoneroWatchKey* other) {
  if (other != this) {
    std::swap(watch_key_, other->watch_key_);
    std::swap(address_, other->address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroWatchKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroWatchKey_descriptor_;
  metadata.reflection = MoneroWatchKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::kSpendPublicKeyFieldNumber;
const int MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::kViewPublicKeyFieldNumber;
#endif  // !_MSC_VER

MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::MoneroTransactionDestinationEntry_MoneroAccountPublicAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress)
}

void MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::InitAsDefaultInstance() {
}

MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::MoneroTransactionDestinationEntry_MoneroAccountPublicAddress(const MoneroTransactionDestinationEntry_MoneroAccountPublicAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress)
}

void MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  spend_public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  view_public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::~MoneroTransactionDestinationEntry_MoneroAccountPublicAddress() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress)
  SharedDtor();
}

void MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::SharedDtor() {
  if (spend_public_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete spend_public_key_;
  }
  if (view_public_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete view_public_key_;
  }
  if (this != default_instance_) {
  }
}

void MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroTransactionDestinationEntry_MoneroAccountPublicAddress_descriptor_;
}

const MoneroTransactionDestinationEntry_MoneroAccountPublicAddress& MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroTransactionDestinationEntry_MoneroAccountPublicAddress* MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::default_instance_ = NULL;

MoneroTransactionDestinationEntry_MoneroAccountPublicAddress* MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::New() const {
  return new MoneroTransactionDestinationEntry_MoneroAccountPublicAddress;
}

void MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_spend_public_key()) {
      if (spend_public_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        spend_public_key_->clear();
      }
    }
    if (has_view_public_key()) {
      if (view_public_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        view_public_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes spend_public_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_spend_public_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_view_public_key;
        break;
      }

      // optional bytes view_public_key = 2;
      case 2: {
        if (tag == 18) {
         parse_view_public_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_view_public_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress)
  return false;
#undef DO_
}

void MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress)
  // optional bytes spend_public_key = 1;
  if (has_spend_public_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->spend_public_key(), output);
  }

  // optional bytes view_public_key = 2;
  if (has_view_public_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->view_public_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress)
}

::google::protobuf::uint8* MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress)
  // optional bytes spend_public_key = 1;
  if (has_spend_public_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->spend_public_key(), target);
  }

  // optional bytes view_public_key = 2;
  if (has_view_public_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->view_public_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress)
  return target;
}

int MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes spend_public_key = 1;
    if (has_spend_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->spend_public_key());
    }

    // optional bytes view_public_key = 2;
    if (has_view_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->view_public_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroTransactionDestinationEntry_MoneroAccountPublicAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroTransactionDestinationEntry_MoneroAccountPublicAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::MergeFrom(const MoneroTransactionDestinationEntry_MoneroAccountPublicAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spend_public_key()) {
      set_spend_public_key(from.spend_public_key());
    }
    if (from.has_view_public_key()) {
      set_view_public_key(from.view_public_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::CopyFrom(const MoneroTransactionDestinationEntry_MoneroAccountPublicAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::IsInitialized() const {

  return true;
}

void MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::Swap(MoneroTransactionDestinationEntry_MoneroAccountPublicAddress* other) {
  if (other != this) {
    std::swap(spend_public_key_, other->spend_public_key_);
    std::swap(view_public_key_, other->view_public_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroTransactionDestinationEntry_MoneroAccountPublicAddress_descriptor_;
  metadata.reflection = MoneroTransactionDestinationEntry_MoneroAccountPublicAddress_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MoneroTransactionDestinationEntry::kAmountFieldNumber;
const int MoneroTransactionDestinationEntry::kAddrFieldNumber;
const int MoneroTransactionDestinationEntry::kIsSubaddressFieldNumber;
#endif  // !_MSC_VER

MoneroTransactionDestinationEntry::MoneroTransactionDestinationEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionDestinationEntry)
}

void MoneroTransactionDestinationEntry::InitAsDefaultInstance() {
  addr_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionDestinationEntry_MoneroAccountPublicAddress*>(&::hw::trezor::messages::monero::MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::default_instance());
}

MoneroTransactionDestinationEntry::MoneroTransactionDestinationEntry(const MoneroTransactionDestinationEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionDestinationEntry)
}

void MoneroTransactionDestinationEntry::SharedCtor() {
  _cached_size_ = 0;
  amount_ = GOOGLE_ULONGLONG(0);
  addr_ = NULL;
  is_subaddress_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroTransactionDestinationEntry::~MoneroTransactionDestinationEntry() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionDestinationEntry)
  SharedDtor();
}

void MoneroTransactionDestinationEntry::SharedDtor() {
  if (this != default_instance_) {
    delete addr_;
  }
}

void MoneroTransactionDestinationEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroTransactionDestinationEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroTransactionDestinationEntry_descriptor_;
}

const MoneroTransactionDestinationEntry& MoneroTransactionDestinationEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroTransactionDestinationEntry* MoneroTransactionDestinationEntry::default_instance_ = NULL;

MoneroTransactionDestinationEntry* MoneroTransactionDestinationEntry::New() const {
  return new MoneroTransactionDestinationEntry;
}

void MoneroTransactionDestinationEntry::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_addr()) {
      if (addr_ != NULL) addr_->::hw::trezor::messages::monero::MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::Clear();
    }
    is_subaddress_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroTransactionDestinationEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroTransactionDestinationEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 amount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_addr;
        break;
      }

      // optional .hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress addr = 2;
      case 2: {
        if (tag == 18) {
         parse_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_subaddress;
        break;
      }

      // optional bool is_subaddress = 3;
      case 3: {
        if (tag == 24) {
         parse_is_subaddress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_subaddress_)));
          set_has_is_subaddress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroTransactionDestinationEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroTransactionDestinationEntry)
  return false;
#undef DO_
}

void MoneroTransactionDestinationEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroTransactionDestinationEntry)
  // optional uint64 amount = 1;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->amount(), output);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress addr = 2;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->addr(), output);
  }

  // optional bool is_subaddress = 3;
  if (has_is_subaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_subaddress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroTransactionDestinationEntry)
}

::google::protobuf::uint8* MoneroTransactionDestinationEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionDestinationEntry)
  // optional uint64 amount = 1;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->amount(), target);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress addr = 2;
  if (has_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->addr(), target);
  }

  // optional bool is_subaddress = 3;
  if (has_is_subaddress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_subaddress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionDestinationEntry)
  return target;
}

int MoneroTransactionDestinationEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 amount = 1;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional .hw.trezor.messages.monero.MoneroTransactionDestinationEntry.MoneroAccountPublicAddress addr = 2;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addr());
    }

    // optional bool is_subaddress = 3;
    if (has_is_subaddress()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroTransactionDestinationEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroTransactionDestinationEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroTransactionDestinationEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroTransactionDestinationEntry::MergeFrom(const MoneroTransactionDestinationEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_addr()) {
      mutable_addr()->::hw::trezor::messages::monero::MoneroTransactionDestinationEntry_MoneroAccountPublicAddress::MergeFrom(from.addr());
    }
    if (from.has_is_subaddress()) {
      set_is_subaddress(from.is_subaddress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroTransactionDestinationEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionDestinationEntry::CopyFrom(const MoneroTransactionDestinationEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionDestinationEntry::IsInitialized() const {

  return true;
}

void MoneroTransactionDestinationEntry::Swap(MoneroTransactionDestinationEntry* other) {
  if (other != this) {
    std::swap(amount_, other->amount_);
    std::swap(addr_, other->addr_);
    std::swap(is_subaddress_, other->is_subaddress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroTransactionDestinationEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroTransactionDestinationEntry_descriptor_;
  metadata.reflection = MoneroTransactionDestinationEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneroTransactionInitRequest_MoneroTransactionData::kVersionFieldNumber;
const int MoneroTransactionInitRequest_MoneroTransactionData::kPaymentIdFieldNumber;
const int MoneroTransactionInitRequest_MoneroTransactionData::kUnlockTimeFieldNumber;
const int MoneroTransactionInitRequest_MoneroTransactionData::kOutputsFieldNumber;
const int MoneroTransactionInitRequest_MoneroTransactionData::kChangeDtsFieldNumber;
const int MoneroTransactionInitRequest_MoneroTransactionData::kNumInputsFieldNumber;
const int MoneroTransactionInitRequest_MoneroTransactionData::kMixinFieldNumber;
const int MoneroTransactionInitRequest_MoneroTransactionData::kFeeFieldNumber;
const int MoneroTransactionInitRequest_MoneroTransactionData::kAccountFieldNumber;
const int MoneroTransactionInitRequest_MoneroTransactionData::kMinorIndicesFieldNumber;
const int MoneroTransactionInitRequest_MoneroTransactionData::kIsMultisigFieldNumber;
const int MoneroTransactionInitRequest_MoneroTransactionData::kExpTxPrefixHashFieldNumber;
const int MoneroTransactionInitRequest_MoneroTransactionData::kUseTxKeysFieldNumber;
const int MoneroTransactionInitRequest_MoneroTransactionData::kIsBulletproofFieldNumber;
#endif  // !_MSC_VER

MoneroTransactionInitRequest_MoneroTransactionData::MoneroTransactionInitRequest_MoneroTransactionData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData)
}

void MoneroTransactionInitRequest_MoneroTransactionData::InitAsDefaultInstance() {
  change_dts_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionDestinationEntry*>(&::hw::trezor::messages::monero::MoneroTransactionDestinationEntry::default_instance());
}

MoneroTransactionInitRequest_MoneroTransactionData::MoneroTransactionInitRequest_MoneroTransactionData(const MoneroTransactionInitRequest_MoneroTransactionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData)
}

void MoneroTransactionInitRequest_MoneroTransactionData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0u;
  payment_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unlock_time_ = GOOGLE_ULONGLONG(0);
  change_dts_ = NULL;
  num_inputs_ = 0u;
  mixin_ = 0u;
  fee_ = GOOGLE_ULONGLONG(0);
  account_ = 0u;
  is_multisig_ = false;
  exp_tx_prefix_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_bulletproof_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroTransactionInitRequest_MoneroTransactionData::~MoneroTransactionInitRequest_MoneroTransactionData() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData)
  SharedDtor();
}

void MoneroTransactionInitRequest_MoneroTransactionData::SharedDtor() {
  if (payment_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete payment_id_;
  }
  if (exp_tx_prefix_hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exp_tx_prefix_hash_;
  }
  if (this != default_instance_) {
    delete change_dts_;
  }
}

void MoneroTransactionInitRequest_MoneroTransactionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroTransactionInitRequest_MoneroTransactionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroTransactionInitRequest_MoneroTransactionData_descriptor_;
}

const MoneroTransactionInitRequest_MoneroTransactionData& MoneroTransactionInitRequest_MoneroTransactionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroTransactionInitRequest_MoneroTransactionData* MoneroTransactionInitRequest_MoneroTransactionData::default_instance_ = NULL;

MoneroTransactionInitRequest_MoneroTransactionData* MoneroTransactionInitRequest_MoneroTransactionData::New() const {
  return new MoneroTransactionInitRequest_MoneroTransactionData;
}

void MoneroTransactionInitRequest_MoneroTransactionData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MoneroTransactionInitRequest_MoneroTransactionData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(unlock_time_, num_inputs_);
    ZR_(fee_, mixin_);
    if (has_payment_id()) {
      if (payment_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        payment_id_->clear();
      }
    }
    if (has_change_dts()) {
      if (change_dts_ != NULL) change_dts_->::hw::trezor::messages::monero::MoneroTransactionDestinationEntry::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 11520) {
    ZR_(is_multisig_, is_bulletproof_);
    account_ = 0u;
    if (has_exp_tx_prefix_hash()) {
      if (exp_tx_prefix_hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exp_tx_prefix_hash_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  outputs_.Clear();
  minor_indices_.Clear();
  use_tx_keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroTransactionInitRequest_MoneroTransactionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_payment_id;
        break;
      }

      // optional bytes payment_id = 2;
      case 2: {
        if (tag == 18) {
         parse_payment_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payment_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unlock_time;
        break;
      }

      // optional uint64 unlock_time = 3;
      case 3: {
        if (tag == 24) {
         parse_unlock_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unlock_time_)));
          set_has_unlock_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_outputs;
        break;
      }

      // repeated .hw.trezor.messages.monero.MoneroTransactionDestinationEntry outputs = 4;
      case 4: {
        if (tag == 34) {
         parse_outputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outputs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_outputs;
        if (input->ExpectTag(42)) goto parse_change_dts;
        break;
      }

      // optional .hw.trezor.messages.monero.MoneroTransactionDestinationEntry change_dts = 5;
      case 5: {
        if (tag == 42) {
         parse_change_dts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_dts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_num_inputs;
        break;
      }

      // optional uint32 num_inputs = 6;
      case 6: {
        if (tag == 48) {
         parse_num_inputs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_inputs_)));
          set_has_num_inputs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mixin;
        break;
      }

      // optional uint32 mixin = 7;
      case 7: {
        if (tag == 56) {
         parse_mixin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mixin_)));
          set_has_mixin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_fee;
        break;
      }

      // optional uint64 fee = 8;
      case 8: {
        if (tag == 64) {
         parse_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fee_)));
          set_has_fee();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_account;
        break;
      }

      // optional uint32 account = 9;
      case 9: {
        if (tag == 72) {
         parse_account:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_)));
          set_has_account();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_minor_indices;
        break;
      }

      // repeated uint32 minor_indices = 10;
      case 10: {
        if (tag == 80) {
         parse_minor_indices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_minor_indices())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_minor_indices())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_minor_indices;
        if (input->ExpectTag(88)) goto parse_is_multisig;
        break;
      }

      // optional bool is_multisig = 11;
      case 11: {
        if (tag == 88) {
         parse_is_multisig:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_multisig_)));
          set_has_is_multisig();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_exp_tx_prefix_hash;
        break;
      }

      // optional bytes exp_tx_prefix_hash = 12;
      case 12: {
        if (tag == 98) {
         parse_exp_tx_prefix_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_exp_tx_prefix_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_use_tx_keys;
        break;
      }

      // repeated bytes use_tx_keys = 13;
      case 13: {
        if (tag == 106) {
         parse_use_tx_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_use_tx_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_use_tx_keys;
        if (input->ExpectTag(112)) goto parse_is_bulletproof;
        break;
      }

      // optional bool is_bulletproof = 14;
      case 14: {
        if (tag == 112) {
         parse_is_bulletproof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_bulletproof_)));
          set_has_is_bulletproof();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData)
  return false;
#undef DO_
}

void MoneroTransactionInitRequest_MoneroTransactionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData)
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional bytes payment_id = 2;
  if (has_payment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->payment_id(), output);
  }

  // optional uint64 unlock_time = 3;
  if (has_unlock_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->unlock_time(), output);
  }

  // repeated .hw.trezor.messages.monero.MoneroTransactionDestinationEntry outputs = 4;
  for (int i = 0; i < this->outputs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->outputs(i), output);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionDestinationEntry change_dts = 5;
  if (has_change_dts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->change_dts(), output);
  }

  // optional uint32 num_inputs = 6;
  if (has_num_inputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num_inputs(), output);
  }

  // optional uint32 mixin = 7;
  if (has_mixin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->mixin(), output);
  }

  // optional uint64 fee = 8;
  if (has_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->fee(), output);
  }

  // optional uint32 account = 9;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->account(), output);
  }

  // repeated uint32 minor_indices = 10;
  for (int i = 0; i < this->minor_indices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->minor_indices(i), output);
  }

  // optional bool is_multisig = 11;
  if (has_is_multisig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_multisig(), output);
  }

  // optional bytes exp_tx_prefix_hash = 12;
  if (has_exp_tx_prefix_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->exp_tx_prefix_hash(), output);
  }

  // repeated bytes use_tx_keys = 13;
  for (int i = 0; i < this->use_tx_keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->use_tx_keys(i), output);
  }

  // optional bool is_bulletproof = 14;
  if (has_is_bulletproof()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_bulletproof(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData)
}

::google::protobuf::uint8* MoneroTransactionInitRequest_MoneroTransactionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData)
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional bytes payment_id = 2;
  if (has_payment_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payment_id(), target);
  }

  // optional uint64 unlock_time = 3;
  if (has_unlock_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->unlock_time(), target);
  }

  // repeated .hw.trezor.messages.monero.MoneroTransactionDestinationEntry outputs = 4;
  for (int i = 0; i < this->outputs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->outputs(i), target);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionDestinationEntry change_dts = 5;
  if (has_change_dts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->change_dts(), target);
  }

  // optional uint32 num_inputs = 6;
  if (has_num_inputs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->num_inputs(), target);
  }

  // optional uint32 mixin = 7;
  if (has_mixin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->mixin(), target);
  }

  // optional uint64 fee = 8;
  if (has_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->fee(), target);
  }

  // optional uint32 account = 9;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->account(), target);
  }

  // repeated uint32 minor_indices = 10;
  for (int i = 0; i < this->minor_indices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->minor_indices(i), target);
  }

  // optional bool is_multisig = 11;
  if (has_is_multisig()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_multisig(), target);
  }

  // optional bytes exp_tx_prefix_hash = 12;
  if (has_exp_tx_prefix_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->exp_tx_prefix_hash(), target);
  }

  // repeated bytes use_tx_keys = 13;
  for (int i = 0; i < this->use_tx_keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(13, this->use_tx_keys(i), target);
  }

  // optional bool is_bulletproof = 14;
  if (has_is_bulletproof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_bulletproof(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData)
  return target;
}

int MoneroTransactionInitRequest_MoneroTransactionData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional bytes payment_id = 2;
    if (has_payment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payment_id());
    }

    // optional uint64 unlock_time = 3;
    if (has_unlock_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unlock_time());
    }

    // optional .hw.trezor.messages.monero.MoneroTransactionDestinationEntry change_dts = 5;
    if (has_change_dts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_dts());
    }

    // optional uint32 num_inputs = 6;
    if (has_num_inputs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_inputs());
    }

    // optional uint32 mixin = 7;
    if (has_mixin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mixin());
    }

    // optional uint64 fee = 8;
    if (has_fee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fee());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 account = 9;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account());
    }

    // optional bool is_multisig = 11;
    if (has_is_multisig()) {
      total_size += 1 + 1;
    }

    // optional bytes exp_tx_prefix_hash = 12;
    if (has_exp_tx_prefix_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->exp_tx_prefix_hash());
    }

    // optional bool is_bulletproof = 14;
    if (has_is_bulletproof()) {
      total_size += 1 + 1;
    }

  }
  // repeated .hw.trezor.messages.monero.MoneroTransactionDestinationEntry outputs = 4;
  total_size += 1 * this->outputs_size();
  for (int i = 0; i < this->outputs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->outputs(i));
  }

  // repeated uint32 minor_indices = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->minor_indices_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->minor_indices(i));
    }
    total_size += 1 * this->minor_indices_size() + data_size;
  }

  // repeated bytes use_tx_keys = 13;
  total_size += 1 * this->use_tx_keys_size();
  for (int i = 0; i < this->use_tx_keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->use_tx_keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroTransactionInitRequest_MoneroTransactionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroTransactionInitRequest_MoneroTransactionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroTransactionInitRequest_MoneroTransactionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroTransactionInitRequest_MoneroTransactionData::MergeFrom(const MoneroTransactionInitRequest_MoneroTransactionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  outputs_.MergeFrom(from.outputs_);
  minor_indices_.MergeFrom(from.minor_indices_);
  use_tx_keys_.MergeFrom(from.use_tx_keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_payment_id()) {
      set_payment_id(from.payment_id());
    }
    if (from.has_unlock_time()) {
      set_unlock_time(from.unlock_time());
    }
    if (from.has_change_dts()) {
      mutable_change_dts()->::hw::trezor::messages::monero::MoneroTransactionDestinationEntry::MergeFrom(from.change_dts());
    }
    if (from.has_num_inputs()) {
      set_num_inputs(from.num_inputs());
    }
    if (from.has_mixin()) {
      set_mixin(from.mixin());
    }
    if (from.has_fee()) {
      set_fee(from.fee());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_is_multisig()) {
      set_is_multisig(from.is_multisig());
    }
    if (from.has_exp_tx_prefix_hash()) {
      set_exp_tx_prefix_hash(from.exp_tx_prefix_hash());
    }
    if (from.has_is_bulletproof()) {
      set_is_bulletproof(from.is_bulletproof());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroTransactionInitRequest_MoneroTransactionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionInitRequest_MoneroTransactionData::CopyFrom(const MoneroTransactionInitRequest_MoneroTransactionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionInitRequest_MoneroTransactionData::IsInitialized() const {

  return true;
}

void MoneroTransactionInitRequest_MoneroTransactionData::Swap(MoneroTransactionInitRequest_MoneroTransactionData* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(payment_id_, other->payment_id_);
    std::swap(unlock_time_, other->unlock_time_);
    outputs_.Swap(&other->outputs_);
    std::swap(change_dts_, other->change_dts_);
    std::swap(num_inputs_, other->num_inputs_);
    std::swap(mixin_, other->mixin_);
    std::swap(fee_, other->fee_);
    std::swap(account_, other->account_);
    minor_indices_.Swap(&other->minor_indices_);
    std::swap(is_multisig_, other->is_multisig_);
    std::swap(exp_tx_prefix_hash_, other->exp_tx_prefix_hash_);
    use_tx_keys_.Swap(&other->use_tx_keys_);
    std::swap(is_bulletproof_, other->is_bulletproof_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroTransactionInitRequest_MoneroTransactionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroTransactionInitRequest_MoneroTransactionData_descriptor_;
  metadata.reflection = MoneroTransactionInitRequest_MoneroTransactionData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MoneroTransactionInitRequest::kVersionFieldNumber;
const int MoneroTransactionInitRequest::kAddressNFieldNumber;
const int MoneroTransactionInitRequest::kNetworkTypeFieldNumber;
const int MoneroTransactionInitRequest::kTsxDataFieldNumber;
#endif  // !_MSC_VER

MoneroTransactionInitRequest::MoneroTransactionInitRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionInitRequest)
}

void MoneroTransactionInitRequest::InitAsDefaultInstance() {
  tsx_data_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData*>(&::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData::default_instance());
}

MoneroTransactionInitRequest::MoneroTransactionInitRequest(const MoneroTransactionInitRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionInitRequest)
}

void MoneroTransactionInitRequest::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  network_type_ = 0u;
  tsx_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroTransactionInitRequest::~MoneroTransactionInitRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionInitRequest)
  SharedDtor();
}

void MoneroTransactionInitRequest::SharedDtor() {
  if (this != default_instance_) {
    delete tsx_data_;
  }
}

void MoneroTransactionInitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroTransactionInitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroTransactionInitRequest_descriptor_;
}

const MoneroTransactionInitRequest& MoneroTransactionInitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroTransactionInitRequest* MoneroTransactionInitRequest::default_instance_ = NULL;

MoneroTransactionInitRequest* MoneroTransactionInitRequest::New() const {
  return new MoneroTransactionInitRequest;
}

void MoneroTransactionInitRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MoneroTransactionInitRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(version_, network_type_);
    if (has_tsx_data()) {
      if (tsx_data_ != NULL) tsx_data_->::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  address_n_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroTransactionInitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroTransactionInitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_address_n;
        break;
      }

      // repeated uint32 address_n = 2;
      case 2: {
        if (tag == 16) {
         parse_address_n:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_address_n())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_address_n;
        if (input->ExpectTag(24)) goto parse_network_type;
        break;
      }

      // optional uint32 network_type = 3;
      case 3: {
        if (tag == 24) {
         parse_network_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &network_type_)));
          set_has_network_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tsx_data;
        break;
      }

      // optional .hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData tsx_data = 4;
      case 4: {
        if (tag == 34) {
         parse_tsx_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tsx_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroTransactionInitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroTransactionInitRequest)
  return false;
#undef DO_
}

void MoneroTransactionInitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroTransactionInitRequest)
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated uint32 address_n = 2;
  for (int i = 0; i < this->address_n_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->address_n(i), output);
  }

  // optional uint32 network_type = 3;
  if (has_network_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->network_type(), output);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData tsx_data = 4;
  if (has_tsx_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tsx_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroTransactionInitRequest)
}

::google::protobuf::uint8* MoneroTransactionInitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionInitRequest)
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated uint32 address_n = 2;
  for (int i = 0; i < this->address_n_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->address_n(i), target);
  }

  // optional uint32 network_type = 3;
  if (has_network_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->network_type(), target);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData tsx_data = 4;
  if (has_tsx_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tsx_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionInitRequest)
  return target;
}

int MoneroTransactionInitRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 network_type = 3;
    if (has_network_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->network_type());
    }

    // optional .hw.trezor.messages.monero.MoneroTransactionInitRequest.MoneroTransactionData tsx_data = 4;
    if (has_tsx_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tsx_data());
    }

  }
  // repeated uint32 address_n = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->address_n_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->address_n(i));
    }
    total_size += 1 * this->address_n_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroTransactionInitRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroTransactionInitRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroTransactionInitRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroTransactionInitRequest::MergeFrom(const MoneroTransactionInitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  address_n_.MergeFrom(from.address_n_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_network_type()) {
      set_network_type(from.network_type());
    }
    if (from.has_tsx_data()) {
      mutable_tsx_data()->::hw::trezor::messages::monero::MoneroTransactionInitRequest_MoneroTransactionData::MergeFrom(from.tsx_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroTransactionInitRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionInitRequest::CopyFrom(const MoneroTransactionInitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionInitRequest::IsInitialized() const {

  return true;
}

void MoneroTransactionInitRequest::Swap(MoneroTransactionInitRequest* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    address_n_.Swap(&other->address_n_);
    std::swap(network_type_, other->network_type_);
    std::swap(tsx_data_, other->tsx_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroTransactionInitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroTransactionInitRequest_descriptor_;
  metadata.reflection = MoneroTransactionInitRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneroTransactionInitAck::kVersionFieldNumber;
const int MoneroTransactionInitAck::kStatusFieldNumber;
const int MoneroTransactionInitAck::kInMemoryFieldNumber;
const int MoneroTransactionInitAck::kHmacsFieldNumber;
const int MoneroTransactionInitAck::kManyInputsFieldNumber;
const int MoneroTransactionInitAck::kManyOutputsFieldNumber;
#endif  // !_MSC_VER

MoneroTransactionInitAck::MoneroTransactionInitAck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionInitAck)
}

void MoneroTransactionInitAck::InitAsDefaultInstance() {
}

MoneroTransactionInitAck::MoneroTransactionInitAck(const MoneroTransactionInitAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionInitAck)
}

void MoneroTransactionInitAck::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0u;
  status_ = 0u;
  in_memory_ = false;
  many_inputs_ = false;
  many_outputs_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroTransactionInitAck::~MoneroTransactionInitAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionInitAck)
  SharedDtor();
}

void MoneroTransactionInitAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoneroTransactionInitAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroTransactionInitAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroTransactionInitAck_descriptor_;
}

const MoneroTransactionInitAck& MoneroTransactionInitAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroTransactionInitAck* MoneroTransactionInitAck::default_instance_ = NULL;

MoneroTransactionInitAck* MoneroTransactionInitAck::New() const {
  return new MoneroTransactionInitAck;
}

void MoneroTransactionInitAck::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MoneroTransactionInitAck*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(version_, status_);
    ZR_(in_memory_, many_outputs_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  hmacs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroTransactionInitAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroTransactionInitAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional uint32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_in_memory;
        break;
      }

      // optional bool in_memory = 3;
      case 3: {
        if (tag == 24) {
         parse_in_memory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_memory_)));
          set_has_in_memory();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hmacs;
        break;
      }

      // repeated bytes hmacs = 4;
      case 4: {
        if (tag == 34) {
         parse_hmacs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_hmacs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hmacs;
        if (input->ExpectTag(40)) goto parse_many_inputs;
        break;
      }

      // optional bool many_inputs = 5;
      case 5: {
        if (tag == 40) {
         parse_many_inputs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &many_inputs_)));
          set_has_many_inputs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_many_outputs;
        break;
      }

      // optional bool many_outputs = 6;
      case 6: {
        if (tag == 48) {
         parse_many_outputs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &many_outputs_)));
          set_has_many_outputs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroTransactionInitAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroTransactionInitAck)
  return false;
#undef DO_
}

void MoneroTransactionInitAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroTransactionInitAck)
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // optional bool in_memory = 3;
  if (has_in_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->in_memory(), output);
  }

  // repeated bytes hmacs = 4;
  for (int i = 0; i < this->hmacs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->hmacs(i), output);
  }

  // optional bool many_inputs = 5;
  if (has_many_inputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->many_inputs(), output);
  }

  // optional bool many_outputs = 6;
  if (has_many_outputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->many_outputs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroTransactionInitAck)
}

::google::protobuf::uint8* MoneroTransactionInitAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionInitAck)
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // optional bool in_memory = 3;
  if (has_in_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->in_memory(), target);
  }

  // repeated bytes hmacs = 4;
  for (int i = 0; i < this->hmacs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->hmacs(i), target);
  }

  // optional bool many_inputs = 5;
  if (has_many_inputs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->many_inputs(), target);
  }

  // optional bool many_outputs = 6;
  if (has_many_outputs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->many_outputs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionInitAck)
  return target;
}

int MoneroTransactionInitAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional bool in_memory = 3;
    if (has_in_memory()) {
      total_size += 1 + 1;
    }

    // optional bool many_inputs = 5;
    if (has_many_inputs()) {
      total_size += 1 + 1;
    }

    // optional bool many_outputs = 6;
    if (has_many_outputs()) {
      total_size += 1 + 1;
    }

  }
  // repeated bytes hmacs = 4;
  total_size += 1 * this->hmacs_size();
  for (int i = 0; i < this->hmacs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->hmacs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroTransactionInitAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroTransactionInitAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroTransactionInitAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroTransactionInitAck::MergeFrom(const MoneroTransactionInitAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  hmacs_.MergeFrom(from.hmacs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_in_memory()) {
      set_in_memory(from.in_memory());
    }
    if (from.has_many_inputs()) {
      set_many_inputs(from.many_inputs());
    }
    if (from.has_many_outputs()) {
      set_many_outputs(from.many_outputs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroTransactionInitAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionInitAck::CopyFrom(const MoneroTransactionInitAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionInitAck::IsInitialized() const {

  return true;
}

void MoneroTransactionInitAck::Swap(MoneroTransactionInitAck* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(status_, other->status_);
    std::swap(in_memory_, other->in_memory_);
    hmacs_.Swap(&other->hmacs_);
    std::swap(many_inputs_, other->many_inputs_);
    std::swap(many_outputs_, other->many_outputs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroTransactionInitAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroTransactionInitAck_descriptor_;
  metadata.reflection = MoneroTransactionInitAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneroTransactionSourceEntry_MoneroRctKey::kDestFieldNumber;
const int MoneroTransactionSourceEntry_MoneroRctKey::kMaskFieldNumber;
#endif  // !_MSC_VER

MoneroTransactionSourceEntry_MoneroRctKey::MoneroTransactionSourceEntry_MoneroRctKey()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroRctKey)
}

void MoneroTransactionSourceEntry_MoneroRctKey::InitAsDefaultInstance() {
}

MoneroTransactionSourceEntry_MoneroRctKey::MoneroTransactionSourceEntry_MoneroRctKey(const MoneroTransactionSourceEntry_MoneroRctKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroRctKey)
}

void MoneroTransactionSourceEntry_MoneroRctKey::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dest_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroTransactionSourceEntry_MoneroRctKey::~MoneroTransactionSourceEntry_MoneroRctKey() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroRctKey)
  SharedDtor();
}

void MoneroTransactionSourceEntry_MoneroRctKey::SharedDtor() {
  if (dest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dest_;
  }
  if (mask_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mask_;
  }
  if (this != default_instance_) {
  }
}

void MoneroTransactionSourceEntry_MoneroRctKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroTransactionSourceEntry_MoneroRctKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroTransactionSourceEntry_MoneroRctKey_descriptor_;
}

const MoneroTransactionSourceEntry_MoneroRctKey& MoneroTransactionSourceEntry_MoneroRctKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroTransactionSourceEntry_MoneroRctKey* MoneroTransactionSourceEntry_MoneroRctKey::default_instance_ = NULL;

MoneroTransactionSourceEntry_MoneroRctKey* MoneroTransactionSourceEntry_MoneroRctKey::New() const {
  return new MoneroTransactionSourceEntry_MoneroRctKey;
}

void MoneroTransactionSourceEntry_MoneroRctKey::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_dest()) {
      if (dest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dest_->clear();
      }
    }
    if (has_mask()) {
      if (mask_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mask_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroTransactionSourceEntry_MoneroRctKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroRctKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes dest = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mask;
        break;
      }

      // optional bytes mask = 2;
      case 2: {
        if (tag == 18) {
         parse_mask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mask()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroRctKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroRctKey)
  return false;
#undef DO_
}

void MoneroTransactionSourceEntry_MoneroRctKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroRctKey)
  // optional bytes dest = 1;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->dest(), output);
  }

  // optional bytes mask = 2;
  if (has_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mask(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroRctKey)
}

::google::protobuf::uint8* MoneroTransactionSourceEntry_MoneroRctKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroRctKey)
  // optional bytes dest = 1;
  if (has_dest()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->dest(), target);
  }

  // optional bytes mask = 2;
  if (has_mask()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mask(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroRctKey)
  return target;
}

int MoneroTransactionSourceEntry_MoneroRctKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes dest = 1;
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dest());
    }

    // optional bytes mask = 2;
    if (has_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mask());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroTransactionSourceEntry_MoneroRctKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroTransactionSourceEntry_MoneroRctKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroTransactionSourceEntry_MoneroRctKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroTransactionSourceEntry_MoneroRctKey::MergeFrom(const MoneroTransactionSourceEntry_MoneroRctKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dest()) {
      set_dest(from.dest());
    }
    if (from.has_mask()) {
      set_mask(from.mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroTransactionSourceEntry_MoneroRctKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionSourceEntry_MoneroRctKey::CopyFrom(const MoneroTransactionSourceEntry_MoneroRctKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionSourceEntry_MoneroRctKey::IsInitialized() const {

  return true;
}

void MoneroTransactionSourceEntry_MoneroRctKey::Swap(MoneroTransactionSourceEntry_MoneroRctKey* other) {
  if (other != this) {
    std::swap(dest_, other->dest_);
    std::swap(mask_, other->mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroTransactionSourceEntry_MoneroRctKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroTransactionSourceEntry_MoneroRctKey_descriptor_;
  metadata.reflection = MoneroTransactionSourceEntry_MoneroRctKey_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MoneroTransactionSourceEntry_MoneroOutputEntry::kIdxFieldNumber;
const int MoneroTransactionSourceEntry_MoneroOutputEntry::kKeyFieldNumber;
#endif  // !_MSC_VER

MoneroTransactionSourceEntry_MoneroOutputEntry::MoneroTransactionSourceEntry_MoneroOutputEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry)
}

void MoneroTransactionSourceEntry_MoneroOutputEntry::InitAsDefaultInstance() {
  key_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroRctKey*>(&::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroRctKey::default_instance());
}

MoneroTransactionSourceEntry_MoneroOutputEntry::MoneroTransactionSourceEntry_MoneroOutputEntry(const MoneroTransactionSourceEntry_MoneroOutputEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry)
}

void MoneroTransactionSourceEntry_MoneroOutputEntry::SharedCtor() {
  _cached_size_ = 0;
  idx_ = GOOGLE_ULONGLONG(0);
  key_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroTransactionSourceEntry_MoneroOutputEntry::~MoneroTransactionSourceEntry_MoneroOutputEntry() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry)
  SharedDtor();
}

void MoneroTransactionSourceEntry_MoneroOutputEntry::SharedDtor() {
  if (this != default_instance_) {
    delete key_;
  }
}

void MoneroTransactionSourceEntry_MoneroOutputEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroTransactionSourceEntry_MoneroOutputEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroTransactionSourceEntry_MoneroOutputEntry_descriptor_;
}

const MoneroTransactionSourceEntry_MoneroOutputEntry& MoneroTransactionSourceEntry_MoneroOutputEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroTransactionSourceEntry_MoneroOutputEntry* MoneroTransactionSourceEntry_MoneroOutputEntry::default_instance_ = NULL;

MoneroTransactionSourceEntry_MoneroOutputEntry* MoneroTransactionSourceEntry_MoneroOutputEntry::New() const {
  return new MoneroTransactionSourceEntry_MoneroOutputEntry;
}

void MoneroTransactionSourceEntry_MoneroOutputEntry::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    idx_ = GOOGLE_ULONGLONG(0);
    if (has_key()) {
      if (key_ != NULL) key_->::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroRctKey::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroTransactionSourceEntry_MoneroOutputEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 idx = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroRctKey key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry)
  return false;
#undef DO_
}

void MoneroTransactionSourceEntry_MoneroOutputEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry)
  // optional uint64 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->idx(), output);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroRctKey key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry)
}

::google::protobuf::uint8* MoneroTransactionSourceEntry_MoneroOutputEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry)
  // optional uint64 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->idx(), target);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroRctKey key = 2;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry)
  return target;
}

int MoneroTransactionSourceEntry_MoneroOutputEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->idx());
    }

    // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroRctKey key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroTransactionSourceEntry_MoneroOutputEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroTransactionSourceEntry_MoneroOutputEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroTransactionSourceEntry_MoneroOutputEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroTransactionSourceEntry_MoneroOutputEntry::MergeFrom(const MoneroTransactionSourceEntry_MoneroOutputEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_key()) {
      mutable_key()->::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroRctKey::MergeFrom(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroTransactionSourceEntry_MoneroOutputEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionSourceEntry_MoneroOutputEntry::CopyFrom(const MoneroTransactionSourceEntry_MoneroOutputEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionSourceEntry_MoneroOutputEntry::IsInitialized() const {

  return true;
}

void MoneroTransactionSourceEntry_MoneroOutputEntry::Swap(MoneroTransactionSourceEntry_MoneroOutputEntry* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroTransactionSourceEntry_MoneroOutputEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroTransactionSourceEntry_MoneroOutputEntry_descriptor_;
  metadata.reflection = MoneroTransactionSourceEntry_MoneroOutputEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MoneroTransactionSourceEntry_MoneroMultisigKLRki::kKFieldNumber;
const int MoneroTransactionSourceEntry_MoneroMultisigKLRki::kLFieldNumber;
const int MoneroTransactionSourceEntry_MoneroMultisigKLRki::kRFieldNumber;
const int MoneroTransactionSourceEntry_MoneroMultisigKLRki::kKiFieldNumber;
#endif  // !_MSC_VER

MoneroTransactionSourceEntry_MoneroMultisigKLRki::MoneroTransactionSourceEntry_MoneroMultisigKLRki()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki)
}

void MoneroTransactionSourceEntry_MoneroMultisigKLRki::InitAsDefaultInstance() {
}

MoneroTransactionSourceEntry_MoneroMultisigKLRki::MoneroTransactionSourceEntry_MoneroMultisigKLRki(const MoneroTransactionSourceEntry_MoneroMultisigKLRki& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki)
}

void MoneroTransactionSourceEntry_MoneroMultisigKLRki::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  k_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  l_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  r_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ki_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroTransactionSourceEntry_MoneroMultisigKLRki::~MoneroTransactionSourceEntry_MoneroMultisigKLRki() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki)
  SharedDtor();
}

void MoneroTransactionSourceEntry_MoneroMultisigKLRki::SharedDtor() {
  if (k_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete k_;
  }
  if (l_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete l_;
  }
  if (r_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete r_;
  }
  if (ki_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ki_;
  }
  if (this != default_instance_) {
  }
}

void MoneroTransactionSourceEntry_MoneroMultisigKLRki::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroTransactionSourceEntry_MoneroMultisigKLRki::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroTransactionSourceEntry_MoneroMultisigKLRki_descriptor_;
}

const MoneroTransactionSourceEntry_MoneroMultisigKLRki& MoneroTransactionSourceEntry_MoneroMultisigKLRki::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroTransactionSourceEntry_MoneroMultisigKLRki* MoneroTransactionSourceEntry_MoneroMultisigKLRki::default_instance_ = NULL;

MoneroTransactionSourceEntry_MoneroMultisigKLRki* MoneroTransactionSourceEntry_MoneroMultisigKLRki::New() const {
  return new MoneroTransactionSourceEntry_MoneroMultisigKLRki;
}

void MoneroTransactionSourceEntry_MoneroMultisigKLRki::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_k()) {
      if (k_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        k_->clear();
      }
    }
    if (has_l()) {
      if (l_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        l_->clear();
      }
    }
    if (has_r()) {
      if (r_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        r_->clear();
      }
    }
    if (has_ki()) {
      if (ki_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ki_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroTransactionSourceEntry_MoneroMultisigKLRki::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes K = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_k()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_L;
        break;
      }

      // optional bytes L = 2;
      case 2: {
        if (tag == 18) {
         parse_L:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_l()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_R;
        break;
      }

      // optional bytes R = 3;
      case 3: {
        if (tag == 26) {
         parse_R:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_r()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ki;
        break;
      }

      // optional bytes ki = 4;
      case 4: {
        if (tag == 34) {
         parse_ki:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ki()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki)
  return false;
#undef DO_
}

void MoneroTransactionSourceEntry_MoneroMultisigKLRki::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki)
  // optional bytes K = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->k(), output);
  }

  // optional bytes L = 2;
  if (has_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->l(), output);
  }

  // optional bytes R = 3;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->r(), output);
  }

  // optional bytes ki = 4;
  if (has_ki()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->ki(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki)
}

::google::protobuf::uint8* MoneroTransactionSourceEntry_MoneroMultisigKLRki::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki)
  // optional bytes K = 1;
  if (has_k()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->k(), target);
  }

  // optional bytes L = 2;
  if (has_l()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->l(), target);
  }

  // optional bytes R = 3;
  if (has_r()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->r(), target);
  }

  // optional bytes ki = 4;
  if (has_ki()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->ki(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki)
  return target;
}

int MoneroTransactionSourceEntry_MoneroMultisigKLRki::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes K = 1;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->k());
    }

    // optional bytes L = 2;
    if (has_l()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->l());
    }

    // optional bytes R = 3;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->r());
    }

    // optional bytes ki = 4;
    if (has_ki()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ki());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroTransactionSourceEntry_MoneroMultisigKLRki::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroTransactionSourceEntry_MoneroMultisigKLRki* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroTransactionSourceEntry_MoneroMultisigKLRki*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroTransactionSourceEntry_MoneroMultisigKLRki::MergeFrom(const MoneroTransactionSourceEntry_MoneroMultisigKLRki& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_l()) {
      set_l(from.l());
    }
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_ki()) {
      set_ki(from.ki());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroTransactionSourceEntry_MoneroMultisigKLRki::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionSourceEntry_MoneroMultisigKLRki::CopyFrom(const MoneroTransactionSourceEntry_MoneroMultisigKLRki& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionSourceEntry_MoneroMultisigKLRki::IsInitialized() const {

  return true;
}

void MoneroTransactionSourceEntry_MoneroMultisigKLRki::Swap(MoneroTransactionSourceEntry_MoneroMultisigKLRki* other) {
  if (other != this) {
    std::swap(k_, other->k_);
    std::swap(l_, other->l_);
    std::swap(r_, other->r_);
    std::swap(ki_, other->ki_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroTransactionSourceEntry_MoneroMultisigKLRki::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroTransactionSourceEntry_MoneroMultisigKLRki_descriptor_;
  metadata.reflection = MoneroTransactionSourceEntry_MoneroMultisigKLRki_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MoneroTransactionSourceEntry::kOutputsFieldNumber;
const int MoneroTransactionSourceEntry::kRealOutputFieldNumber;
const int MoneroTransactionSourceEntry::kRealOutTxKeyFieldNumber;
const int MoneroTransactionSourceEntry::kRealOutAdditionalTxKeysFieldNumber;
const int MoneroTransactionSourceEntry::kRealOutputInTxIndexFieldNumber;
const int MoneroTransactionSourceEntry::kAmountFieldNumber;
const int MoneroTransactionSourceEntry::kRctFieldNumber;
const int MoneroTransactionSourceEntry::kMaskFieldNumber;
const int MoneroTransactionSourceEntry::kMultisigKLRkiFieldNumber;
#endif  // !_MSC_VER

MoneroTransactionSourceEntry::MoneroTransactionSourceEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionSourceEntry)
}

void MoneroTransactionSourceEntry::InitAsDefaultInstance() {
  multisig_klrki_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroMultisigKLRki*>(&::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroMultisigKLRki::default_instance());
}

MoneroTransactionSourceEntry::MoneroTransactionSourceEntry(const MoneroTransactionSourceEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionSourceEntry)
}

void MoneroTransactionSourceEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  real_output_ = GOOGLE_ULONGLONG(0);
  real_out_tx_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_output_in_tx_index_ = GOOGLE_ULONGLONG(0);
  amount_ = GOOGLE_ULONGLONG(0);
  rct_ = false;
  mask_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  multisig_klrki_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroTransactionSourceEntry::~MoneroTransactionSourceEntry() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionSourceEntry)
  SharedDtor();
}

void MoneroTransactionSourceEntry::SharedDtor() {
  if (real_out_tx_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_out_tx_key_;
  }
  if (mask_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mask_;
  }
  if (this != default_instance_) {
    delete multisig_klrki_;
  }
}

void MoneroTransactionSourceEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroTransactionSourceEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroTransactionSourceEntry_descriptor_;
}

const MoneroTransactionSourceEntry& MoneroTransactionSourceEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroTransactionSourceEntry* MoneroTransactionSourceEntry::default_instance_ = NULL;

MoneroTransactionSourceEntry* MoneroTransactionSourceEntry::New() const {
  return new MoneroTransactionSourceEntry;
}

void MoneroTransactionSourceEntry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MoneroTransactionSourceEntry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 246) {
    ZR_(real_output_in_tx_index_, amount_);
    real_output_ = GOOGLE_ULONGLONG(0);
    if (has_real_out_tx_key()) {
      if (real_out_tx_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_out_tx_key_->clear();
      }
    }
    rct_ = false;
    if (has_mask()) {
      if (mask_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mask_->clear();
      }
    }
  }
  if (has_multisig_klrki()) {
    if (multisig_klrki_ != NULL) multisig_klrki_->::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroMultisigKLRki::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  outputs_.Clear();
  real_out_additional_tx_keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroTransactionSourceEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry outputs = 1;
      case 1: {
        if (tag == 10) {
         parse_outputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outputs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_outputs;
        if (input->ExpectTag(16)) goto parse_real_output;
        break;
      }

      // optional uint64 real_output = 2;
      case 2: {
        if (tag == 16) {
         parse_real_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &real_output_)));
          set_has_real_output();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_real_out_tx_key;
        break;
      }

      // optional bytes real_out_tx_key = 3;
      case 3: {
        if (tag == 26) {
         parse_real_out_tx_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_out_tx_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_real_out_additional_tx_keys;
        break;
      }

      // repeated bytes real_out_additional_tx_keys = 4;
      case 4: {
        if (tag == 34) {
         parse_real_out_additional_tx_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_real_out_additional_tx_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_real_out_additional_tx_keys;
        if (input->ExpectTag(40)) goto parse_real_output_in_tx_index;
        break;
      }

      // optional uint64 real_output_in_tx_index = 5;
      case 5: {
        if (tag == 40) {
         parse_real_output_in_tx_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &real_output_in_tx_index_)));
          set_has_real_output_in_tx_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 6;
      case 6: {
        if (tag == 48) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rct;
        break;
      }

      // optional bool rct = 7;
      case 7: {
        if (tag == 56) {
         parse_rct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rct_)));
          set_has_rct();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_mask;
        break;
      }

      // optional bytes mask = 8;
      case 8: {
        if (tag == 66) {
         parse_mask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mask()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_multisig_kLRki;
        break;
      }

      // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki multisig_kLRki = 9;
      case 9: {
        if (tag == 74) {
         parse_multisig_kLRki:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_multisig_klrki()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroTransactionSourceEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroTransactionSourceEntry)
  return false;
#undef DO_
}

void MoneroTransactionSourceEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry)
  // repeated .hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry outputs = 1;
  for (int i = 0; i < this->outputs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->outputs(i), output);
  }

  // optional uint64 real_output = 2;
  if (has_real_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->real_output(), output);
  }

  // optional bytes real_out_tx_key = 3;
  if (has_real_out_tx_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->real_out_tx_key(), output);
  }

  // repeated bytes real_out_additional_tx_keys = 4;
  for (int i = 0; i < this->real_out_additional_tx_keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->real_out_additional_tx_keys(i), output);
  }

  // optional uint64 real_output_in_tx_index = 5;
  if (has_real_output_in_tx_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->real_output_in_tx_index(), output);
  }

  // optional uint64 amount = 6;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->amount(), output);
  }

  // optional bool rct = 7;
  if (has_rct()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->rct(), output);
  }

  // optional bytes mask = 8;
  if (has_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->mask(), output);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki multisig_kLRki = 9;
  if (has_multisig_klrki()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->multisig_klrki(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroTransactionSourceEntry)
}

::google::protobuf::uint8* MoneroTransactionSourceEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionSourceEntry)
  // repeated .hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry outputs = 1;
  for (int i = 0; i < this->outputs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->outputs(i), target);
  }

  // optional uint64 real_output = 2;
  if (has_real_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->real_output(), target);
  }

  // optional bytes real_out_tx_key = 3;
  if (has_real_out_tx_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->real_out_tx_key(), target);
  }

  // repeated bytes real_out_additional_tx_keys = 4;
  for (int i = 0; i < this->real_out_additional_tx_keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->real_out_additional_tx_keys(i), target);
  }

  // optional uint64 real_output_in_tx_index = 5;
  if (has_real_output_in_tx_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->real_output_in_tx_index(), target);
  }

  // optional uint64 amount = 6;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->amount(), target);
  }

  // optional bool rct = 7;
  if (has_rct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->rct(), target);
  }

  // optional bytes mask = 8;
  if (has_mask()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->mask(), target);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki multisig_kLRki = 9;
  if (has_multisig_klrki()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->multisig_klrki(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionSourceEntry)
  return target;
}

int MoneroTransactionSourceEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 real_output = 2;
    if (has_real_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->real_output());
    }

    // optional bytes real_out_tx_key = 3;
    if (has_real_out_tx_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_out_tx_key());
    }

    // optional uint64 real_output_in_tx_index = 5;
    if (has_real_output_in_tx_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->real_output_in_tx_index());
    }

    // optional uint64 amount = 6;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional bool rct = 7;
    if (has_rct()) {
      total_size += 1 + 1;
    }

    // optional bytes mask = 8;
    if (has_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mask());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroMultisigKLRki multisig_kLRki = 9;
    if (has_multisig_klrki()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->multisig_klrki());
    }

  }
  // repeated .hw.trezor.messages.monero.MoneroTransactionSourceEntry.MoneroOutputEntry outputs = 1;
  total_size += 1 * this->outputs_size();
  for (int i = 0; i < this->outputs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->outputs(i));
  }

  // repeated bytes real_out_additional_tx_keys = 4;
  total_size += 1 * this->real_out_additional_tx_keys_size();
  for (int i = 0; i < this->real_out_additional_tx_keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->real_out_additional_tx_keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroTransactionSourceEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroTransactionSourceEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroTransactionSourceEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroTransactionSourceEntry::MergeFrom(const MoneroTransactionSourceEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  outputs_.MergeFrom(from.outputs_);
  real_out_additional_tx_keys_.MergeFrom(from.real_out_additional_tx_keys_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_real_output()) {
      set_real_output(from.real_output());
    }
    if (from.has_real_out_tx_key()) {
      set_real_out_tx_key(from.real_out_tx_key());
    }
    if (from.has_real_output_in_tx_index()) {
      set_real_output_in_tx_index(from.real_output_in_tx_index());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_rct()) {
      set_rct(from.rct());
    }
    if (from.has_mask()) {
      set_mask(from.mask());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_multisig_klrki()) {
      mutable_multisig_klrki()->::hw::trezor::messages::monero::MoneroTransactionSourceEntry_MoneroMultisigKLRki::MergeFrom(from.multisig_klrki());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroTransactionSourceEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionSourceEntry::CopyFrom(const MoneroTransactionSourceEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionSourceEntry::IsInitialized() const {

  return true;
}

void MoneroTransactionSourceEntry::Swap(MoneroTransactionSourceEntry* other) {
  if (other != this) {
    outputs_.Swap(&other->outputs_);
    std::swap(real_output_, other->real_output_);
    std::swap(real_out_tx_key_, other->real_out_tx_key_);
    real_out_additional_tx_keys_.Swap(&other->real_out_additional_tx_keys_);
    std::swap(real_output_in_tx_index_, other->real_output_in_tx_index_);
    std::swap(amount_, other->amount_);
    std::swap(rct_, other->rct_);
    std::swap(mask_, other->mask_);
    std::swap(multisig_klrki_, other->multisig_klrki_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroTransactionSourceEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroTransactionSourceEntry_descriptor_;
  metadata.reflection = MoneroTransactionSourceEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneroTransactionSetInputRequest::kVersionFieldNumber;
const int MoneroTransactionSetInputRequest::kSrcEntrFieldNumber;
#endif  // !_MSC_VER

MoneroTransactionSetInputRequest::MoneroTransactionSetInputRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionSetInputRequest)
}

void MoneroTransactionSetInputRequest::InitAsDefaultInstance() {
  src_entr_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionSourceEntry*>(&::hw::trezor::messages::monero::MoneroTransactionSourceEntry::default_instance());
}

MoneroTransactionSetInputRequest::MoneroTransactionSetInputRequest(const MoneroTransactionSetInputRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionSetInputRequest)
}

void MoneroTransactionSetInputRequest::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  src_entr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroTransactionSetInputRequest::~MoneroTransactionSetInputRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionSetInputRequest)
  SharedDtor();
}

void MoneroTransactionSetInputRequest::SharedDtor() {
  if (this != default_instance_) {
    delete src_entr_;
  }
}

void MoneroTransactionSetInputRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroTransactionSetInputRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroTransactionSetInputRequest_descriptor_;
}

const MoneroTransactionSetInputRequest& MoneroTransactionSetInputRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroTransactionSetInputRequest* MoneroTransactionSetInputRequest::default_instance_ = NULL;

MoneroTransactionSetInputRequest* MoneroTransactionSetInputRequest::New() const {
  return new MoneroTransactionSetInputRequest;
}

void MoneroTransactionSetInputRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    version_ = 0u;
    if (has_src_entr()) {
      if (src_entr_ != NULL) src_entr_->::hw::trezor::messages::monero::MoneroTransactionSourceEntry::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroTransactionSetInputRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroTransactionSetInputRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_src_entr;
        break;
      }

      // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry src_entr = 2;
      case 2: {
        if (tag == 18) {
         parse_src_entr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src_entr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroTransactionSetInputRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroTransactionSetInputRequest)
  return false;
#undef DO_
}

void MoneroTransactionSetInputRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroTransactionSetInputRequest)
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry src_entr = 2;
  if (has_src_entr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->src_entr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroTransactionSetInputRequest)
}

::google::protobuf::uint8* MoneroTransactionSetInputRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionSetInputRequest)
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry src_entr = 2;
  if (has_src_entr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->src_entr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionSetInputRequest)
  return target;
}

int MoneroTransactionSetInputRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry src_entr = 2;
    if (has_src_entr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src_entr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroTransactionSetInputRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroTransactionSetInputRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroTransactionSetInputRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroTransactionSetInputRequest::MergeFrom(const MoneroTransactionSetInputRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_src_entr()) {
      mutable_src_entr()->::hw::trezor::messages::monero::MoneroTransactionSourceEntry::MergeFrom(from.src_entr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroTransactionSetInputRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionSetInputRequest::CopyFrom(const MoneroTransactionSetInputRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionSetInputRequest::IsInitialized() const {

  return true;
}

void MoneroTransactionSetInputRequest::Swap(MoneroTransactionSetInputRequest* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(src_entr_, other->src_entr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroTransactionSetInputRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroTransactionSetInputRequest_descriptor_;
  metadata.reflection = MoneroTransactionSetInputRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneroTransactionSetInputAck::kViniFieldNumber;
const int MoneroTransactionSetInputAck::kViniHmacFieldNumber;
const int MoneroTransactionSetInputAck::kPseudoOutFieldNumber;
const int MoneroTransactionSetInputAck::kPseudoOutHmacFieldNumber;
const int MoneroTransactionSetInputAck::kAlphaEncFieldNumber;
const int MoneroTransactionSetInputAck::kSpendEncFieldNumber;
#endif  // !_MSC_VER

MoneroTransactionSetInputAck::MoneroTransactionSetInputAck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionSetInputAck)
}

void MoneroTransactionSetInputAck::InitAsDefaultInstance() {
}

MoneroTransactionSetInputAck::MoneroTransactionSetInputAck(const MoneroTransactionSetInputAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionSetInputAck)
}

void MoneroTransactionSetInputAck::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  vini_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vini_hmac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pseudo_out_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pseudo_out_hmac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alpha_enc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spend_enc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroTransactionSetInputAck::~MoneroTransactionSetInputAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionSetInputAck)
  SharedDtor();
}

void MoneroTransactionSetInputAck::SharedDtor() {
  if (vini_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vini_;
  }
  if (vini_hmac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vini_hmac_;
  }
  if (pseudo_out_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pseudo_out_;
  }
  if (pseudo_out_hmac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pseudo_out_hmac_;
  }
  if (alpha_enc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alpha_enc_;
  }
  if (spend_enc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete spend_enc_;
  }
  if (this != default_instance_) {
  }
}

void MoneroTransactionSetInputAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroTransactionSetInputAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroTransactionSetInputAck_descriptor_;
}

const MoneroTransactionSetInputAck& MoneroTransactionSetInputAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroTransactionSetInputAck* MoneroTransactionSetInputAck::default_instance_ = NULL;

MoneroTransactionSetInputAck* MoneroTransactionSetInputAck::New() const {
  return new MoneroTransactionSetInputAck;
}

void MoneroTransactionSetInputAck::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_vini()) {
      if (vini_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vini_->clear();
      }
    }
    if (has_vini_hmac()) {
      if (vini_hmac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vini_hmac_->clear();
      }
    }
    if (has_pseudo_out()) {
      if (pseudo_out_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pseudo_out_->clear();
      }
    }
    if (has_pseudo_out_hmac()) {
      if (pseudo_out_hmac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pseudo_out_hmac_->clear();
      }
    }
    if (has_alpha_enc()) {
      if (alpha_enc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        alpha_enc_->clear();
      }
    }
    if (has_spend_enc()) {
      if (spend_enc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        spend_enc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroTransactionSetInputAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroTransactionSetInputAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes vini = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vini()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vini_hmac;
        break;
      }

      // optional bytes vini_hmac = 2;
      case 2: {
        if (tag == 18) {
         parse_vini_hmac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vini_hmac()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pseudo_out;
        break;
      }

      // optional bytes pseudo_out = 3;
      case 3: {
        if (tag == 26) {
         parse_pseudo_out:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pseudo_out()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pseudo_out_hmac;
        break;
      }

      // optional bytes pseudo_out_hmac = 4;
      case 4: {
        if (tag == 34) {
         parse_pseudo_out_hmac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pseudo_out_hmac()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_alpha_enc;
        break;
      }

      // optional bytes alpha_enc = 5;
      case 5: {
        if (tag == 42) {
         parse_alpha_enc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_alpha_enc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_spend_enc;
        break;
      }

      // optional bytes spend_enc = 6;
      case 6: {
        if (tag == 50) {
         parse_spend_enc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_spend_enc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroTransactionSetInputAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroTransactionSetInputAck)
  return false;
#undef DO_
}

void MoneroTransactionSetInputAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroTransactionSetInputAck)
  // optional bytes vini = 1;
  if (has_vini()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->vini(), output);
  }

  // optional bytes vini_hmac = 2;
  if (has_vini_hmac()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->vini_hmac(), output);
  }

  // optional bytes pseudo_out = 3;
  if (has_pseudo_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->pseudo_out(), output);
  }

  // optional bytes pseudo_out_hmac = 4;
  if (has_pseudo_out_hmac()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->pseudo_out_hmac(), output);
  }

  // optional bytes alpha_enc = 5;
  if (has_alpha_enc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->alpha_enc(), output);
  }

  // optional bytes spend_enc = 6;
  if (has_spend_enc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->spend_enc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroTransactionSetInputAck)
}

::google::protobuf::uint8* MoneroTransactionSetInputAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionSetInputAck)
  // optional bytes vini = 1;
  if (has_vini()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->vini(), target);
  }

  // optional bytes vini_hmac = 2;
  if (has_vini_hmac()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->vini_hmac(), target);
  }

  // optional bytes pseudo_out = 3;
  if (has_pseudo_out()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->pseudo_out(), target);
  }

  // optional bytes pseudo_out_hmac = 4;
  if (has_pseudo_out_hmac()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->pseudo_out_hmac(), target);
  }

  // optional bytes alpha_enc = 5;
  if (has_alpha_enc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->alpha_enc(), target);
  }

  // optional bytes spend_enc = 6;
  if (has_spend_enc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->spend_enc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionSetInputAck)
  return target;
}

int MoneroTransactionSetInputAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes vini = 1;
    if (has_vini()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vini());
    }

    // optional bytes vini_hmac = 2;
    if (has_vini_hmac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vini_hmac());
    }

    // optional bytes pseudo_out = 3;
    if (has_pseudo_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pseudo_out());
    }

    // optional bytes pseudo_out_hmac = 4;
    if (has_pseudo_out_hmac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pseudo_out_hmac());
    }

    // optional bytes alpha_enc = 5;
    if (has_alpha_enc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->alpha_enc());
    }

    // optional bytes spend_enc = 6;
    if (has_spend_enc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->spend_enc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroTransactionSetInputAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroTransactionSetInputAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroTransactionSetInputAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroTransactionSetInputAck::MergeFrom(const MoneroTransactionSetInputAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vini()) {
      set_vini(from.vini());
    }
    if (from.has_vini_hmac()) {
      set_vini_hmac(from.vini_hmac());
    }
    if (from.has_pseudo_out()) {
      set_pseudo_out(from.pseudo_out());
    }
    if (from.has_pseudo_out_hmac()) {
      set_pseudo_out_hmac(from.pseudo_out_hmac());
    }
    if (from.has_alpha_enc()) {
      set_alpha_enc(from.alpha_enc());
    }
    if (from.has_spend_enc()) {
      set_spend_enc(from.spend_enc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroTransactionSetInputAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionSetInputAck::CopyFrom(const MoneroTransactionSetInputAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionSetInputAck::IsInitialized() const {

  return true;
}

void MoneroTransactionSetInputAck::Swap(MoneroTransactionSetInputAck* other) {
  if (other != this) {
    std::swap(vini_, other->vini_);
    std::swap(vini_hmac_, other->vini_hmac_);
    std::swap(pseudo_out_, other->pseudo_out_);
    std::swap(pseudo_out_hmac_, other->pseudo_out_hmac_);
    std::swap(alpha_enc_, other->alpha_enc_);
    std::swap(spend_enc_, other->spend_enc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroTransactionSetInputAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroTransactionSetInputAck_descriptor_;
  metadata.reflection = MoneroTransactionSetInputAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneroTransactionInputsPermutationRequest::kPermFieldNumber;
#endif  // !_MSC_VER

MoneroTransactionInputsPermutationRequest::MoneroTransactionInputsPermutationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionInputsPermutationRequest)
}

void MoneroTransactionInputsPermutationRequest::InitAsDefaultInstance() {
}

MoneroTransactionInputsPermutationRequest::MoneroTransactionInputsPermutationRequest(const MoneroTransactionInputsPermutationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionInputsPermutationRequest)
}

void MoneroTransactionInputsPermutationRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroTransactionInputsPermutationRequest::~MoneroTransactionInputsPermutationRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionInputsPermutationRequest)
  SharedDtor();
}

void MoneroTransactionInputsPermutationRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoneroTransactionInputsPermutationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroTransactionInputsPermutationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroTransactionInputsPermutationRequest_descriptor_;
}

const MoneroTransactionInputsPermutationRequest& MoneroTransactionInputsPermutationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroTransactionInputsPermutationRequest* MoneroTransactionInputsPermutationRequest::default_instance_ = NULL;

MoneroTransactionInputsPermutationRequest* MoneroTransactionInputsPermutationRequest::New() const {
  return new MoneroTransactionInputsPermutationRequest;
}

void MoneroTransactionInputsPermutationRequest::Clear() {
  perm_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroTransactionInputsPermutationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroTransactionInputsPermutationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 perm = 1;
      case 1: {
        if (tag == 8) {
         parse_perm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_perm())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_perm())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_perm;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroTransactionInputsPermutationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroTransactionInputsPermutationRequest)
  return false;
#undef DO_
}

void MoneroTransactionInputsPermutationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroTransactionInputsPermutationRequest)
  // repeated uint32 perm = 1;
  for (int i = 0; i < this->perm_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->perm(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroTransactionInputsPermutationRequest)
}

::google::protobuf::uint8* MoneroTransactionInputsPermutationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionInputsPermutationRequest)
  // repeated uint32 perm = 1;
  for (int i = 0; i < this->perm_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->perm(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionInputsPermutationRequest)
  return target;
}

int MoneroTransactionInputsPermutationRequest::ByteSize() const {
  int total_size = 0;

  // repeated uint32 perm = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->perm_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->perm(i));
    }
    total_size += 1 * this->perm_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroTransactionInputsPermutationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroTransactionInputsPermutationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroTransactionInputsPermutationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroTransactionInputsPermutationRequest::MergeFrom(const MoneroTransactionInputsPermutationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  perm_.MergeFrom(from.perm_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroTransactionInputsPermutationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionInputsPermutationRequest::CopyFrom(const MoneroTransactionInputsPermutationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionInputsPermutationRequest::IsInitialized() const {

  return true;
}

void MoneroTransactionInputsPermutationRequest::Swap(MoneroTransactionInputsPermutationRequest* other) {
  if (other != this) {
    perm_.Swap(&other->perm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroTransactionInputsPermutationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroTransactionInputsPermutationRequest_descriptor_;
  metadata.reflection = MoneroTransactionInputsPermutationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MoneroTransactionInputsPermutationAck::MoneroTransactionInputsPermutationAck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionInputsPermutationAck)
}

void MoneroTransactionInputsPermutationAck::InitAsDefaultInstance() {
}

MoneroTransactionInputsPermutationAck::MoneroTransactionInputsPermutationAck(const MoneroTransactionInputsPermutationAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionInputsPermutationAck)
}

void MoneroTransactionInputsPermutationAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroTransactionInputsPermutationAck::~MoneroTransactionInputsPermutationAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionInputsPermutationAck)
  SharedDtor();
}

void MoneroTransactionInputsPermutationAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoneroTransactionInputsPermutationAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroTransactionInputsPermutationAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroTransactionInputsPermutationAck_descriptor_;
}

const MoneroTransactionInputsPermutationAck& MoneroTransactionInputsPermutationAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroTransactionInputsPermutationAck* MoneroTransactionInputsPermutationAck::default_instance_ = NULL;

MoneroTransactionInputsPermutationAck* MoneroTransactionInputsPermutationAck::New() const {
  return new MoneroTransactionInputsPermutationAck;
}

void MoneroTransactionInputsPermutationAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroTransactionInputsPermutationAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroTransactionInputsPermutationAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroTransactionInputsPermutationAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroTransactionInputsPermutationAck)
  return false;
#undef DO_
}

void MoneroTransactionInputsPermutationAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroTransactionInputsPermutationAck)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroTransactionInputsPermutationAck)
}

::google::protobuf::uint8* MoneroTransactionInputsPermutationAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionInputsPermutationAck)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionInputsPermutationAck)
  return target;
}

int MoneroTransactionInputsPermutationAck::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroTransactionInputsPermutationAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroTransactionInputsPermutationAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroTransactionInputsPermutationAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroTransactionInputsPermutationAck::MergeFrom(const MoneroTransactionInputsPermutationAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroTransactionInputsPermutationAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionInputsPermutationAck::CopyFrom(const MoneroTransactionInputsPermutationAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionInputsPermutationAck::IsInitialized() const {

  return true;
}

void MoneroTransactionInputsPermutationAck::Swap(MoneroTransactionInputsPermutationAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroTransactionInputsPermutationAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroTransactionInputsPermutationAck_descriptor_;
  metadata.reflection = MoneroTransactionInputsPermutationAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneroTransactionInputViniRequest::kSrcEntrFieldNumber;
const int MoneroTransactionInputViniRequest::kViniFieldNumber;
const int MoneroTransactionInputViniRequest::kViniHmacFieldNumber;
const int MoneroTransactionInputViniRequest::kPseudoOutFieldNumber;
const int MoneroTransactionInputViniRequest::kPseudoOutHmacFieldNumber;
#endif  // !_MSC_VER

MoneroTransactionInputViniRequest::MoneroTransactionInputViniRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionInputViniRequest)
}

void MoneroTransactionInputViniRequest::InitAsDefaultInstance() {
  src_entr_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionSourceEntry*>(&::hw::trezor::messages::monero::MoneroTransactionSourceEntry::default_instance());
}

MoneroTransactionInputViniRequest::MoneroTransactionInputViniRequest(const MoneroTransactionInputViniRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionInputViniRequest)
}

void MoneroTransactionInputViniRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  src_entr_ = NULL;
  vini_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vini_hmac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pseudo_out_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pseudo_out_hmac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroTransactionInputViniRequest::~MoneroTransactionInputViniRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionInputViniRequest)
  SharedDtor();
}

void MoneroTransactionInputViniRequest::SharedDtor() {
  if (vini_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vini_;
  }
  if (vini_hmac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vini_hmac_;
  }
  if (pseudo_out_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pseudo_out_;
  }
  if (pseudo_out_hmac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pseudo_out_hmac_;
  }
  if (this != default_instance_) {
    delete src_entr_;
  }
}

void MoneroTransactionInputViniRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroTransactionInputViniRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroTransactionInputViniRequest_descriptor_;
}

const MoneroTransactionInputViniRequest& MoneroTransactionInputViniRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroTransactionInputViniRequest* MoneroTransactionInputViniRequest::default_instance_ = NULL;

MoneroTransactionInputViniRequest* MoneroTransactionInputViniRequest::New() const {
  return new MoneroTransactionInputViniRequest;
}

void MoneroTransactionInputViniRequest::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_src_entr()) {
      if (src_entr_ != NULL) src_entr_->::hw::trezor::messages::monero::MoneroTransactionSourceEntry::Clear();
    }
    if (has_vini()) {
      if (vini_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vini_->clear();
      }
    }
    if (has_vini_hmac()) {
      if (vini_hmac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vini_hmac_->clear();
      }
    }
    if (has_pseudo_out()) {
      if (pseudo_out_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pseudo_out_->clear();
      }
    }
    if (has_pseudo_out_hmac()) {
      if (pseudo_out_hmac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pseudo_out_hmac_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroTransactionInputViniRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroTransactionInputViniRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry src_entr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src_entr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vini;
        break;
      }

      // optional bytes vini = 2;
      case 2: {
        if (tag == 18) {
         parse_vini:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vini()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vini_hmac;
        break;
      }

      // optional bytes vini_hmac = 3;
      case 3: {
        if (tag == 26) {
         parse_vini_hmac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vini_hmac()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pseudo_out;
        break;
      }

      // optional bytes pseudo_out = 4;
      case 4: {
        if (tag == 34) {
         parse_pseudo_out:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pseudo_out()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pseudo_out_hmac;
        break;
      }

      // optional bytes pseudo_out_hmac = 5;
      case 5: {
        if (tag == 42) {
         parse_pseudo_out_hmac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pseudo_out_hmac()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroTransactionInputViniRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroTransactionInputViniRequest)
  return false;
#undef DO_
}

void MoneroTransactionInputViniRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroTransactionInputViniRequest)
  // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry src_entr = 1;
  if (has_src_entr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->src_entr(), output);
  }

  // optional bytes vini = 2;
  if (has_vini()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->vini(), output);
  }

  // optional bytes vini_hmac = 3;
  if (has_vini_hmac()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->vini_hmac(), output);
  }

  // optional bytes pseudo_out = 4;
  if (has_pseudo_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->pseudo_out(), output);
  }

  // optional bytes pseudo_out_hmac = 5;
  if (has_pseudo_out_hmac()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->pseudo_out_hmac(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroTransactionInputViniRequest)
}

::google::protobuf::uint8* MoneroTransactionInputViniRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionInputViniRequest)
  // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry src_entr = 1;
  if (has_src_entr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->src_entr(), target);
  }

  // optional bytes vini = 2;
  if (has_vini()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->vini(), target);
  }

  // optional bytes vini_hmac = 3;
  if (has_vini_hmac()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->vini_hmac(), target);
  }

  // optional bytes pseudo_out = 4;
  if (has_pseudo_out()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->pseudo_out(), target);
  }

  // optional bytes pseudo_out_hmac = 5;
  if (has_pseudo_out_hmac()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->pseudo_out_hmac(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionInputViniRequest)
  return target;
}

int MoneroTransactionInputViniRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry src_entr = 1;
    if (has_src_entr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src_entr());
    }

    // optional bytes vini = 2;
    if (has_vini()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vini());
    }

    // optional bytes vini_hmac = 3;
    if (has_vini_hmac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vini_hmac());
    }

    // optional bytes pseudo_out = 4;
    if (has_pseudo_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pseudo_out());
    }

    // optional bytes pseudo_out_hmac = 5;
    if (has_pseudo_out_hmac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pseudo_out_hmac());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroTransactionInputViniRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroTransactionInputViniRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroTransactionInputViniRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroTransactionInputViniRequest::MergeFrom(const MoneroTransactionInputViniRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_entr()) {
      mutable_src_entr()->::hw::trezor::messages::monero::MoneroTransactionSourceEntry::MergeFrom(from.src_entr());
    }
    if (from.has_vini()) {
      set_vini(from.vini());
    }
    if (from.has_vini_hmac()) {
      set_vini_hmac(from.vini_hmac());
    }
    if (from.has_pseudo_out()) {
      set_pseudo_out(from.pseudo_out());
    }
    if (from.has_pseudo_out_hmac()) {
      set_pseudo_out_hmac(from.pseudo_out_hmac());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroTransactionInputViniRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionInputViniRequest::CopyFrom(const MoneroTransactionInputViniRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionInputViniRequest::IsInitialized() const {

  return true;
}

void MoneroTransactionInputViniRequest::Swap(MoneroTransactionInputViniRequest* other) {
  if (other != this) {
    std::swap(src_entr_, other->src_entr_);
    std::swap(vini_, other->vini_);
    std::swap(vini_hmac_, other->vini_hmac_);
    std::swap(pseudo_out_, other->pseudo_out_);
    std::swap(pseudo_out_hmac_, other->pseudo_out_hmac_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroTransactionInputViniRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroTransactionInputViniRequest_descriptor_;
  metadata.reflection = MoneroTransactionInputViniRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MoneroTransactionInputViniAck::MoneroTransactionInputViniAck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionInputViniAck)
}

void MoneroTransactionInputViniAck::InitAsDefaultInstance() {
}

MoneroTransactionInputViniAck::MoneroTransactionInputViniAck(const MoneroTransactionInputViniAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionInputViniAck)
}

void MoneroTransactionInputViniAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroTransactionInputViniAck::~MoneroTransactionInputViniAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionInputViniAck)
  SharedDtor();
}

void MoneroTransactionInputViniAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoneroTransactionInputViniAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroTransactionInputViniAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroTransactionInputViniAck_descriptor_;
}

const MoneroTransactionInputViniAck& MoneroTransactionInputViniAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroTransactionInputViniAck* MoneroTransactionInputViniAck::default_instance_ = NULL;

MoneroTransactionInputViniAck* MoneroTransactionInputViniAck::New() const {
  return new MoneroTransactionInputViniAck;
}

void MoneroTransactionInputViniAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroTransactionInputViniAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroTransactionInputViniAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroTransactionInputViniAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroTransactionInputViniAck)
  return false;
#undef DO_
}

void MoneroTransactionInputViniAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroTransactionInputViniAck)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroTransactionInputViniAck)
}

::google::protobuf::uint8* MoneroTransactionInputViniAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionInputViniAck)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionInputViniAck)
  return target;
}

int MoneroTransactionInputViniAck::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroTransactionInputViniAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroTransactionInputViniAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroTransactionInputViniAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroTransactionInputViniAck::MergeFrom(const MoneroTransactionInputViniAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroTransactionInputViniAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionInputViniAck::CopyFrom(const MoneroTransactionInputViniAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionInputViniAck::IsInitialized() const {

  return true;
}

void MoneroTransactionInputViniAck::Swap(MoneroTransactionInputViniAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroTransactionInputViniAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroTransactionInputViniAck_descriptor_;
  metadata.reflection = MoneroTransactionInputViniAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneroTransactionSetOutputRequest::kDstEntrFieldNumber;
const int MoneroTransactionSetOutputRequest::kDstEntrHmacFieldNumber;
#endif  // !_MSC_VER

MoneroTransactionSetOutputRequest::MoneroTransactionSetOutputRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionSetOutputRequest)
}

void MoneroTransactionSetOutputRequest::InitAsDefaultInstance() {
  dst_entr_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionDestinationEntry*>(&::hw::trezor::messages::monero::MoneroTransactionDestinationEntry::default_instance());
}

MoneroTransactionSetOutputRequest::MoneroTransactionSetOutputRequest(const MoneroTransactionSetOutputRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionSetOutputRequest)
}

void MoneroTransactionSetOutputRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dst_entr_ = NULL;
  dst_entr_hmac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroTransactionSetOutputRequest::~MoneroTransactionSetOutputRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionSetOutputRequest)
  SharedDtor();
}

void MoneroTransactionSetOutputRequest::SharedDtor() {
  if (dst_entr_hmac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dst_entr_hmac_;
  }
  if (this != default_instance_) {
    delete dst_entr_;
  }
}

void MoneroTransactionSetOutputRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroTransactionSetOutputRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroTransactionSetOutputRequest_descriptor_;
}

const MoneroTransactionSetOutputRequest& MoneroTransactionSetOutputRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroTransactionSetOutputRequest* MoneroTransactionSetOutputRequest::default_instance_ = NULL;

MoneroTransactionSetOutputRequest* MoneroTransactionSetOutputRequest::New() const {
  return new MoneroTransactionSetOutputRequest;
}

void MoneroTransactionSetOutputRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_dst_entr()) {
      if (dst_entr_ != NULL) dst_entr_->::hw::trezor::messages::monero::MoneroTransactionDestinationEntry::Clear();
    }
    if (has_dst_entr_hmac()) {
      if (dst_entr_hmac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dst_entr_hmac_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroTransactionSetOutputRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroTransactionSetOutputRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hw.trezor.messages.monero.MoneroTransactionDestinationEntry dst_entr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dst_entr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dst_entr_hmac;
        break;
      }

      // optional bytes dst_entr_hmac = 2;
      case 2: {
        if (tag == 18) {
         parse_dst_entr_hmac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dst_entr_hmac()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroTransactionSetOutputRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroTransactionSetOutputRequest)
  return false;
#undef DO_
}

void MoneroTransactionSetOutputRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroTransactionSetOutputRequest)
  // optional .hw.trezor.messages.monero.MoneroTransactionDestinationEntry dst_entr = 1;
  if (has_dst_entr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dst_entr(), output);
  }

  // optional bytes dst_entr_hmac = 2;
  if (has_dst_entr_hmac()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->dst_entr_hmac(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroTransactionSetOutputRequest)
}

::google::protobuf::uint8* MoneroTransactionSetOutputRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionSetOutputRequest)
  // optional .hw.trezor.messages.monero.MoneroTransactionDestinationEntry dst_entr = 1;
  if (has_dst_entr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dst_entr(), target);
  }

  // optional bytes dst_entr_hmac = 2;
  if (has_dst_entr_hmac()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->dst_entr_hmac(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionSetOutputRequest)
  return target;
}

int MoneroTransactionSetOutputRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hw.trezor.messages.monero.MoneroTransactionDestinationEntry dst_entr = 1;
    if (has_dst_entr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dst_entr());
    }

    // optional bytes dst_entr_hmac = 2;
    if (has_dst_entr_hmac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dst_entr_hmac());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroTransactionSetOutputRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroTransactionSetOutputRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroTransactionSetOutputRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroTransactionSetOutputRequest::MergeFrom(const MoneroTransactionSetOutputRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst_entr()) {
      mutable_dst_entr()->::hw::trezor::messages::monero::MoneroTransactionDestinationEntry::MergeFrom(from.dst_entr());
    }
    if (from.has_dst_entr_hmac()) {
      set_dst_entr_hmac(from.dst_entr_hmac());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroTransactionSetOutputRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionSetOutputRequest::CopyFrom(const MoneroTransactionSetOutputRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionSetOutputRequest::IsInitialized() const {

  return true;
}

void MoneroTransactionSetOutputRequest::Swap(MoneroTransactionSetOutputRequest* other) {
  if (other != this) {
    std::swap(dst_entr_, other->dst_entr_);
    std::swap(dst_entr_hmac_, other->dst_entr_hmac_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroTransactionSetOutputRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroTransactionSetOutputRequest_descriptor_;
  metadata.reflection = MoneroTransactionSetOutputRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneroTransactionSetOutputAck::kTxOutFieldNumber;
const int MoneroTransactionSetOutputAck::kVoutiHmacFieldNumber;
const int MoneroTransactionSetOutputAck::kRsigFieldNumber;
const int MoneroTransactionSetOutputAck::kOutPkFieldNumber;
const int MoneroTransactionSetOutputAck::kEcdhInfoFieldNumber;
#endif  // !_MSC_VER

MoneroTransactionSetOutputAck::MoneroTransactionSetOutputAck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionSetOutputAck)
}

void MoneroTransactionSetOutputAck::InitAsDefaultInstance() {
}

MoneroTransactionSetOutputAck::MoneroTransactionSetOutputAck(const MoneroTransactionSetOutputAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionSetOutputAck)
}

void MoneroTransactionSetOutputAck::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tx_out_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vouti_hmac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rsig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  out_pk_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ecdh_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroTransactionSetOutputAck::~MoneroTransactionSetOutputAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionSetOutputAck)
  SharedDtor();
}

void MoneroTransactionSetOutputAck::SharedDtor() {
  if (tx_out_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tx_out_;
  }
  if (vouti_hmac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vouti_hmac_;
  }
  if (rsig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rsig_;
  }
  if (out_pk_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete out_pk_;
  }
  if (ecdh_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ecdh_info_;
  }
  if (this != default_instance_) {
  }
}

void MoneroTransactionSetOutputAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroTransactionSetOutputAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroTransactionSetOutputAck_descriptor_;
}

const MoneroTransactionSetOutputAck& MoneroTransactionSetOutputAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroTransactionSetOutputAck* MoneroTransactionSetOutputAck::default_instance_ = NULL;

MoneroTransactionSetOutputAck* MoneroTransactionSetOutputAck::New() const {
  return new MoneroTransactionSetOutputAck;
}

void MoneroTransactionSetOutputAck::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_tx_out()) {
      if (tx_out_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tx_out_->clear();
      }
    }
    if (has_vouti_hmac()) {
      if (vouti_hmac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vouti_hmac_->clear();
      }
    }
    if (has_rsig()) {
      if (rsig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rsig_->clear();
      }
    }
    if (has_out_pk()) {
      if (out_pk_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        out_pk_->clear();
      }
    }
    if (has_ecdh_info()) {
      if (ecdh_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ecdh_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroTransactionSetOutputAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroTransactionSetOutputAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes tx_out = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tx_out()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vouti_hmac;
        break;
      }

      // optional bytes vouti_hmac = 2;
      case 2: {
        if (tag == 18) {
         parse_vouti_hmac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vouti_hmac()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rsig;
        break;
      }

      // optional bytes rsig = 3;
      case 3: {
        if (tag == 26) {
         parse_rsig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rsig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_out_pk;
        break;
      }

      // optional bytes out_pk = 4;
      case 4: {
        if (tag == 34) {
         parse_out_pk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_out_pk()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ecdh_info;
        break;
      }

      // optional bytes ecdh_info = 5;
      case 5: {
        if (tag == 42) {
         parse_ecdh_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ecdh_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroTransactionSetOutputAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroTransactionSetOutputAck)
  return false;
#undef DO_
}

void MoneroTransactionSetOutputAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroTransactionSetOutputAck)
  // optional bytes tx_out = 1;
  if (has_tx_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tx_out(), output);
  }

  // optional bytes vouti_hmac = 2;
  if (has_vouti_hmac()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->vouti_hmac(), output);
  }

  // optional bytes rsig = 3;
  if (has_rsig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->rsig(), output);
  }

  // optional bytes out_pk = 4;
  if (has_out_pk()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->out_pk(), output);
  }

  // optional bytes ecdh_info = 5;
  if (has_ecdh_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->ecdh_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroTransactionSetOutputAck)
}

::google::protobuf::uint8* MoneroTransactionSetOutputAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionSetOutputAck)
  // optional bytes tx_out = 1;
  if (has_tx_out()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->tx_out(), target);
  }

  // optional bytes vouti_hmac = 2;
  if (has_vouti_hmac()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->vouti_hmac(), target);
  }

  // optional bytes rsig = 3;
  if (has_rsig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->rsig(), target);
  }

  // optional bytes out_pk = 4;
  if (has_out_pk()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->out_pk(), target);
  }

  // optional bytes ecdh_info = 5;
  if (has_ecdh_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->ecdh_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionSetOutputAck)
  return target;
}

int MoneroTransactionSetOutputAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes tx_out = 1;
    if (has_tx_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tx_out());
    }

    // optional bytes vouti_hmac = 2;
    if (has_vouti_hmac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vouti_hmac());
    }

    // optional bytes rsig = 3;
    if (has_rsig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rsig());
    }

    // optional bytes out_pk = 4;
    if (has_out_pk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->out_pk());
    }

    // optional bytes ecdh_info = 5;
    if (has_ecdh_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ecdh_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroTransactionSetOutputAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroTransactionSetOutputAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroTransactionSetOutputAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroTransactionSetOutputAck::MergeFrom(const MoneroTransactionSetOutputAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tx_out()) {
      set_tx_out(from.tx_out());
    }
    if (from.has_vouti_hmac()) {
      set_vouti_hmac(from.vouti_hmac());
    }
    if (from.has_rsig()) {
      set_rsig(from.rsig());
    }
    if (from.has_out_pk()) {
      set_out_pk(from.out_pk());
    }
    if (from.has_ecdh_info()) {
      set_ecdh_info(from.ecdh_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroTransactionSetOutputAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionSetOutputAck::CopyFrom(const MoneroTransactionSetOutputAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionSetOutputAck::IsInitialized() const {

  return true;
}

void MoneroTransactionSetOutputAck::Swap(MoneroTransactionSetOutputAck* other) {
  if (other != this) {
    std::swap(tx_out_, other->tx_out_);
    std::swap(vouti_hmac_, other->vouti_hmac_);
    std::swap(rsig_, other->rsig_);
    std::swap(out_pk_, other->out_pk_);
    std::swap(ecdh_info_, other->ecdh_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroTransactionSetOutputAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroTransactionSetOutputAck_descriptor_;
  metadata.reflection = MoneroTransactionSetOutputAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MoneroTransactionAllOutSetRequest::MoneroTransactionAllOutSetRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionAllOutSetRequest)
}

void MoneroTransactionAllOutSetRequest::InitAsDefaultInstance() {
}

MoneroTransactionAllOutSetRequest::MoneroTransactionAllOutSetRequest(const MoneroTransactionAllOutSetRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionAllOutSetRequest)
}

void MoneroTransactionAllOutSetRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroTransactionAllOutSetRequest::~MoneroTransactionAllOutSetRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionAllOutSetRequest)
  SharedDtor();
}

void MoneroTransactionAllOutSetRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoneroTransactionAllOutSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroTransactionAllOutSetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroTransactionAllOutSetRequest_descriptor_;
}

const MoneroTransactionAllOutSetRequest& MoneroTransactionAllOutSetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroTransactionAllOutSetRequest* MoneroTransactionAllOutSetRequest::default_instance_ = NULL;

MoneroTransactionAllOutSetRequest* MoneroTransactionAllOutSetRequest::New() const {
  return new MoneroTransactionAllOutSetRequest;
}

void MoneroTransactionAllOutSetRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroTransactionAllOutSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroTransactionAllOutSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroTransactionAllOutSetRequest)
  return false;
#undef DO_
}

void MoneroTransactionAllOutSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroTransactionAllOutSetRequest)
}

::google::protobuf::uint8* MoneroTransactionAllOutSetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionAllOutSetRequest)
  return target;
}

int MoneroTransactionAllOutSetRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroTransactionAllOutSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroTransactionAllOutSetRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroTransactionAllOutSetRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroTransactionAllOutSetRequest::MergeFrom(const MoneroTransactionAllOutSetRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroTransactionAllOutSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionAllOutSetRequest::CopyFrom(const MoneroTransactionAllOutSetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionAllOutSetRequest::IsInitialized() const {

  return true;
}

void MoneroTransactionAllOutSetRequest::Swap(MoneroTransactionAllOutSetRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroTransactionAllOutSetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroTransactionAllOutSetRequest_descriptor_;
  metadata.reflection = MoneroTransactionAllOutSetRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneroTransactionAllOutSetAck_MoneroRingCtSig::kTxnFeeFieldNumber;
const int MoneroTransactionAllOutSetAck_MoneroRingCtSig::kMessageFieldNumber;
const int MoneroTransactionAllOutSetAck_MoneroRingCtSig::kRvTypeFieldNumber;
#endif  // !_MSC_VER

MoneroTransactionAllOutSetAck_MoneroRingCtSig::MoneroTransactionAllOutSetAck_MoneroRingCtSig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig)
}

void MoneroTransactionAllOutSetAck_MoneroRingCtSig::InitAsDefaultInstance() {
}

MoneroTransactionAllOutSetAck_MoneroRingCtSig::MoneroTransactionAllOutSetAck_MoneroRingCtSig(const MoneroTransactionAllOutSetAck_MoneroRingCtSig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig)
}

void MoneroTransactionAllOutSetAck_MoneroRingCtSig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  txn_fee_ = GOOGLE_ULONGLONG(0);
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rv_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroTransactionAllOutSetAck_MoneroRingCtSig::~MoneroTransactionAllOutSetAck_MoneroRingCtSig() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig)
  SharedDtor();
}

void MoneroTransactionAllOutSetAck_MoneroRingCtSig::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void MoneroTransactionAllOutSetAck_MoneroRingCtSig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroTransactionAllOutSetAck_MoneroRingCtSig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroTransactionAllOutSetAck_MoneroRingCtSig_descriptor_;
}

const MoneroTransactionAllOutSetAck_MoneroRingCtSig& MoneroTransactionAllOutSetAck_MoneroRingCtSig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroTransactionAllOutSetAck_MoneroRingCtSig* MoneroTransactionAllOutSetAck_MoneroRingCtSig::default_instance_ = NULL;

MoneroTransactionAllOutSetAck_MoneroRingCtSig* MoneroTransactionAllOutSetAck_MoneroRingCtSig::New() const {
  return new MoneroTransactionAllOutSetAck_MoneroRingCtSig;
}

void MoneroTransactionAllOutSetAck_MoneroRingCtSig::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    txn_fee_ = GOOGLE_ULONGLONG(0);
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    rv_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroTransactionAllOutSetAck_MoneroRingCtSig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 txn_fee = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txn_fee_)));
          set_has_txn_fee();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional bytes message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rv_type;
        break;
      }

      // optional uint32 rv_type = 3;
      case 3: {
        if (tag == 24) {
         parse_rv_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rv_type_)));
          set_has_rv_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig)
  return false;
#undef DO_
}

void MoneroTransactionAllOutSetAck_MoneroRingCtSig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig)
  // optional uint64 txn_fee = 1;
  if (has_txn_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->txn_fee(), output);
  }

  // optional bytes message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->message(), output);
  }

  // optional uint32 rv_type = 3;
  if (has_rv_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rv_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig)
}

::google::protobuf::uint8* MoneroTransactionAllOutSetAck_MoneroRingCtSig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig)
  // optional uint64 txn_fee = 1;
  if (has_txn_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->txn_fee(), target);
  }

  // optional bytes message = 2;
  if (has_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->message(), target);
  }

  // optional uint32 rv_type = 3;
  if (has_rv_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rv_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig)
  return target;
}

int MoneroTransactionAllOutSetAck_MoneroRingCtSig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 txn_fee = 1;
    if (has_txn_fee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->txn_fee());
    }

    // optional bytes message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }

    // optional uint32 rv_type = 3;
    if (has_rv_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rv_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroTransactionAllOutSetAck_MoneroRingCtSig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroTransactionAllOutSetAck_MoneroRingCtSig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroTransactionAllOutSetAck_MoneroRingCtSig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroTransactionAllOutSetAck_MoneroRingCtSig::MergeFrom(const MoneroTransactionAllOutSetAck_MoneroRingCtSig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txn_fee()) {
      set_txn_fee(from.txn_fee());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_rv_type()) {
      set_rv_type(from.rv_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroTransactionAllOutSetAck_MoneroRingCtSig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionAllOutSetAck_MoneroRingCtSig::CopyFrom(const MoneroTransactionAllOutSetAck_MoneroRingCtSig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionAllOutSetAck_MoneroRingCtSig::IsInitialized() const {

  return true;
}

void MoneroTransactionAllOutSetAck_MoneroRingCtSig::Swap(MoneroTransactionAllOutSetAck_MoneroRingCtSig* other) {
  if (other != this) {
    std::swap(txn_fee_, other->txn_fee_);
    std::swap(message_, other->message_);
    std::swap(rv_type_, other->rv_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroTransactionAllOutSetAck_MoneroRingCtSig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroTransactionAllOutSetAck_MoneroRingCtSig_descriptor_;
  metadata.reflection = MoneroTransactionAllOutSetAck_MoneroRingCtSig_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MoneroTransactionAllOutSetAck::kExtraFieldNumber;
const int MoneroTransactionAllOutSetAck::kTxPrefixHashFieldNumber;
const int MoneroTransactionAllOutSetAck::kRvFieldNumber;
#endif  // !_MSC_VER

MoneroTransactionAllOutSetAck::MoneroTransactionAllOutSetAck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck)
}

void MoneroTransactionAllOutSetAck::InitAsDefaultInstance() {
  rv_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck_MoneroRingCtSig*>(&::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck_MoneroRingCtSig::default_instance());
}

MoneroTransactionAllOutSetAck::MoneroTransactionAllOutSetAck(const MoneroTransactionAllOutSetAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck)
}

void MoneroTransactionAllOutSetAck::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  extra_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tx_prefix_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rv_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroTransactionAllOutSetAck::~MoneroTransactionAllOutSetAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck)
  SharedDtor();
}

void MoneroTransactionAllOutSetAck::SharedDtor() {
  if (extra_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extra_;
  }
  if (tx_prefix_hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tx_prefix_hash_;
  }
  if (this != default_instance_) {
    delete rv_;
  }
}

void MoneroTransactionAllOutSetAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroTransactionAllOutSetAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroTransactionAllOutSetAck_descriptor_;
}

const MoneroTransactionAllOutSetAck& MoneroTransactionAllOutSetAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroTransactionAllOutSetAck* MoneroTransactionAllOutSetAck::default_instance_ = NULL;

MoneroTransactionAllOutSetAck* MoneroTransactionAllOutSetAck::New() const {
  return new MoneroTransactionAllOutSetAck;
}

void MoneroTransactionAllOutSetAck::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_extra()) {
      if (extra_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        extra_->clear();
      }
    }
    if (has_tx_prefix_hash()) {
      if (tx_prefix_hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tx_prefix_hash_->clear();
      }
    }
    if (has_rv()) {
      if (rv_ != NULL) rv_->::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck_MoneroRingCtSig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroTransactionAllOutSetAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes extra = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extra()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tx_prefix_hash;
        break;
      }

      // optional bytes tx_prefix_hash = 2;
      case 2: {
        if (tag == 18) {
         parse_tx_prefix_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tx_prefix_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rv;
        break;
      }

      // optional .hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig rv = 3;
      case 3: {
        if (tag == 26) {
         parse_rv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck)
  return false;
#undef DO_
}

void MoneroTransactionAllOutSetAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck)
  // optional bytes extra = 1;
  if (has_extra()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->extra(), output);
  }

  // optional bytes tx_prefix_hash = 2;
  if (has_tx_prefix_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->tx_prefix_hash(), output);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig rv = 3;
  if (has_rv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck)
}

::google::protobuf::uint8* MoneroTransactionAllOutSetAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck)
  // optional bytes extra = 1;
  if (has_extra()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->extra(), target);
  }

  // optional bytes tx_prefix_hash = 2;
  if (has_tx_prefix_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->tx_prefix_hash(), target);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig rv = 3;
  if (has_rv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionAllOutSetAck)
  return target;
}

int MoneroTransactionAllOutSetAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes extra = 1;
    if (has_extra()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->extra());
    }

    // optional bytes tx_prefix_hash = 2;
    if (has_tx_prefix_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tx_prefix_hash());
    }

    // optional .hw.trezor.messages.monero.MoneroTransactionAllOutSetAck.MoneroRingCtSig rv = 3;
    if (has_rv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroTransactionAllOutSetAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroTransactionAllOutSetAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroTransactionAllOutSetAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroTransactionAllOutSetAck::MergeFrom(const MoneroTransactionAllOutSetAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_extra()) {
      set_extra(from.extra());
    }
    if (from.has_tx_prefix_hash()) {
      set_tx_prefix_hash(from.tx_prefix_hash());
    }
    if (from.has_rv()) {
      mutable_rv()->::hw::trezor::messages::monero::MoneroTransactionAllOutSetAck_MoneroRingCtSig::MergeFrom(from.rv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroTransactionAllOutSetAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionAllOutSetAck::CopyFrom(const MoneroTransactionAllOutSetAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionAllOutSetAck::IsInitialized() const {

  return true;
}

void MoneroTransactionAllOutSetAck::Swap(MoneroTransactionAllOutSetAck* other) {
  if (other != this) {
    std::swap(extra_, other->extra_);
    std::swap(tx_prefix_hash_, other->tx_prefix_hash_);
    std::swap(rv_, other->rv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroTransactionAllOutSetAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroTransactionAllOutSetAck_descriptor_;
  metadata.reflection = MoneroTransactionAllOutSetAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MoneroTransactionMlsagDoneRequest::MoneroTransactionMlsagDoneRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionMlsagDoneRequest)
}

void MoneroTransactionMlsagDoneRequest::InitAsDefaultInstance() {
}

MoneroTransactionMlsagDoneRequest::MoneroTransactionMlsagDoneRequest(const MoneroTransactionMlsagDoneRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionMlsagDoneRequest)
}

void MoneroTransactionMlsagDoneRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroTransactionMlsagDoneRequest::~MoneroTransactionMlsagDoneRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionMlsagDoneRequest)
  SharedDtor();
}

void MoneroTransactionMlsagDoneRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoneroTransactionMlsagDoneRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroTransactionMlsagDoneRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroTransactionMlsagDoneRequest_descriptor_;
}

const MoneroTransactionMlsagDoneRequest& MoneroTransactionMlsagDoneRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroTransactionMlsagDoneRequest* MoneroTransactionMlsagDoneRequest::default_instance_ = NULL;

MoneroTransactionMlsagDoneRequest* MoneroTransactionMlsagDoneRequest::New() const {
  return new MoneroTransactionMlsagDoneRequest;
}

void MoneroTransactionMlsagDoneRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroTransactionMlsagDoneRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroTransactionMlsagDoneRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroTransactionMlsagDoneRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroTransactionMlsagDoneRequest)
  return false;
#undef DO_
}

void MoneroTransactionMlsagDoneRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroTransactionMlsagDoneRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroTransactionMlsagDoneRequest)
}

::google::protobuf::uint8* MoneroTransactionMlsagDoneRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionMlsagDoneRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionMlsagDoneRequest)
  return target;
}

int MoneroTransactionMlsagDoneRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroTransactionMlsagDoneRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroTransactionMlsagDoneRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroTransactionMlsagDoneRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroTransactionMlsagDoneRequest::MergeFrom(const MoneroTransactionMlsagDoneRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroTransactionMlsagDoneRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionMlsagDoneRequest::CopyFrom(const MoneroTransactionMlsagDoneRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionMlsagDoneRequest::IsInitialized() const {

  return true;
}

void MoneroTransactionMlsagDoneRequest::Swap(MoneroTransactionMlsagDoneRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroTransactionMlsagDoneRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroTransactionMlsagDoneRequest_descriptor_;
  metadata.reflection = MoneroTransactionMlsagDoneRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneroTransactionMlsagDoneAck::kFullMessageHashFieldNumber;
#endif  // !_MSC_VER

MoneroTransactionMlsagDoneAck::MoneroTransactionMlsagDoneAck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionMlsagDoneAck)
}

void MoneroTransactionMlsagDoneAck::InitAsDefaultInstance() {
}

MoneroTransactionMlsagDoneAck::MoneroTransactionMlsagDoneAck(const MoneroTransactionMlsagDoneAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionMlsagDoneAck)
}

void MoneroTransactionMlsagDoneAck::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  full_message_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroTransactionMlsagDoneAck::~MoneroTransactionMlsagDoneAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionMlsagDoneAck)
  SharedDtor();
}

void MoneroTransactionMlsagDoneAck::SharedDtor() {
  if (full_message_hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete full_message_hash_;
  }
  if (this != default_instance_) {
  }
}

void MoneroTransactionMlsagDoneAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroTransactionMlsagDoneAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroTransactionMlsagDoneAck_descriptor_;
}

const MoneroTransactionMlsagDoneAck& MoneroTransactionMlsagDoneAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroTransactionMlsagDoneAck* MoneroTransactionMlsagDoneAck::default_instance_ = NULL;

MoneroTransactionMlsagDoneAck* MoneroTransactionMlsagDoneAck::New() const {
  return new MoneroTransactionMlsagDoneAck;
}

void MoneroTransactionMlsagDoneAck::Clear() {
  if (has_full_message_hash()) {
    if (full_message_hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      full_message_hash_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroTransactionMlsagDoneAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroTransactionMlsagDoneAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes full_message_hash = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_full_message_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroTransactionMlsagDoneAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroTransactionMlsagDoneAck)
  return false;
#undef DO_
}

void MoneroTransactionMlsagDoneAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroTransactionMlsagDoneAck)
  // optional bytes full_message_hash = 1;
  if (has_full_message_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->full_message_hash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroTransactionMlsagDoneAck)
}

::google::protobuf::uint8* MoneroTransactionMlsagDoneAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionMlsagDoneAck)
  // optional bytes full_message_hash = 1;
  if (has_full_message_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->full_message_hash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionMlsagDoneAck)
  return target;
}

int MoneroTransactionMlsagDoneAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes full_message_hash = 1;
    if (has_full_message_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->full_message_hash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroTransactionMlsagDoneAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroTransactionMlsagDoneAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroTransactionMlsagDoneAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroTransactionMlsagDoneAck::MergeFrom(const MoneroTransactionMlsagDoneAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_full_message_hash()) {
      set_full_message_hash(from.full_message_hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroTransactionMlsagDoneAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionMlsagDoneAck::CopyFrom(const MoneroTransactionMlsagDoneAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionMlsagDoneAck::IsInitialized() const {

  return true;
}

void MoneroTransactionMlsagDoneAck::Swap(MoneroTransactionMlsagDoneAck* other) {
  if (other != this) {
    std::swap(full_message_hash_, other->full_message_hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroTransactionMlsagDoneAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroTransactionMlsagDoneAck_descriptor_;
  metadata.reflection = MoneroTransactionMlsagDoneAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneroTransactionSignInputRequest::kSrcEntrFieldNumber;
const int MoneroTransactionSignInputRequest::kViniFieldNumber;
const int MoneroTransactionSignInputRequest::kViniHmacFieldNumber;
const int MoneroTransactionSignInputRequest::kPseudoOutFieldNumber;
const int MoneroTransactionSignInputRequest::kPseudoOutHmacFieldNumber;
const int MoneroTransactionSignInputRequest::kAlphaEncFieldNumber;
const int MoneroTransactionSignInputRequest::kSpendEncFieldNumber;
#endif  // !_MSC_VER

MoneroTransactionSignInputRequest::MoneroTransactionSignInputRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionSignInputRequest)
}

void MoneroTransactionSignInputRequest::InitAsDefaultInstance() {
  src_entr_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionSourceEntry*>(&::hw::trezor::messages::monero::MoneroTransactionSourceEntry::default_instance());
}

MoneroTransactionSignInputRequest::MoneroTransactionSignInputRequest(const MoneroTransactionSignInputRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionSignInputRequest)
}

void MoneroTransactionSignInputRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  src_entr_ = NULL;
  vini_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vini_hmac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pseudo_out_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pseudo_out_hmac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alpha_enc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spend_enc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroTransactionSignInputRequest::~MoneroTransactionSignInputRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionSignInputRequest)
  SharedDtor();
}

void MoneroTransactionSignInputRequest::SharedDtor() {
  if (vini_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vini_;
  }
  if (vini_hmac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vini_hmac_;
  }
  if (pseudo_out_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pseudo_out_;
  }
  if (pseudo_out_hmac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pseudo_out_hmac_;
  }
  if (alpha_enc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alpha_enc_;
  }
  if (spend_enc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete spend_enc_;
  }
  if (this != default_instance_) {
    delete src_entr_;
  }
}

void MoneroTransactionSignInputRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroTransactionSignInputRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroTransactionSignInputRequest_descriptor_;
}

const MoneroTransactionSignInputRequest& MoneroTransactionSignInputRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroTransactionSignInputRequest* MoneroTransactionSignInputRequest::default_instance_ = NULL;

MoneroTransactionSignInputRequest* MoneroTransactionSignInputRequest::New() const {
  return new MoneroTransactionSignInputRequest;
}

void MoneroTransactionSignInputRequest::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_src_entr()) {
      if (src_entr_ != NULL) src_entr_->::hw::trezor::messages::monero::MoneroTransactionSourceEntry::Clear();
    }
    if (has_vini()) {
      if (vini_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vini_->clear();
      }
    }
    if (has_vini_hmac()) {
      if (vini_hmac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vini_hmac_->clear();
      }
    }
    if (has_pseudo_out()) {
      if (pseudo_out_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pseudo_out_->clear();
      }
    }
    if (has_pseudo_out_hmac()) {
      if (pseudo_out_hmac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pseudo_out_hmac_->clear();
      }
    }
    if (has_alpha_enc()) {
      if (alpha_enc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        alpha_enc_->clear();
      }
    }
    if (has_spend_enc()) {
      if (spend_enc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        spend_enc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroTransactionSignInputRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroTransactionSignInputRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry src_entr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src_entr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vini;
        break;
      }

      // optional bytes vini = 2;
      case 2: {
        if (tag == 18) {
         parse_vini:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vini()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vini_hmac;
        break;
      }

      // optional bytes vini_hmac = 3;
      case 3: {
        if (tag == 26) {
         parse_vini_hmac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vini_hmac()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pseudo_out;
        break;
      }

      // optional bytes pseudo_out = 4;
      case 4: {
        if (tag == 34) {
         parse_pseudo_out:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pseudo_out()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pseudo_out_hmac;
        break;
      }

      // optional bytes pseudo_out_hmac = 5;
      case 5: {
        if (tag == 42) {
         parse_pseudo_out_hmac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pseudo_out_hmac()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_alpha_enc;
        break;
      }

      // optional bytes alpha_enc = 6;
      case 6: {
        if (tag == 50) {
         parse_alpha_enc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_alpha_enc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_spend_enc;
        break;
      }

      // optional bytes spend_enc = 7;
      case 7: {
        if (tag == 58) {
         parse_spend_enc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_spend_enc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroTransactionSignInputRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroTransactionSignInputRequest)
  return false;
#undef DO_
}

void MoneroTransactionSignInputRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroTransactionSignInputRequest)
  // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry src_entr = 1;
  if (has_src_entr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->src_entr(), output);
  }

  // optional bytes vini = 2;
  if (has_vini()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->vini(), output);
  }

  // optional bytes vini_hmac = 3;
  if (has_vini_hmac()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->vini_hmac(), output);
  }

  // optional bytes pseudo_out = 4;
  if (has_pseudo_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->pseudo_out(), output);
  }

  // optional bytes pseudo_out_hmac = 5;
  if (has_pseudo_out_hmac()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->pseudo_out_hmac(), output);
  }

  // optional bytes alpha_enc = 6;
  if (has_alpha_enc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->alpha_enc(), output);
  }

  // optional bytes spend_enc = 7;
  if (has_spend_enc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->spend_enc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroTransactionSignInputRequest)
}

::google::protobuf::uint8* MoneroTransactionSignInputRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionSignInputRequest)
  // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry src_entr = 1;
  if (has_src_entr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->src_entr(), target);
  }

  // optional bytes vini = 2;
  if (has_vini()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->vini(), target);
  }

  // optional bytes vini_hmac = 3;
  if (has_vini_hmac()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->vini_hmac(), target);
  }

  // optional bytes pseudo_out = 4;
  if (has_pseudo_out()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->pseudo_out(), target);
  }

  // optional bytes pseudo_out_hmac = 5;
  if (has_pseudo_out_hmac()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->pseudo_out_hmac(), target);
  }

  // optional bytes alpha_enc = 6;
  if (has_alpha_enc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->alpha_enc(), target);
  }

  // optional bytes spend_enc = 7;
  if (has_spend_enc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->spend_enc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionSignInputRequest)
  return target;
}

int MoneroTransactionSignInputRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hw.trezor.messages.monero.MoneroTransactionSourceEntry src_entr = 1;
    if (has_src_entr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src_entr());
    }

    // optional bytes vini = 2;
    if (has_vini()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vini());
    }

    // optional bytes vini_hmac = 3;
    if (has_vini_hmac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vini_hmac());
    }

    // optional bytes pseudo_out = 4;
    if (has_pseudo_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pseudo_out());
    }

    // optional bytes pseudo_out_hmac = 5;
    if (has_pseudo_out_hmac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pseudo_out_hmac());
    }

    // optional bytes alpha_enc = 6;
    if (has_alpha_enc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->alpha_enc());
    }

    // optional bytes spend_enc = 7;
    if (has_spend_enc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->spend_enc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroTransactionSignInputRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroTransactionSignInputRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroTransactionSignInputRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroTransactionSignInputRequest::MergeFrom(const MoneroTransactionSignInputRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_entr()) {
      mutable_src_entr()->::hw::trezor::messages::monero::MoneroTransactionSourceEntry::MergeFrom(from.src_entr());
    }
    if (from.has_vini()) {
      set_vini(from.vini());
    }
    if (from.has_vini_hmac()) {
      set_vini_hmac(from.vini_hmac());
    }
    if (from.has_pseudo_out()) {
      set_pseudo_out(from.pseudo_out());
    }
    if (from.has_pseudo_out_hmac()) {
      set_pseudo_out_hmac(from.pseudo_out_hmac());
    }
    if (from.has_alpha_enc()) {
      set_alpha_enc(from.alpha_enc());
    }
    if (from.has_spend_enc()) {
      set_spend_enc(from.spend_enc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroTransactionSignInputRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionSignInputRequest::CopyFrom(const MoneroTransactionSignInputRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionSignInputRequest::IsInitialized() const {

  return true;
}

void MoneroTransactionSignInputRequest::Swap(MoneroTransactionSignInputRequest* other) {
  if (other != this) {
    std::swap(src_entr_, other->src_entr_);
    std::swap(vini_, other->vini_);
    std::swap(vini_hmac_, other->vini_hmac_);
    std::swap(pseudo_out_, other->pseudo_out_);
    std::swap(pseudo_out_hmac_, other->pseudo_out_hmac_);
    std::swap(alpha_enc_, other->alpha_enc_);
    std::swap(spend_enc_, other->spend_enc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroTransactionSignInputRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroTransactionSignInputRequest_descriptor_;
  metadata.reflection = MoneroTransactionSignInputRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneroTransactionSignInputAck::kSignatureFieldNumber;
const int MoneroTransactionSignInputAck::kCoutFieldNumber;
#endif  // !_MSC_VER

MoneroTransactionSignInputAck::MoneroTransactionSignInputAck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionSignInputAck)
}

void MoneroTransactionSignInputAck::InitAsDefaultInstance() {
}

MoneroTransactionSignInputAck::MoneroTransactionSignInputAck(const MoneroTransactionSignInputAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionSignInputAck)
}

void MoneroTransactionSignInputAck::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cout_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroTransactionSignInputAck::~MoneroTransactionSignInputAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionSignInputAck)
  SharedDtor();
}

void MoneroTransactionSignInputAck::SharedDtor() {
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signature_;
  }
  if (cout_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cout_;
  }
  if (this != default_instance_) {
  }
}

void MoneroTransactionSignInputAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroTransactionSignInputAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroTransactionSignInputAck_descriptor_;
}

const MoneroTransactionSignInputAck& MoneroTransactionSignInputAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroTransactionSignInputAck* MoneroTransactionSignInputAck::default_instance_ = NULL;

MoneroTransactionSignInputAck* MoneroTransactionSignInputAck::New() const {
  return new MoneroTransactionSignInputAck;
}

void MoneroTransactionSignInputAck::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signature_->clear();
      }
    }
    if (has_cout()) {
      if (cout_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cout_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroTransactionSignInputAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroTransactionSignInputAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes signature = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cout;
        break;
      }

      // optional bytes cout = 2;
      case 2: {
        if (tag == 18) {
         parse_cout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cout()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroTransactionSignInputAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroTransactionSignInputAck)
  return false;
#undef DO_
}

void MoneroTransactionSignInputAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroTransactionSignInputAck)
  // optional bytes signature = 1;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signature(), output);
  }

  // optional bytes cout = 2;
  if (has_cout()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroTransactionSignInputAck)
}

::google::protobuf::uint8* MoneroTransactionSignInputAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionSignInputAck)
  // optional bytes signature = 1;
  if (has_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->signature(), target);
  }

  // optional bytes cout = 2;
  if (has_cout()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionSignInputAck)
  return target;
}

int MoneroTransactionSignInputAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes signature = 1;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional bytes cout = 2;
    if (has_cout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroTransactionSignInputAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroTransactionSignInputAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroTransactionSignInputAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroTransactionSignInputAck::MergeFrom(const MoneroTransactionSignInputAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_cout()) {
      set_cout(from.cout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroTransactionSignInputAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionSignInputAck::CopyFrom(const MoneroTransactionSignInputAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionSignInputAck::IsInitialized() const {

  return true;
}

void MoneroTransactionSignInputAck::Swap(MoneroTransactionSignInputAck* other) {
  if (other != this) {
    std::swap(signature_, other->signature_);
    std::swap(cout_, other->cout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroTransactionSignInputAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroTransactionSignInputAck_descriptor_;
  metadata.reflection = MoneroTransactionSignInputAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MoneroTransactionFinalRequest::MoneroTransactionFinalRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionFinalRequest)
}

void MoneroTransactionFinalRequest::InitAsDefaultInstance() {
}

MoneroTransactionFinalRequest::MoneroTransactionFinalRequest(const MoneroTransactionFinalRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionFinalRequest)
}

void MoneroTransactionFinalRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroTransactionFinalRequest::~MoneroTransactionFinalRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionFinalRequest)
  SharedDtor();
}

void MoneroTransactionFinalRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoneroTransactionFinalRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroTransactionFinalRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroTransactionFinalRequest_descriptor_;
}

const MoneroTransactionFinalRequest& MoneroTransactionFinalRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroTransactionFinalRequest* MoneroTransactionFinalRequest::default_instance_ = NULL;

MoneroTransactionFinalRequest* MoneroTransactionFinalRequest::New() const {
  return new MoneroTransactionFinalRequest;
}

void MoneroTransactionFinalRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroTransactionFinalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroTransactionFinalRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroTransactionFinalRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroTransactionFinalRequest)
  return false;
#undef DO_
}

void MoneroTransactionFinalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroTransactionFinalRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroTransactionFinalRequest)
}

::google::protobuf::uint8* MoneroTransactionFinalRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionFinalRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionFinalRequest)
  return target;
}

int MoneroTransactionFinalRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroTransactionFinalRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroTransactionFinalRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroTransactionFinalRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroTransactionFinalRequest::MergeFrom(const MoneroTransactionFinalRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroTransactionFinalRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionFinalRequest::CopyFrom(const MoneroTransactionFinalRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionFinalRequest::IsInitialized() const {

  return true;
}

void MoneroTransactionFinalRequest::Swap(MoneroTransactionFinalRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroTransactionFinalRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroTransactionFinalRequest_descriptor_;
  metadata.reflection = MoneroTransactionFinalRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneroTransactionFinalAck::kCoutKeyFieldNumber;
const int MoneroTransactionFinalAck::kSaltFieldNumber;
const int MoneroTransactionFinalAck::kRandMultFieldNumber;
const int MoneroTransactionFinalAck::kTxEncKeysFieldNumber;
#endif  // !_MSC_VER

MoneroTransactionFinalAck::MoneroTransactionFinalAck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionFinalAck)
}

void MoneroTransactionFinalAck::InitAsDefaultInstance() {
}

MoneroTransactionFinalAck::MoneroTransactionFinalAck(const MoneroTransactionFinalAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionFinalAck)
}

void MoneroTransactionFinalAck::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cout_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rand_mult_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tx_enc_keys_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroTransactionFinalAck::~MoneroTransactionFinalAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionFinalAck)
  SharedDtor();
}

void MoneroTransactionFinalAck::SharedDtor() {
  if (cout_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cout_key_;
  }
  if (salt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete salt_;
  }
  if (rand_mult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rand_mult_;
  }
  if (tx_enc_keys_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tx_enc_keys_;
  }
  if (this != default_instance_) {
  }
}

void MoneroTransactionFinalAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroTransactionFinalAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroTransactionFinalAck_descriptor_;
}

const MoneroTransactionFinalAck& MoneroTransactionFinalAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroTransactionFinalAck* MoneroTransactionFinalAck::default_instance_ = NULL;

MoneroTransactionFinalAck* MoneroTransactionFinalAck::New() const {
  return new MoneroTransactionFinalAck;
}

void MoneroTransactionFinalAck::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_cout_key()) {
      if (cout_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cout_key_->clear();
      }
    }
    if (has_salt()) {
      if (salt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        salt_->clear();
      }
    }
    if (has_rand_mult()) {
      if (rand_mult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rand_mult_->clear();
      }
    }
    if (has_tx_enc_keys()) {
      if (tx_enc_keys_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tx_enc_keys_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroTransactionFinalAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroTransactionFinalAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes cout_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cout_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_salt;
        break;
      }

      // optional bytes salt = 2;
      case 2: {
        if (tag == 18) {
         parse_salt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_salt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rand_mult;
        break;
      }

      // optional bytes rand_mult = 3;
      case 3: {
        if (tag == 26) {
         parse_rand_mult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rand_mult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tx_enc_keys;
        break;
      }

      // optional bytes tx_enc_keys = 4;
      case 4: {
        if (tag == 34) {
         parse_tx_enc_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tx_enc_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroTransactionFinalAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroTransactionFinalAck)
  return false;
#undef DO_
}

void MoneroTransactionFinalAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroTransactionFinalAck)
  // optional bytes cout_key = 1;
  if (has_cout_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->cout_key(), output);
  }

  // optional bytes salt = 2;
  if (has_salt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->salt(), output);
  }

  // optional bytes rand_mult = 3;
  if (has_rand_mult()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->rand_mult(), output);
  }

  // optional bytes tx_enc_keys = 4;
  if (has_tx_enc_keys()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->tx_enc_keys(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroTransactionFinalAck)
}

::google::protobuf::uint8* MoneroTransactionFinalAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionFinalAck)
  // optional bytes cout_key = 1;
  if (has_cout_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->cout_key(), target);
  }

  // optional bytes salt = 2;
  if (has_salt()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->salt(), target);
  }

  // optional bytes rand_mult = 3;
  if (has_rand_mult()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->rand_mult(), target);
  }

  // optional bytes tx_enc_keys = 4;
  if (has_tx_enc_keys()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->tx_enc_keys(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionFinalAck)
  return target;
}

int MoneroTransactionFinalAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes cout_key = 1;
    if (has_cout_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cout_key());
    }

    // optional bytes salt = 2;
    if (has_salt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->salt());
    }

    // optional bytes rand_mult = 3;
    if (has_rand_mult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rand_mult());
    }

    // optional bytes tx_enc_keys = 4;
    if (has_tx_enc_keys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tx_enc_keys());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroTransactionFinalAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroTransactionFinalAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroTransactionFinalAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroTransactionFinalAck::MergeFrom(const MoneroTransactionFinalAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cout_key()) {
      set_cout_key(from.cout_key());
    }
    if (from.has_salt()) {
      set_salt(from.salt());
    }
    if (from.has_rand_mult()) {
      set_rand_mult(from.rand_mult());
    }
    if (from.has_tx_enc_keys()) {
      set_tx_enc_keys(from.tx_enc_keys());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroTransactionFinalAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionFinalAck::CopyFrom(const MoneroTransactionFinalAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionFinalAck::IsInitialized() const {

  return true;
}

void MoneroTransactionFinalAck::Swap(MoneroTransactionFinalAck* other) {
  if (other != this) {
    std::swap(cout_key_, other->cout_key_);
    std::swap(salt_, other->salt_);
    std::swap(rand_mult_, other->rand_mult_);
    std::swap(tx_enc_keys_, other->tx_enc_keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroTransactionFinalAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroTransactionFinalAck_descriptor_;
  metadata.reflection = MoneroTransactionFinalAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneroTransactionSignRequest::kInitFieldNumber;
const int MoneroTransactionSignRequest::kSetInputFieldNumber;
const int MoneroTransactionSignRequest::kInputPermutationFieldNumber;
const int MoneroTransactionSignRequest::kInputViniFieldNumber;
const int MoneroTransactionSignRequest::kSetOutputFieldNumber;
const int MoneroTransactionSignRequest::kAllOutSetFieldNumber;
const int MoneroTransactionSignRequest::kMlsagDoneFieldNumber;
const int MoneroTransactionSignRequest::kSignInputFieldNumber;
const int MoneroTransactionSignRequest::kFinalMsgFieldNumber;
#endif  // !_MSC_VER

MoneroTransactionSignRequest::MoneroTransactionSignRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroTransactionSignRequest)
}

void MoneroTransactionSignRequest::InitAsDefaultInstance() {
  init_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionInitRequest*>(&::hw::trezor::messages::monero::MoneroTransactionInitRequest::default_instance());
  set_input_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionSetInputRequest*>(&::hw::trezor::messages::monero::MoneroTransactionSetInputRequest::default_instance());
  input_permutation_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionInputsPermutationRequest*>(&::hw::trezor::messages::monero::MoneroTransactionInputsPermutationRequest::default_instance());
  input_vini_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionInputViniRequest*>(&::hw::trezor::messages::monero::MoneroTransactionInputViniRequest::default_instance());
  set_output_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionSetOutputRequest*>(&::hw::trezor::messages::monero::MoneroTransactionSetOutputRequest::default_instance());
  all_out_set_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionAllOutSetRequest*>(&::hw::trezor::messages::monero::MoneroTransactionAllOutSetRequest::default_instance());
  mlsag_done_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionMlsagDoneRequest*>(&::hw::trezor::messages::monero::MoneroTransactionMlsagDoneRequest::default_instance());
  sign_input_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionSignInputRequest*>(&::hw::trezor::messages::monero::MoneroTransactionSignInputRequest::default_instance());
  final_msg_ = const_cast< ::hw::trezor::messages::monero::MoneroTransactionFinalRequest*>(&::hw::trezor::messages::monero::MoneroTransactionFinalRequest::default_instance());
}

MoneroTransactionSignRequest::MoneroTransactionSignRequest(const MoneroTransactionSignRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroTransactionSignRequest)
}

void MoneroTransactionSignRequest::SharedCtor() {
  _cached_size_ = 0;
  init_ = NULL;
  set_input_ = NULL;
  input_permutation_ = NULL;
  input_vini_ = NULL;
  set_output_ = NULL;
  all_out_set_ = NULL;
  mlsag_done_ = NULL;
  sign_input_ = NULL;
  final_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroTransactionSignRequest::~MoneroTransactionSignRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroTransactionSignRequest)
  SharedDtor();
}

void MoneroTransactionSignRequest::SharedDtor() {
  if (this != default_instance_) {
    delete init_;
    delete set_input_;
    delete input_permutation_;
    delete input_vini_;
    delete set_output_;
    delete all_out_set_;
    delete mlsag_done_;
    delete sign_input_;
    delete final_msg_;
  }
}

void MoneroTransactionSignRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroTransactionSignRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroTransactionSignRequest_descriptor_;
}

const MoneroTransactionSignRequest& MoneroTransactionSignRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroTransactionSignRequest* MoneroTransactionSignRequest::default_instance_ = NULL;

MoneroTransactionSignRequest* MoneroTransactionSignRequest::New() const {
  return new MoneroTransactionSignRequest;
}

void MoneroTransactionSignRequest::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_init()) {
      if (init_ != NULL) init_->::hw::trezor::messages::monero::MoneroTransactionInitRequest::Clear();
    }
    if (has_set_input()) {
      if (set_input_ != NULL) set_input_->::hw::trezor::messages::monero::MoneroTransactionSetInputRequest::Clear();
    }
    if (has_input_permutation()) {
      if (input_permutation_ != NULL) input_permutation_->::hw::trezor::messages::monero::MoneroTransactionInputsPermutationRequest::Clear();
    }
    if (has_input_vini()) {
      if (input_vini_ != NULL) input_vini_->::hw::trezor::messages::monero::MoneroTransactionInputViniRequest::Clear();
    }
    if (has_set_output()) {
      if (set_output_ != NULL) set_output_->::hw::trezor::messages::monero::MoneroTransactionSetOutputRequest::Clear();
    }
    if (has_all_out_set()) {
      if (all_out_set_ != NULL) all_out_set_->::hw::trezor::messages::monero::MoneroTransactionAllOutSetRequest::Clear();
    }
    if (has_mlsag_done()) {
      if (mlsag_done_ != NULL) mlsag_done_->::hw::trezor::messages::monero::MoneroTransactionMlsagDoneRequest::Clear();
    }
    if (has_sign_input()) {
      if (sign_input_ != NULL) sign_input_->::hw::trezor::messages::monero::MoneroTransactionSignInputRequest::Clear();
    }
  }
  if (has_final_msg()) {
    if (final_msg_ != NULL) final_msg_->::hw::trezor::messages::monero::MoneroTransactionFinalRequest::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroTransactionSignRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroTransactionSignRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hw.trezor.messages.monero.MoneroTransactionInitRequest init = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_set_input;
        break;
      }

      // optional .hw.trezor.messages.monero.MoneroTransactionSetInputRequest set_input = 2;
      case 2: {
        if (tag == 18) {
         parse_set_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_input()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_input_permutation;
        break;
      }

      // optional .hw.trezor.messages.monero.MoneroTransactionInputsPermutationRequest input_permutation = 3;
      case 3: {
        if (tag == 26) {
         parse_input_permutation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input_permutation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_input_vini;
        break;
      }

      // optional .hw.trezor.messages.monero.MoneroTransactionInputViniRequest input_vini = 4;
      case 4: {
        if (tag == 34) {
         parse_input_vini:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input_vini()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_set_output;
        break;
      }

      // optional .hw.trezor.messages.monero.MoneroTransactionSetOutputRequest set_output = 5;
      case 5: {
        if (tag == 42) {
         parse_set_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_output()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_all_out_set;
        break;
      }

      // optional .hw.trezor.messages.monero.MoneroTransactionAllOutSetRequest all_out_set = 6;
      case 6: {
        if (tag == 50) {
         parse_all_out_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_all_out_set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_mlsag_done;
        break;
      }

      // optional .hw.trezor.messages.monero.MoneroTransactionMlsagDoneRequest mlsag_done = 7;
      case 7: {
        if (tag == 58) {
         parse_mlsag_done:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mlsag_done()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sign_input;
        break;
      }

      // optional .hw.trezor.messages.monero.MoneroTransactionSignInputRequest sign_input = 8;
      case 8: {
        if (tag == 66) {
         parse_sign_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sign_input()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_final_msg;
        break;
      }

      // optional .hw.trezor.messages.monero.MoneroTransactionFinalRequest final_msg = 9;
      case 9: {
        if (tag == 74) {
         parse_final_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_final_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroTransactionSignRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroTransactionSignRequest)
  return false;
#undef DO_
}

void MoneroTransactionSignRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroTransactionSignRequest)
  // optional .hw.trezor.messages.monero.MoneroTransactionInitRequest init = 1;
  if (has_init()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->init(), output);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionSetInputRequest set_input = 2;
  if (has_set_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->set_input(), output);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionInputsPermutationRequest input_permutation = 3;
  if (has_input_permutation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->input_permutation(), output);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionInputViniRequest input_vini = 4;
  if (has_input_vini()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->input_vini(), output);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionSetOutputRequest set_output = 5;
  if (has_set_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->set_output(), output);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionAllOutSetRequest all_out_set = 6;
  if (has_all_out_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->all_out_set(), output);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionMlsagDoneRequest mlsag_done = 7;
  if (has_mlsag_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->mlsag_done(), output);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionSignInputRequest sign_input = 8;
  if (has_sign_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->sign_input(), output);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionFinalRequest final_msg = 9;
  if (has_final_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->final_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroTransactionSignRequest)
}

::google::protobuf::uint8* MoneroTransactionSignRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroTransactionSignRequest)
  // optional .hw.trezor.messages.monero.MoneroTransactionInitRequest init = 1;
  if (has_init()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->init(), target);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionSetInputRequest set_input = 2;
  if (has_set_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->set_input(), target);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionInputsPermutationRequest input_permutation = 3;
  if (has_input_permutation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->input_permutation(), target);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionInputViniRequest input_vini = 4;
  if (has_input_vini()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->input_vini(), target);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionSetOutputRequest set_output = 5;
  if (has_set_output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->set_output(), target);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionAllOutSetRequest all_out_set = 6;
  if (has_all_out_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->all_out_set(), target);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionMlsagDoneRequest mlsag_done = 7;
  if (has_mlsag_done()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->mlsag_done(), target);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionSignInputRequest sign_input = 8;
  if (has_sign_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->sign_input(), target);
  }

  // optional .hw.trezor.messages.monero.MoneroTransactionFinalRequest final_msg = 9;
  if (has_final_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->final_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroTransactionSignRequest)
  return target;
}

int MoneroTransactionSignRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hw.trezor.messages.monero.MoneroTransactionInitRequest init = 1;
    if (has_init()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->init());
    }

    // optional .hw.trezor.messages.monero.MoneroTransactionSetInputRequest set_input = 2;
    if (has_set_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->set_input());
    }

    // optional .hw.trezor.messages.monero.MoneroTransactionInputsPermutationRequest input_permutation = 3;
    if (has_input_permutation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->input_permutation());
    }

    // optional .hw.trezor.messages.monero.MoneroTransactionInputViniRequest input_vini = 4;
    if (has_input_vini()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->input_vini());
    }

    // optional .hw.trezor.messages.monero.MoneroTransactionSetOutputRequest set_output = 5;
    if (has_set_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->set_output());
    }

    // optional .hw.trezor.messages.monero.MoneroTransactionAllOutSetRequest all_out_set = 6;
    if (has_all_out_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->all_out_set());
    }

    // optional .hw.trezor.messages.monero.MoneroTransactionMlsagDoneRequest mlsag_done = 7;
    if (has_mlsag_done()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mlsag_done());
    }

    // optional .hw.trezor.messages.monero.MoneroTransactionSignInputRequest sign_input = 8;
    if (has_sign_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sign_input());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .hw.trezor.messages.monero.MoneroTransactionFinalRequest final_msg = 9;
    if (has_final_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->final_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroTransactionSignRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroTransactionSignRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroTransactionSignRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroTransactionSignRequest::MergeFrom(const MoneroTransactionSignRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_init()) {
      mutable_init()->::hw::trezor::messages::monero::MoneroTransactionInitRequest::MergeFrom(from.init());
    }
    if (from.has_set_input()) {
      mutable_set_input()->::hw::trezor::messages::monero::MoneroTransactionSetInputRequest::MergeFrom(from.set_input());
    }
    if (from.has_input_permutation()) {
      mutable_input_permutation()->::hw::trezor::messages::monero::MoneroTransactionInputsPermutationRequest::MergeFrom(from.input_permutation());
    }
    if (from.has_input_vini()) {
      mutable_input_vini()->::hw::trezor::messages::monero::MoneroTransactionInputViniRequest::MergeFrom(from.input_vini());
    }
    if (from.has_set_output()) {
      mutable_set_output()->::hw::trezor::messages::monero::MoneroTransactionSetOutputRequest::MergeFrom(from.set_output());
    }
    if (from.has_all_out_set()) {
      mutable_all_out_set()->::hw::trezor::messages::monero::MoneroTransactionAllOutSetRequest::MergeFrom(from.all_out_set());
    }
    if (from.has_mlsag_done()) {
      mutable_mlsag_done()->::hw::trezor::messages::monero::MoneroTransactionMlsagDoneRequest::MergeFrom(from.mlsag_done());
    }
    if (from.has_sign_input()) {
      mutable_sign_input()->::hw::trezor::messages::monero::MoneroTransactionSignInputRequest::MergeFrom(from.sign_input());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_final_msg()) {
      mutable_final_msg()->::hw::trezor::messages::monero::MoneroTransactionFinalRequest::MergeFrom(from.final_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroTransactionSignRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroTransactionSignRequest::CopyFrom(const MoneroTransactionSignRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroTransactionSignRequest::IsInitialized() const {

  return true;
}

void MoneroTransactionSignRequest::Swap(MoneroTransactionSignRequest* other) {
  if (other != this) {
    std::swap(init_, other->init_);
    std::swap(set_input_, other->set_input_);
    std::swap(input_permutation_, other->input_permutation_);
    std::swap(input_vini_, other->input_vini_);
    std::swap(set_output_, other->set_output_);
    std::swap(all_out_set_, other->all_out_set_);
    std::swap(mlsag_done_, other->mlsag_done_);
    std::swap(sign_input_, other->sign_input_);
    std::swap(final_msg_, other->final_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroTransactionSignRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroTransactionSignRequest_descriptor_;
  metadata.reflection = MoneroTransactionSignRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::kAccountFieldNumber;
const int MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::kMinorIndicesFieldNumber;
#endif  // !_MSC_VER

MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList)
}

void MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::InitAsDefaultInstance() {
}

MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList(const MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList)
}

void MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::SharedCtor() {
  _cached_size_ = 0;
  account_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::~MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList)
  SharedDtor();
}

void MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList_descriptor_;
}

const MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList& MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList* MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::default_instance_ = NULL;

MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList* MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::New() const {
  return new MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList;
}

void MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::Clear() {
  account_ = 0u;
  minor_indices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_)));
          set_has_account();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_minor_indices;
        break;
      }

      // repeated uint32 minor_indices = 2;
      case 2: {
        if (tag == 16) {
         parse_minor_indices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_minor_indices())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_minor_indices())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_minor_indices;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList)
  return false;
#undef DO_
}

void MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList)
  // optional uint32 account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account(), output);
  }

  // repeated uint32 minor_indices = 2;
  for (int i = 0; i < this->minor_indices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->minor_indices(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList)
}

::google::protobuf::uint8* MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList)
  // optional uint32 account = 1;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account(), target);
  }

  // repeated uint32 minor_indices = 2;
  for (int i = 0; i < this->minor_indices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->minor_indices(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList)
  return target;
}

int MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account());
    }

  }
  // repeated uint32 minor_indices = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->minor_indices_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->minor_indices(i));
    }
    total_size += 1 * this->minor_indices_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::MergeFrom(const MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList& from) {
  GOOGLE_CHECK_NE(&from, this);
  minor_indices_.MergeFrom(from.minor_indices_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::CopyFrom(const MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::IsInitialized() const {

  return true;
}

void MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::Swap(MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    minor_indices_.Swap(&other->minor_indices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList_descriptor_;
  metadata.reflection = MoneroKeyImageExportInitRequest_MoneroSubAddressIndicesList_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MoneroKeyImageExportInitRequest::kNumFieldNumber;
const int MoneroKeyImageExportInitRequest::kHashFieldNumber;
const int MoneroKeyImageExportInitRequest::kAddressNFieldNumber;
const int MoneroKeyImageExportInitRequest::kNetworkTypeFieldNumber;
const int MoneroKeyImageExportInitRequest::kSubsFieldNumber;
#endif  // !_MSC_VER

MoneroKeyImageExportInitRequest::MoneroKeyImageExportInitRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest)
}

void MoneroKeyImageExportInitRequest::InitAsDefaultInstance() {
}

MoneroKeyImageExportInitRequest::MoneroKeyImageExportInitRequest(const MoneroKeyImageExportInitRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest)
}

void MoneroKeyImageExportInitRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  num_ = GOOGLE_ULONGLONG(0);
  hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroKeyImageExportInitRequest::~MoneroKeyImageExportInitRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest)
  SharedDtor();
}

void MoneroKeyImageExportInitRequest::SharedDtor() {
  if (hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hash_;
  }
  if (this != default_instance_) {
  }
}

void MoneroKeyImageExportInitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroKeyImageExportInitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroKeyImageExportInitRequest_descriptor_;
}

const MoneroKeyImageExportInitRequest& MoneroKeyImageExportInitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroKeyImageExportInitRequest* MoneroKeyImageExportInitRequest::default_instance_ = NULL;

MoneroKeyImageExportInitRequest* MoneroKeyImageExportInitRequest::New() const {
  return new MoneroKeyImageExportInitRequest;
}

void MoneroKeyImageExportInitRequest::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    num_ = GOOGLE_ULONGLONG(0);
    if (has_hash()) {
      if (hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hash_->clear();
      }
    }
    network_type_ = 0u;
  }
  address_n_.Clear();
  subs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroKeyImageExportInitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hash;
        break;
      }

      // optional bytes hash = 2;
      case 2: {
        if (tag == 18) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_address_n;
        break;
      }

      // repeated uint32 address_n = 3;
      case 3: {
        if (tag == 24) {
         parse_address_n:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_address_n())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_address_n;
        if (input->ExpectTag(32)) goto parse_network_type;
        break;
      }

      // optional uint32 network_type = 4;
      case 4: {
        if (tag == 32) {
         parse_network_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &network_type_)));
          set_has_network_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_subs;
        break;
      }

      // repeated .hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList subs = 5;
      case 5: {
        if (tag == 42) {
         parse_subs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_subs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest)
  return false;
#undef DO_
}

void MoneroKeyImageExportInitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest)
  // optional uint64 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->num(), output);
  }

  // optional bytes hash = 2;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->hash(), output);
  }

  // repeated uint32 address_n = 3;
  for (int i = 0; i < this->address_n_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->address_n(i), output);
  }

  // optional uint32 network_type = 4;
  if (has_network_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->network_type(), output);
  }

  // repeated .hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList subs = 5;
  for (int i = 0; i < this->subs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->subs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest)
}

::google::protobuf::uint8* MoneroKeyImageExportInitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest)
  // optional uint64 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->num(), target);
  }

  // optional bytes hash = 2;
  if (has_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->hash(), target);
  }

  // repeated uint32 address_n = 3;
  for (int i = 0; i < this->address_n_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->address_n(i), target);
  }

  // optional uint32 network_type = 4;
  if (has_network_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->network_type(), target);
  }

  // repeated .hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList subs = 5;
  for (int i = 0; i < this->subs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->subs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroKeyImageExportInitRequest)
  return target;
}

int MoneroKeyImageExportInitRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num());
    }

    // optional bytes hash = 2;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hash());
    }

    // optional uint32 network_type = 4;
    if (has_network_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->network_type());
    }

  }
  // repeated uint32 address_n = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->address_n_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->address_n(i));
    }
    total_size += 1 * this->address_n_size() + data_size;
  }

  // repeated .hw.trezor.messages.monero.MoneroKeyImageExportInitRequest.MoneroSubAddressIndicesList subs = 5;
  total_size += 1 * this->subs_size();
  for (int i = 0; i < this->subs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroKeyImageExportInitRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroKeyImageExportInitRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroKeyImageExportInitRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroKeyImageExportInitRequest::MergeFrom(const MoneroKeyImageExportInitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  address_n_.MergeFrom(from.address_n_);
  subs_.MergeFrom(from.subs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_hash()) {
      set_hash(from.hash());
    }
    if (from.has_network_type()) {
      set_network_type(from.network_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroKeyImageExportInitRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroKeyImageExportInitRequest::CopyFrom(const MoneroKeyImageExportInitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroKeyImageExportInitRequest::IsInitialized() const {

  return true;
}

void MoneroKeyImageExportInitRequest::Swap(MoneroKeyImageExportInitRequest* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(hash_, other->hash_);
    address_n_.Swap(&other->address_n_);
    std::swap(network_type_, other->network_type_);
    subs_.Swap(&other->subs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroKeyImageExportInitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroKeyImageExportInitRequest_descriptor_;
  metadata.reflection = MoneroKeyImageExportInitRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MoneroKeyImageExportInitAck::MoneroKeyImageExportInitAck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroKeyImageExportInitAck)
}

void MoneroKeyImageExportInitAck::InitAsDefaultInstance() {
}

MoneroKeyImageExportInitAck::MoneroKeyImageExportInitAck(const MoneroKeyImageExportInitAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroKeyImageExportInitAck)
}

void MoneroKeyImageExportInitAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroKeyImageExportInitAck::~MoneroKeyImageExportInitAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroKeyImageExportInitAck)
  SharedDtor();
}

void MoneroKeyImageExportInitAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoneroKeyImageExportInitAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroKeyImageExportInitAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroKeyImageExportInitAck_descriptor_;
}

const MoneroKeyImageExportInitAck& MoneroKeyImageExportInitAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroKeyImageExportInitAck* MoneroKeyImageExportInitAck::default_instance_ = NULL;

MoneroKeyImageExportInitAck* MoneroKeyImageExportInitAck::New() const {
  return new MoneroKeyImageExportInitAck;
}

void MoneroKeyImageExportInitAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroKeyImageExportInitAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroKeyImageExportInitAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroKeyImageExportInitAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroKeyImageExportInitAck)
  return false;
#undef DO_
}

void MoneroKeyImageExportInitAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroKeyImageExportInitAck)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroKeyImageExportInitAck)
}

::google::protobuf::uint8* MoneroKeyImageExportInitAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroKeyImageExportInitAck)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroKeyImageExportInitAck)
  return target;
}

int MoneroKeyImageExportInitAck::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroKeyImageExportInitAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroKeyImageExportInitAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroKeyImageExportInitAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroKeyImageExportInitAck::MergeFrom(const MoneroKeyImageExportInitAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroKeyImageExportInitAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroKeyImageExportInitAck::CopyFrom(const MoneroKeyImageExportInitAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroKeyImageExportInitAck::IsInitialized() const {

  return true;
}

void MoneroKeyImageExportInitAck::Swap(MoneroKeyImageExportInitAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroKeyImageExportInitAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroKeyImageExportInitAck_descriptor_;
  metadata.reflection = MoneroKeyImageExportInitAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneroKeyImageSyncStepRequest_MoneroTransferDetails::kOutKeyFieldNumber;
const int MoneroKeyImageSyncStepRequest_MoneroTransferDetails::kTxPubKeyFieldNumber;
const int MoneroKeyImageSyncStepRequest_MoneroTransferDetails::kAdditionalTxPubKeysFieldNumber;
const int MoneroKeyImageSyncStepRequest_MoneroTransferDetails::kInternalOutputIndexFieldNumber;
#endif  // !_MSC_VER

MoneroKeyImageSyncStepRequest_MoneroTransferDetails::MoneroKeyImageSyncStepRequest_MoneroTransferDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails)
}

void MoneroKeyImageSyncStepRequest_MoneroTransferDetails::InitAsDefaultInstance() {
}

MoneroKeyImageSyncStepRequest_MoneroTransferDetails::MoneroKeyImageSyncStepRequest_MoneroTransferDetails(const MoneroKeyImageSyncStepRequest_MoneroTransferDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails)
}

void MoneroKeyImageSyncStepRequest_MoneroTransferDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  out_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tx_pub_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internal_output_index_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroKeyImageSyncStepRequest_MoneroTransferDetails::~MoneroKeyImageSyncStepRequest_MoneroTransferDetails() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails)
  SharedDtor();
}

void MoneroKeyImageSyncStepRequest_MoneroTransferDetails::SharedDtor() {
  if (out_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete out_key_;
  }
  if (tx_pub_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tx_pub_key_;
  }
  if (this != default_instance_) {
  }
}

void MoneroKeyImageSyncStepRequest_MoneroTransferDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroKeyImageSyncStepRequest_MoneroTransferDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroKeyImageSyncStepRequest_MoneroTransferDetails_descriptor_;
}

const MoneroKeyImageSyncStepRequest_MoneroTransferDetails& MoneroKeyImageSyncStepRequest_MoneroTransferDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroKeyImageSyncStepRequest_MoneroTransferDetails* MoneroKeyImageSyncStepRequest_MoneroTransferDetails::default_instance_ = NULL;

MoneroKeyImageSyncStepRequest_MoneroTransferDetails* MoneroKeyImageSyncStepRequest_MoneroTransferDetails::New() const {
  return new MoneroKeyImageSyncStepRequest_MoneroTransferDetails;
}

void MoneroKeyImageSyncStepRequest_MoneroTransferDetails::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    if (has_out_key()) {
      if (out_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        out_key_->clear();
      }
    }
    if (has_tx_pub_key()) {
      if (tx_pub_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tx_pub_key_->clear();
      }
    }
    internal_output_index_ = GOOGLE_ULONGLONG(0);
  }
  additional_tx_pub_keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroKeyImageSyncStepRequest_MoneroTransferDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes out_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_out_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tx_pub_key;
        break;
      }

      // optional bytes tx_pub_key = 2;
      case 2: {
        if (tag == 18) {
         parse_tx_pub_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tx_pub_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_additional_tx_pub_keys;
        break;
      }

      // repeated bytes additional_tx_pub_keys = 3;
      case 3: {
        if (tag == 26) {
         parse_additional_tx_pub_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_additional_tx_pub_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_additional_tx_pub_keys;
        if (input->ExpectTag(32)) goto parse_internal_output_index;
        break;
      }

      // optional uint64 internal_output_index = 4;
      case 4: {
        if (tag == 32) {
         parse_internal_output_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &internal_output_index_)));
          set_has_internal_output_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails)
  return false;
#undef DO_
}

void MoneroKeyImageSyncStepRequest_MoneroTransferDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails)
  // optional bytes out_key = 1;
  if (has_out_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->out_key(), output);
  }

  // optional bytes tx_pub_key = 2;
  if (has_tx_pub_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->tx_pub_key(), output);
  }

  // repeated bytes additional_tx_pub_keys = 3;
  for (int i = 0; i < this->additional_tx_pub_keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->additional_tx_pub_keys(i), output);
  }

  // optional uint64 internal_output_index = 4;
  if (has_internal_output_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->internal_output_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails)
}

::google::protobuf::uint8* MoneroKeyImageSyncStepRequest_MoneroTransferDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails)
  // optional bytes out_key = 1;
  if (has_out_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->out_key(), target);
  }

  // optional bytes tx_pub_key = 2;
  if (has_tx_pub_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->tx_pub_key(), target);
  }

  // repeated bytes additional_tx_pub_keys = 3;
  for (int i = 0; i < this->additional_tx_pub_keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->additional_tx_pub_keys(i), target);
  }

  // optional uint64 internal_output_index = 4;
  if (has_internal_output_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->internal_output_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails)
  return target;
}

int MoneroKeyImageSyncStepRequest_MoneroTransferDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes out_key = 1;
    if (has_out_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->out_key());
    }

    // optional bytes tx_pub_key = 2;
    if (has_tx_pub_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tx_pub_key());
    }

    // optional uint64 internal_output_index = 4;
    if (has_internal_output_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->internal_output_index());
    }

  }
  // repeated bytes additional_tx_pub_keys = 3;
  total_size += 1 * this->additional_tx_pub_keys_size();
  for (int i = 0; i < this->additional_tx_pub_keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->additional_tx_pub_keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroKeyImageSyncStepRequest_MoneroTransferDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroKeyImageSyncStepRequest_MoneroTransferDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroKeyImageSyncStepRequest_MoneroTransferDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroKeyImageSyncStepRequest_MoneroTransferDetails::MergeFrom(const MoneroKeyImageSyncStepRequest_MoneroTransferDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  additional_tx_pub_keys_.MergeFrom(from.additional_tx_pub_keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_out_key()) {
      set_out_key(from.out_key());
    }
    if (from.has_tx_pub_key()) {
      set_tx_pub_key(from.tx_pub_key());
    }
    if (from.has_internal_output_index()) {
      set_internal_output_index(from.internal_output_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroKeyImageSyncStepRequest_MoneroTransferDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroKeyImageSyncStepRequest_MoneroTransferDetails::CopyFrom(const MoneroKeyImageSyncStepRequest_MoneroTransferDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroKeyImageSyncStepRequest_MoneroTransferDetails::IsInitialized() const {

  return true;
}

void MoneroKeyImageSyncStepRequest_MoneroTransferDetails::Swap(MoneroKeyImageSyncStepRequest_MoneroTransferDetails* other) {
  if (other != this) {
    std::swap(out_key_, other->out_key_);
    std::swap(tx_pub_key_, other->tx_pub_key_);
    additional_tx_pub_keys_.Swap(&other->additional_tx_pub_keys_);
    std::swap(internal_output_index_, other->internal_output_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroKeyImageSyncStepRequest_MoneroTransferDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroKeyImageSyncStepRequest_MoneroTransferDetails_descriptor_;
  metadata.reflection = MoneroKeyImageSyncStepRequest_MoneroTransferDetails_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MoneroKeyImageSyncStepRequest::kTdisFieldNumber;
#endif  // !_MSC_VER

MoneroKeyImageSyncStepRequest::MoneroKeyImageSyncStepRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest)
}

void MoneroKeyImageSyncStepRequest::InitAsDefaultInstance() {
}

MoneroKeyImageSyncStepRequest::MoneroKeyImageSyncStepRequest(const MoneroKeyImageSyncStepRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest)
}

void MoneroKeyImageSyncStepRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroKeyImageSyncStepRequest::~MoneroKeyImageSyncStepRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest)
  SharedDtor();
}

void MoneroKeyImageSyncStepRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoneroKeyImageSyncStepRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroKeyImageSyncStepRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroKeyImageSyncStepRequest_descriptor_;
}

const MoneroKeyImageSyncStepRequest& MoneroKeyImageSyncStepRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroKeyImageSyncStepRequest* MoneroKeyImageSyncStepRequest::default_instance_ = NULL;

MoneroKeyImageSyncStepRequest* MoneroKeyImageSyncStepRequest::New() const {
  return new MoneroKeyImageSyncStepRequest;
}

void MoneroKeyImageSyncStepRequest::Clear() {
  tdis_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroKeyImageSyncStepRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails tdis = 1;
      case 1: {
        if (tag == 10) {
         parse_tdis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tdis()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_tdis;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest)
  return false;
#undef DO_
}

void MoneroKeyImageSyncStepRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest)
  // repeated .hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails tdis = 1;
  for (int i = 0; i < this->tdis_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tdis(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest)
}

::google::protobuf::uint8* MoneroKeyImageSyncStepRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest)
  // repeated .hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails tdis = 1;
  for (int i = 0; i < this->tdis_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tdis(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest)
  return target;
}

int MoneroKeyImageSyncStepRequest::ByteSize() const {
  int total_size = 0;

  // repeated .hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest.MoneroTransferDetails tdis = 1;
  total_size += 1 * this->tdis_size();
  for (int i = 0; i < this->tdis_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tdis(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroKeyImageSyncStepRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroKeyImageSyncStepRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroKeyImageSyncStepRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroKeyImageSyncStepRequest::MergeFrom(const MoneroKeyImageSyncStepRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  tdis_.MergeFrom(from.tdis_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroKeyImageSyncStepRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroKeyImageSyncStepRequest::CopyFrom(const MoneroKeyImageSyncStepRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroKeyImageSyncStepRequest::IsInitialized() const {

  return true;
}

void MoneroKeyImageSyncStepRequest::Swap(MoneroKeyImageSyncStepRequest* other) {
  if (other != this) {
    tdis_.Swap(&other->tdis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroKeyImageSyncStepRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroKeyImageSyncStepRequest_descriptor_;
  metadata.reflection = MoneroKeyImageSyncStepRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::kIvFieldNumber;
const int MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::kTagFieldNumber;
const int MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::kBlobFieldNumber;
#endif  // !_MSC_VER

MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::MoneroKeyImageSyncStepAck_MoneroExportedKeyImage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage)
}

void MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::InitAsDefaultInstance() {
}

MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::MoneroKeyImageSyncStepAck_MoneroExportedKeyImage(const MoneroKeyImageSyncStepAck_MoneroExportedKeyImage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage)
}

void MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  iv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blob_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::~MoneroKeyImageSyncStepAck_MoneroExportedKeyImage() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage)
  SharedDtor();
}

void MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::SharedDtor() {
  if (iv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete iv_;
  }
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (blob_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blob_;
  }
  if (this != default_instance_) {
  }
}

void MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroKeyImageSyncStepAck_MoneroExportedKeyImage_descriptor_;
}

const MoneroKeyImageSyncStepAck_MoneroExportedKeyImage& MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroKeyImageSyncStepAck_MoneroExportedKeyImage* MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::default_instance_ = NULL;

MoneroKeyImageSyncStepAck_MoneroExportedKeyImage* MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::New() const {
  return new MoneroKeyImageSyncStepAck_MoneroExportedKeyImage;
}

void MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_iv()) {
      if (iv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        iv_->clear();
      }
    }
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_->clear();
      }
    }
    if (has_blob()) {
      if (blob_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        blob_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes iv = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_iv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tag;
        break;
      }

      // optional bytes tag = 2;
      case 2: {
        if (tag == 18) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_blob;
        break;
      }

      // optional bytes blob = 3;
      case 3: {
        if (tag == 26) {
         parse_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_blob()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage)
  return false;
#undef DO_
}

void MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage)
  // optional bytes iv = 1;
  if (has_iv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->iv(), output);
  }

  // optional bytes tag = 2;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->tag(), output);
  }

  // optional bytes blob = 3;
  if (has_blob()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->blob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage)
}

::google::protobuf::uint8* MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage)
  // optional bytes iv = 1;
  if (has_iv()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->iv(), target);
  }

  // optional bytes tag = 2;
  if (has_tag()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->tag(), target);
  }

  // optional bytes blob = 3;
  if (has_blob()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->blob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage)
  return target;
}

int MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes iv = 1;
    if (has_iv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->iv());
    }

    // optional bytes tag = 2;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tag());
    }

    // optional bytes blob = 3;
    if (has_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->blob());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroKeyImageSyncStepAck_MoneroExportedKeyImage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroKeyImageSyncStepAck_MoneroExportedKeyImage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::MergeFrom(const MoneroKeyImageSyncStepAck_MoneroExportedKeyImage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iv()) {
      set_iv(from.iv());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_blob()) {
      set_blob(from.blob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::CopyFrom(const MoneroKeyImageSyncStepAck_MoneroExportedKeyImage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::IsInitialized() const {

  return true;
}

void MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::Swap(MoneroKeyImageSyncStepAck_MoneroExportedKeyImage* other) {
  if (other != this) {
    std::swap(iv_, other->iv_);
    std::swap(tag_, other->tag_);
    std::swap(blob_, other->blob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroKeyImageSyncStepAck_MoneroExportedKeyImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroKeyImageSyncStepAck_MoneroExportedKeyImage_descriptor_;
  metadata.reflection = MoneroKeyImageSyncStepAck_MoneroExportedKeyImage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MoneroKeyImageSyncStepAck::kKisFieldNumber;
#endif  // !_MSC_VER

MoneroKeyImageSyncStepAck::MoneroKeyImageSyncStepAck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck)
}

void MoneroKeyImageSyncStepAck::InitAsDefaultInstance() {
}

MoneroKeyImageSyncStepAck::MoneroKeyImageSyncStepAck(const MoneroKeyImageSyncStepAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck)
}

void MoneroKeyImageSyncStepAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroKeyImageSyncStepAck::~MoneroKeyImageSyncStepAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck)
  SharedDtor();
}

void MoneroKeyImageSyncStepAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoneroKeyImageSyncStepAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroKeyImageSyncStepAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroKeyImageSyncStepAck_descriptor_;
}

const MoneroKeyImageSyncStepAck& MoneroKeyImageSyncStepAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroKeyImageSyncStepAck* MoneroKeyImageSyncStepAck::default_instance_ = NULL;

MoneroKeyImageSyncStepAck* MoneroKeyImageSyncStepAck::New() const {
  return new MoneroKeyImageSyncStepAck;
}

void MoneroKeyImageSyncStepAck::Clear() {
  kis_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroKeyImageSyncStepAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage kis = 1;
      case 1: {
        if (tag == 10) {
         parse_kis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kis()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_kis;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck)
  return false;
#undef DO_
}

void MoneroKeyImageSyncStepAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck)
  // repeated .hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage kis = 1;
  for (int i = 0; i < this->kis_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->kis(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck)
}

::google::protobuf::uint8* MoneroKeyImageSyncStepAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck)
  // repeated .hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage kis = 1;
  for (int i = 0; i < this->kis_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->kis(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroKeyImageSyncStepAck)
  return target;
}

int MoneroKeyImageSyncStepAck::ByteSize() const {
  int total_size = 0;

  // repeated .hw.trezor.messages.monero.MoneroKeyImageSyncStepAck.MoneroExportedKeyImage kis = 1;
  total_size += 1 * this->kis_size();
  for (int i = 0; i < this->kis_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kis(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroKeyImageSyncStepAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroKeyImageSyncStepAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroKeyImageSyncStepAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroKeyImageSyncStepAck::MergeFrom(const MoneroKeyImageSyncStepAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  kis_.MergeFrom(from.kis_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroKeyImageSyncStepAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroKeyImageSyncStepAck::CopyFrom(const MoneroKeyImageSyncStepAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroKeyImageSyncStepAck::IsInitialized() const {

  return true;
}

void MoneroKeyImageSyncStepAck::Swap(MoneroKeyImageSyncStepAck* other) {
  if (other != this) {
    kis_.Swap(&other->kis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroKeyImageSyncStepAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroKeyImageSyncStepAck_descriptor_;
  metadata.reflection = MoneroKeyImageSyncStepAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MoneroKeyImageSyncFinalRequest::MoneroKeyImageSyncFinalRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroKeyImageSyncFinalRequest)
}

void MoneroKeyImageSyncFinalRequest::InitAsDefaultInstance() {
}

MoneroKeyImageSyncFinalRequest::MoneroKeyImageSyncFinalRequest(const MoneroKeyImageSyncFinalRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroKeyImageSyncFinalRequest)
}

void MoneroKeyImageSyncFinalRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroKeyImageSyncFinalRequest::~MoneroKeyImageSyncFinalRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroKeyImageSyncFinalRequest)
  SharedDtor();
}

void MoneroKeyImageSyncFinalRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoneroKeyImageSyncFinalRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroKeyImageSyncFinalRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroKeyImageSyncFinalRequest_descriptor_;
}

const MoneroKeyImageSyncFinalRequest& MoneroKeyImageSyncFinalRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroKeyImageSyncFinalRequest* MoneroKeyImageSyncFinalRequest::default_instance_ = NULL;

MoneroKeyImageSyncFinalRequest* MoneroKeyImageSyncFinalRequest::New() const {
  return new MoneroKeyImageSyncFinalRequest;
}

void MoneroKeyImageSyncFinalRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroKeyImageSyncFinalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroKeyImageSyncFinalRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroKeyImageSyncFinalRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroKeyImageSyncFinalRequest)
  return false;
#undef DO_
}

void MoneroKeyImageSyncFinalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroKeyImageSyncFinalRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroKeyImageSyncFinalRequest)
}

::google::protobuf::uint8* MoneroKeyImageSyncFinalRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroKeyImageSyncFinalRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroKeyImageSyncFinalRequest)
  return target;
}

int MoneroKeyImageSyncFinalRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroKeyImageSyncFinalRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroKeyImageSyncFinalRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroKeyImageSyncFinalRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroKeyImageSyncFinalRequest::MergeFrom(const MoneroKeyImageSyncFinalRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroKeyImageSyncFinalRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroKeyImageSyncFinalRequest::CopyFrom(const MoneroKeyImageSyncFinalRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroKeyImageSyncFinalRequest::IsInitialized() const {

  return true;
}

void MoneroKeyImageSyncFinalRequest::Swap(MoneroKeyImageSyncFinalRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroKeyImageSyncFinalRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroKeyImageSyncFinalRequest_descriptor_;
  metadata.reflection = MoneroKeyImageSyncFinalRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneroKeyImageSyncFinalAck::kEncKeyFieldNumber;
#endif  // !_MSC_VER

MoneroKeyImageSyncFinalAck::MoneroKeyImageSyncFinalAck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroKeyImageSyncFinalAck)
}

void MoneroKeyImageSyncFinalAck::InitAsDefaultInstance() {
}

MoneroKeyImageSyncFinalAck::MoneroKeyImageSyncFinalAck(const MoneroKeyImageSyncFinalAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroKeyImageSyncFinalAck)
}

void MoneroKeyImageSyncFinalAck::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  enc_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroKeyImageSyncFinalAck::~MoneroKeyImageSyncFinalAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroKeyImageSyncFinalAck)
  SharedDtor();
}

void MoneroKeyImageSyncFinalAck::SharedDtor() {
  if (enc_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete enc_key_;
  }
  if (this != default_instance_) {
  }
}

void MoneroKeyImageSyncFinalAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroKeyImageSyncFinalAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroKeyImageSyncFinalAck_descriptor_;
}

const MoneroKeyImageSyncFinalAck& MoneroKeyImageSyncFinalAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroKeyImageSyncFinalAck* MoneroKeyImageSyncFinalAck::default_instance_ = NULL;

MoneroKeyImageSyncFinalAck* MoneroKeyImageSyncFinalAck::New() const {
  return new MoneroKeyImageSyncFinalAck;
}

void MoneroKeyImageSyncFinalAck::Clear() {
  if (has_enc_key()) {
    if (enc_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      enc_key_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroKeyImageSyncFinalAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroKeyImageSyncFinalAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes enc_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_enc_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroKeyImageSyncFinalAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroKeyImageSyncFinalAck)
  return false;
#undef DO_
}

void MoneroKeyImageSyncFinalAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroKeyImageSyncFinalAck)
  // optional bytes enc_key = 1;
  if (has_enc_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->enc_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroKeyImageSyncFinalAck)
}

::google::protobuf::uint8* MoneroKeyImageSyncFinalAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroKeyImageSyncFinalAck)
  // optional bytes enc_key = 1;
  if (has_enc_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->enc_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroKeyImageSyncFinalAck)
  return target;
}

int MoneroKeyImageSyncFinalAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes enc_key = 1;
    if (has_enc_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->enc_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroKeyImageSyncFinalAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroKeyImageSyncFinalAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroKeyImageSyncFinalAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroKeyImageSyncFinalAck::MergeFrom(const MoneroKeyImageSyncFinalAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enc_key()) {
      set_enc_key(from.enc_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroKeyImageSyncFinalAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroKeyImageSyncFinalAck::CopyFrom(const MoneroKeyImageSyncFinalAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroKeyImageSyncFinalAck::IsInitialized() const {

  return true;
}

void MoneroKeyImageSyncFinalAck::Swap(MoneroKeyImageSyncFinalAck* other) {
  if (other != this) {
    std::swap(enc_key_, other->enc_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroKeyImageSyncFinalAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroKeyImageSyncFinalAck_descriptor_;
  metadata.reflection = MoneroKeyImageSyncFinalAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneroKeyImageSyncRequest::kInitFieldNumber;
const int MoneroKeyImageSyncRequest::kStepFieldNumber;
const int MoneroKeyImageSyncRequest::kFinalMsgFieldNumber;
#endif  // !_MSC_VER

MoneroKeyImageSyncRequest::MoneroKeyImageSyncRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.MoneroKeyImageSyncRequest)
}

void MoneroKeyImageSyncRequest::InitAsDefaultInstance() {
  init_ = const_cast< ::hw::trezor::messages::monero::MoneroKeyImageExportInitRequest*>(&::hw::trezor::messages::monero::MoneroKeyImageExportInitRequest::default_instance());
  step_ = const_cast< ::hw::trezor::messages::monero::MoneroKeyImageSyncStepRequest*>(&::hw::trezor::messages::monero::MoneroKeyImageSyncStepRequest::default_instance());
  final_msg_ = const_cast< ::hw::trezor::messages::monero::MoneroKeyImageSyncFinalRequest*>(&::hw::trezor::messages::monero::MoneroKeyImageSyncFinalRequest::default_instance());
}

MoneroKeyImageSyncRequest::MoneroKeyImageSyncRequest(const MoneroKeyImageSyncRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.MoneroKeyImageSyncRequest)
}

void MoneroKeyImageSyncRequest::SharedCtor() {
  _cached_size_ = 0;
  init_ = NULL;
  step_ = NULL;
  final_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneroKeyImageSyncRequest::~MoneroKeyImageSyncRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.MoneroKeyImageSyncRequest)
  SharedDtor();
}

void MoneroKeyImageSyncRequest::SharedDtor() {
  if (this != default_instance_) {
    delete init_;
    delete step_;
    delete final_msg_;
  }
}

void MoneroKeyImageSyncRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneroKeyImageSyncRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneroKeyImageSyncRequest_descriptor_;
}

const MoneroKeyImageSyncRequest& MoneroKeyImageSyncRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

MoneroKeyImageSyncRequest* MoneroKeyImageSyncRequest::default_instance_ = NULL;

MoneroKeyImageSyncRequest* MoneroKeyImageSyncRequest::New() const {
  return new MoneroKeyImageSyncRequest;
}

void MoneroKeyImageSyncRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_init()) {
      if (init_ != NULL) init_->::hw::trezor::messages::monero::MoneroKeyImageExportInitRequest::Clear();
    }
    if (has_step()) {
      if (step_ != NULL) step_->::hw::trezor::messages::monero::MoneroKeyImageSyncStepRequest::Clear();
    }
    if (has_final_msg()) {
      if (final_msg_ != NULL) final_msg_->::hw::trezor::messages::monero::MoneroKeyImageSyncFinalRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneroKeyImageSyncRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.MoneroKeyImageSyncRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hw.trezor.messages.monero.MoneroKeyImageExportInitRequest init = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_step;
        break;
      }

      // optional .hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest step = 2;
      case 2: {
        if (tag == 18) {
         parse_step:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_step()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_final_msg;
        break;
      }

      // optional .hw.trezor.messages.monero.MoneroKeyImageSyncFinalRequest final_msg = 3;
      case 3: {
        if (tag == 26) {
         parse_final_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_final_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.MoneroKeyImageSyncRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.MoneroKeyImageSyncRequest)
  return false;
#undef DO_
}

void MoneroKeyImageSyncRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.MoneroKeyImageSyncRequest)
  // optional .hw.trezor.messages.monero.MoneroKeyImageExportInitRequest init = 1;
  if (has_init()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->init(), output);
  }

  // optional .hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest step = 2;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->step(), output);
  }

  // optional .hw.trezor.messages.monero.MoneroKeyImageSyncFinalRequest final_msg = 3;
  if (has_final_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->final_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.MoneroKeyImageSyncRequest)
}

::google::protobuf::uint8* MoneroKeyImageSyncRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.MoneroKeyImageSyncRequest)
  // optional .hw.trezor.messages.monero.MoneroKeyImageExportInitRequest init = 1;
  if (has_init()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->init(), target);
  }

  // optional .hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest step = 2;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->step(), target);
  }

  // optional .hw.trezor.messages.monero.MoneroKeyImageSyncFinalRequest final_msg = 3;
  if (has_final_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->final_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.MoneroKeyImageSyncRequest)
  return target;
}

int MoneroKeyImageSyncRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hw.trezor.messages.monero.MoneroKeyImageExportInitRequest init = 1;
    if (has_init()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->init());
    }

    // optional .hw.trezor.messages.monero.MoneroKeyImageSyncStepRequest step = 2;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->step());
    }

    // optional .hw.trezor.messages.monero.MoneroKeyImageSyncFinalRequest final_msg = 3;
    if (has_final_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->final_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneroKeyImageSyncRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneroKeyImageSyncRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneroKeyImageSyncRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneroKeyImageSyncRequest::MergeFrom(const MoneroKeyImageSyncRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_init()) {
      mutable_init()->::hw::trezor::messages::monero::MoneroKeyImageExportInitRequest::MergeFrom(from.init());
    }
    if (from.has_step()) {
      mutable_step()->::hw::trezor::messages::monero::MoneroKeyImageSyncStepRequest::MergeFrom(from.step());
    }
    if (from.has_final_msg()) {
      mutable_final_msg()->::hw::trezor::messages::monero::MoneroKeyImageSyncFinalRequest::MergeFrom(from.final_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneroKeyImageSyncRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneroKeyImageSyncRequest::CopyFrom(const MoneroKeyImageSyncRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneroKeyImageSyncRequest::IsInitialized() const {

  return true;
}

void MoneroKeyImageSyncRequest::Swap(MoneroKeyImageSyncRequest* other) {
  if (other != this) {
    std::swap(init_, other->init_);
    std::swap(step_, other->step_);
    std::swap(final_msg_, other->final_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneroKeyImageSyncRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneroKeyImageSyncRequest_descriptor_;
  metadata.reflection = MoneroKeyImageSyncRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DebugMoneroDiagRequest::kInsFieldNumber;
const int DebugMoneroDiagRequest::kP1FieldNumber;
const int DebugMoneroDiagRequest::kP2FieldNumber;
const int DebugMoneroDiagRequest::kPdFieldNumber;
const int DebugMoneroDiagRequest::kData1FieldNumber;
const int DebugMoneroDiagRequest::kData2FieldNumber;
#endif  // !_MSC_VER

DebugMoneroDiagRequest::DebugMoneroDiagRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.DebugMoneroDiagRequest)
}

void DebugMoneroDiagRequest::InitAsDefaultInstance() {
}

DebugMoneroDiagRequest::DebugMoneroDiagRequest(const DebugMoneroDiagRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.DebugMoneroDiagRequest)
}

void DebugMoneroDiagRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ins_ = GOOGLE_ULONGLONG(0);
  p1_ = GOOGLE_ULONGLONG(0);
  p2_ = GOOGLE_ULONGLONG(0);
  data1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugMoneroDiagRequest::~DebugMoneroDiagRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.DebugMoneroDiagRequest)
  SharedDtor();
}

void DebugMoneroDiagRequest::SharedDtor() {
  if (data1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data1_;
  }
  if (data2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data2_;
  }
  if (this != default_instance_) {
  }
}

void DebugMoneroDiagRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugMoneroDiagRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugMoneroDiagRequest_descriptor_;
}

const DebugMoneroDiagRequest& DebugMoneroDiagRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

DebugMoneroDiagRequest* DebugMoneroDiagRequest::default_instance_ = NULL;

DebugMoneroDiagRequest* DebugMoneroDiagRequest::New() const {
  return new DebugMoneroDiagRequest;
}

void DebugMoneroDiagRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DebugMoneroDiagRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(ins_, p2_);
    if (has_data1()) {
      if (data1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data1_->clear();
      }
    }
    if (has_data2()) {
      if (data2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data2_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  pd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugMoneroDiagRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.DebugMoneroDiagRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ins = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ins_)));
          set_has_ins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_p1;
        break;
      }

      // optional uint64 p1 = 2;
      case 2: {
        if (tag == 16) {
         parse_p1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &p1_)));
          set_has_p1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_p2;
        break;
      }

      // optional uint64 p2 = 3;
      case 3: {
        if (tag == 24) {
         parse_p2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &p2_)));
          set_has_p2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pd;
        break;
      }

      // repeated uint64 pd = 4;
      case 4: {
        if (tag == 32) {
         parse_pd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_pd())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_pd())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pd;
        if (input->ExpectTag(42)) goto parse_data1;
        break;
      }

      // optional bytes data1 = 5;
      case 5: {
        if (tag == 42) {
         parse_data1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data2;
        break;
      }

      // optional bytes data2 = 6;
      case 6: {
        if (tag == 50) {
         parse_data2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.DebugMoneroDiagRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.DebugMoneroDiagRequest)
  return false;
#undef DO_
}

void DebugMoneroDiagRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.DebugMoneroDiagRequest)
  // optional uint64 ins = 1;
  if (has_ins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ins(), output);
  }

  // optional uint64 p1 = 2;
  if (has_p1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->p1(), output);
  }

  // optional uint64 p2 = 3;
  if (has_p2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->p2(), output);
  }

  // repeated uint64 pd = 4;
  for (int i = 0; i < this->pd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->pd(i), output);
  }

  // optional bytes data1 = 5;
  if (has_data1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data1(), output);
  }

  // optional bytes data2 = 6;
  if (has_data2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.DebugMoneroDiagRequest)
}

::google::protobuf::uint8* DebugMoneroDiagRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.DebugMoneroDiagRequest)
  // optional uint64 ins = 1;
  if (has_ins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ins(), target);
  }

  // optional uint64 p1 = 2;
  if (has_p1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->p1(), target);
  }

  // optional uint64 p2 = 3;
  if (has_p2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->p2(), target);
  }

  // repeated uint64 pd = 4;
  for (int i = 0; i < this->pd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->pd(i), target);
  }

  // optional bytes data1 = 5;
  if (has_data1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data1(), target);
  }

  // optional bytes data2 = 6;
  if (has_data2()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.DebugMoneroDiagRequest)
  return target;
}

int DebugMoneroDiagRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ins = 1;
    if (has_ins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ins());
    }

    // optional uint64 p1 = 2;
    if (has_p1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->p1());
    }

    // optional uint64 p2 = 3;
    if (has_p2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->p2());
    }

    // optional bytes data1 = 5;
    if (has_data1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data1());
    }

    // optional bytes data2 = 6;
    if (has_data2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data2());
    }

  }
  // repeated uint64 pd = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->pd_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->pd(i));
    }
    total_size += 1 * this->pd_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugMoneroDiagRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DebugMoneroDiagRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DebugMoneroDiagRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DebugMoneroDiagRequest::MergeFrom(const DebugMoneroDiagRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  pd_.MergeFrom(from.pd_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ins()) {
      set_ins(from.ins());
    }
    if (from.has_p1()) {
      set_p1(from.p1());
    }
    if (from.has_p2()) {
      set_p2(from.p2());
    }
    if (from.has_data1()) {
      set_data1(from.data1());
    }
    if (from.has_data2()) {
      set_data2(from.data2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugMoneroDiagRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugMoneroDiagRequest::CopyFrom(const DebugMoneroDiagRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugMoneroDiagRequest::IsInitialized() const {

  return true;
}

void DebugMoneroDiagRequest::Swap(DebugMoneroDiagRequest* other) {
  if (other != this) {
    std::swap(ins_, other->ins_);
    std::swap(p1_, other->p1_);
    std::swap(p2_, other->p2_);
    pd_.Swap(&other->pd_);
    std::swap(data1_, other->data1_);
    std::swap(data2_, other->data2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DebugMoneroDiagRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugMoneroDiagRequest_descriptor_;
  metadata.reflection = DebugMoneroDiagRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DebugMoneroDiagAck::kInsFieldNumber;
const int DebugMoneroDiagAck::kP1FieldNumber;
const int DebugMoneroDiagAck::kP2FieldNumber;
const int DebugMoneroDiagAck::kPdFieldNumber;
const int DebugMoneroDiagAck::kData1FieldNumber;
const int DebugMoneroDiagAck::kData2FieldNumber;
#endif  // !_MSC_VER

DebugMoneroDiagAck::DebugMoneroDiagAck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.monero.DebugMoneroDiagAck)
}

void DebugMoneroDiagAck::InitAsDefaultInstance() {
}

DebugMoneroDiagAck::DebugMoneroDiagAck(const DebugMoneroDiagAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.monero.DebugMoneroDiagAck)
}

void DebugMoneroDiagAck::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ins_ = GOOGLE_ULONGLONG(0);
  p1_ = GOOGLE_ULONGLONG(0);
  p2_ = GOOGLE_ULONGLONG(0);
  data1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugMoneroDiagAck::~DebugMoneroDiagAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.monero.DebugMoneroDiagAck)
  SharedDtor();
}

void DebugMoneroDiagAck::SharedDtor() {
  if (data1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data1_;
  }
  if (data2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data2_;
  }
  if (this != default_instance_) {
  }
}

void DebugMoneroDiagAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugMoneroDiagAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugMoneroDiagAck_descriptor_;
}

const DebugMoneroDiagAck& DebugMoneroDiagAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2dmonero_2eproto();
  return *default_instance_;
}

DebugMoneroDiagAck* DebugMoneroDiagAck::default_instance_ = NULL;

DebugMoneroDiagAck* DebugMoneroDiagAck::New() const {
  return new DebugMoneroDiagAck;
}

void DebugMoneroDiagAck::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DebugMoneroDiagAck*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(ins_, p2_);
    if (has_data1()) {
      if (data1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data1_->clear();
      }
    }
    if (has_data2()) {
      if (data2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data2_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  pd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugMoneroDiagAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.monero.DebugMoneroDiagAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ins = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ins_)));
          set_has_ins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_p1;
        break;
      }

      // optional uint64 p1 = 2;
      case 2: {
        if (tag == 16) {
         parse_p1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &p1_)));
          set_has_p1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_p2;
        break;
      }

      // optional uint64 p2 = 3;
      case 3: {
        if (tag == 24) {
         parse_p2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &p2_)));
          set_has_p2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pd;
        break;
      }

      // repeated uint64 pd = 4;
      case 4: {
        if (tag == 32) {
         parse_pd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_pd())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_pd())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pd;
        if (input->ExpectTag(42)) goto parse_data1;
        break;
      }

      // optional bytes data1 = 5;
      case 5: {
        if (tag == 42) {
         parse_data1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data2;
        break;
      }

      // optional bytes data2 = 6;
      case 6: {
        if (tag == 50) {
         parse_data2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.monero.DebugMoneroDiagAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.monero.DebugMoneroDiagAck)
  return false;
#undef DO_
}

void DebugMoneroDiagAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.monero.DebugMoneroDiagAck)
  // optional uint64 ins = 1;
  if (has_ins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ins(), output);
  }

  // optional uint64 p1 = 2;
  if (has_p1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->p1(), output);
  }

  // optional uint64 p2 = 3;
  if (has_p2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->p2(), output);
  }

  // repeated uint64 pd = 4;
  for (int i = 0; i < this->pd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->pd(i), output);
  }

  // optional bytes data1 = 5;
  if (has_data1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data1(), output);
  }

  // optional bytes data2 = 6;
  if (has_data2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.monero.DebugMoneroDiagAck)
}

::google::protobuf::uint8* DebugMoneroDiagAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.monero.DebugMoneroDiagAck)
  // optional uint64 ins = 1;
  if (has_ins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ins(), target);
  }

  // optional uint64 p1 = 2;
  if (has_p1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->p1(), target);
  }

  // optional uint64 p2 = 3;
  if (has_p2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->p2(), target);
  }

  // repeated uint64 pd = 4;
  for (int i = 0; i < this->pd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->pd(i), target);
  }

  // optional bytes data1 = 5;
  if (has_data1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data1(), target);
  }

  // optional bytes data2 = 6;
  if (has_data2()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.monero.DebugMoneroDiagAck)
  return target;
}

int DebugMoneroDiagAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ins = 1;
    if (has_ins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ins());
    }

    // optional uint64 p1 = 2;
    if (has_p1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->p1());
    }

    // optional uint64 p2 = 3;
    if (has_p2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->p2());
    }

    // optional bytes data1 = 5;
    if (has_data1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data1());
    }

    // optional bytes data2 = 6;
    if (has_data2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data2());
    }

  }
  // repeated uint64 pd = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->pd_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->pd(i));
    }
    total_size += 1 * this->pd_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugMoneroDiagAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DebugMoneroDiagAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DebugMoneroDiagAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DebugMoneroDiagAck::MergeFrom(const DebugMoneroDiagAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  pd_.MergeFrom(from.pd_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ins()) {
      set_ins(from.ins());
    }
    if (from.has_p1()) {
      set_p1(from.p1());
    }
    if (from.has_p2()) {
      set_p2(from.p2());
    }
    if (from.has_data1()) {
      set_data1(from.data1());
    }
    if (from.has_data2()) {
      set_data2(from.data2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugMoneroDiagAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugMoneroDiagAck::CopyFrom(const DebugMoneroDiagAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugMoneroDiagAck::IsInitialized() const {

  return true;
}

void DebugMoneroDiagAck::Swap(DebugMoneroDiagAck* other) {
  if (other != this) {
    std::swap(ins_, other->ins_);
    std::swap(p1_, other->p1_);
    std::swap(p2_, other->p2_);
    pd_.Swap(&other->pd_);
    std::swap(data1_, other->data1_);
    std::swap(data2_, other->data2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DebugMoneroDiagAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugMoneroDiagAck_descriptor_;
  metadata.reflection = DebugMoneroDiagAck_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace monero
}  // namespace messages
}  // namespace trezor
}  // namespace hw

// @@protoc_insertion_point(global_scope)
